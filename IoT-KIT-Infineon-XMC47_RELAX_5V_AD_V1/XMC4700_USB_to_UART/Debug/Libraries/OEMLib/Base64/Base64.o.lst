   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "Base64.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .rodata.b64,"a",%progbits
  20              	 .align 2
  23              	b64:
  24 0000 41424344 	 .ascii "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy"
  24      45464748 
  24      494A4B4C 
  24      4D4E4F50 
  24      51525354 
  25 0033 7A303132 	 .ascii "z0123456789+/\000"
  25      33343536 
  25      3738392B 
  25      2F00
  26 0041 000000   	 .section .rodata.b64invs,"a",%progbits
  27              	 .align 2
  30              	b64invs:
  31 0000 3E000000 	 .word 62
  32 0004 FFFFFFFF 	 .word -1
  33 0008 FFFFFFFF 	 .word -1
  34 000c FFFFFFFF 	 .word -1
  35 0010 3F000000 	 .word 63
  36 0014 34000000 	 .word 52
  37 0018 35000000 	 .word 53
  38 001c 36000000 	 .word 54
  39 0020 37000000 	 .word 55
  40 0024 38000000 	 .word 56
  41 0028 39000000 	 .word 57
  42 002c 3A000000 	 .word 58
  43 0030 3B000000 	 .word 59
  44 0034 3C000000 	 .word 60
  45 0038 3D000000 	 .word 61
  46 003c FFFFFFFF 	 .word -1
  47 0040 FFFFFFFF 	 .word -1
  48 0044 FFFFFFFF 	 .word -1
  49 0048 FFFFFFFF 	 .word -1
  50 004c FFFFFFFF 	 .word -1
  51 0050 FFFFFFFF 	 .word -1
  52 0054 FFFFFFFF 	 .word -1
  53 0058 00000000 	 .word 0
  54 005c 01000000 	 .word 1
  55 0060 02000000 	 .word 2
  56 0064 03000000 	 .word 3
  57 0068 04000000 	 .word 4
  58 006c 05000000 	 .word 5
  59 0070 06000000 	 .word 6
  60 0074 07000000 	 .word 7
  61 0078 08000000 	 .word 8
  62 007c 09000000 	 .word 9
  63 0080 0A000000 	 .word 10
  64 0084 0B000000 	 .word 11
  65 0088 0C000000 	 .word 12
  66 008c 0D000000 	 .word 13
  67 0090 0E000000 	 .word 14
  68 0094 0F000000 	 .word 15
  69 0098 10000000 	 .word 16
  70 009c 11000000 	 .word 17
  71 00a0 12000000 	 .word 18
  72 00a4 13000000 	 .word 19
  73 00a8 14000000 	 .word 20
  74 00ac 15000000 	 .word 21
  75 00b0 16000000 	 .word 22
  76 00b4 17000000 	 .word 23
  77 00b8 18000000 	 .word 24
  78 00bc 19000000 	 .word 25
  79 00c0 FFFFFFFF 	 .word -1
  80 00c4 FFFFFFFF 	 .word -1
  81 00c8 FFFFFFFF 	 .word -1
  82 00cc FFFFFFFF 	 .word -1
  83 00d0 FFFFFFFF 	 .word -1
  84 00d4 FFFFFFFF 	 .word -1
  85 00d8 1A000000 	 .word 26
  86 00dc 1B000000 	 .word 27
  87 00e0 1C000000 	 .word 28
  88 00e4 1D000000 	 .word 29
  89 00e8 1E000000 	 .word 30
  90 00ec 1F000000 	 .word 31
  91 00f0 20000000 	 .word 32
  92 00f4 21000000 	 .word 33
  93 00f8 22000000 	 .word 34
  94 00fc 23000000 	 .word 35
  95 0100 24000000 	 .word 36
  96 0104 25000000 	 .word 37
  97 0108 26000000 	 .word 38
  98 010c 27000000 	 .word 39
  99 0110 28000000 	 .word 40
 100 0114 29000000 	 .word 41
 101 0118 2A000000 	 .word 42
 102 011c 2B000000 	 .word 43
 103 0120 2C000000 	 .word 44
 104 0124 2D000000 	 .word 45
 105 0128 2E000000 	 .word 46
 106 012c 2F000000 	 .word 47
 107 0130 30000000 	 .word 48
 108 0134 31000000 	 .word 49
 109 0138 32000000 	 .word 50
 110 013c 33000000 	 .word 51
 111              	 .section .text.base64_encode,"ax",%progbits
 112              	 .align 2
 113              	 .global base64_encode
 114              	 .thumb
 115              	 .thumb_func
 117              	base64_encode:
 118              	.LFB349:
 119              	 .file 1 "../Libraries/OEMLib/Base64/Base64.c"
   1:../Libraries/OEMLib/Base64/Base64.c **** /*
   2:../Libraries/OEMLib/Base64/Base64.c ****  * Base64.c
   3:../Libraries/OEMLib/Base64/Base64.c ****  *
   4:../Libraries/OEMLib/Base64/Base64.c ****  *  Created on: 17 Mar 2020
   5:../Libraries/OEMLib/Base64/Base64.c ****  *      Author: DanielHackl
   6:../Libraries/OEMLib/Base64/Base64.c ****  */
   7:../Libraries/OEMLib/Base64/Base64.c **** #include <base64.h>
   8:../Libraries/OEMLib/Base64/Base64.c **** #include <stdlib.h>
   9:../Libraries/OEMLib/Base64/Base64.c **** #include "stdint.h"
  10:../Libraries/OEMLib/Base64/Base64.c **** #include <DAVE.h>
  11:../Libraries/OEMLib/Base64/Base64.c **** 
  12:../Libraries/OEMLib/Base64/Base64.c **** 
  13:../Libraries/OEMLib/Base64/Base64.c **** const static char b64[]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" ;
  14:../Libraries/OEMLib/Base64/Base64.c **** const static int b64invs[] = { 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58,
  15:../Libraries/OEMLib/Base64/Base64.c **** 	59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5,
  16:../Libraries/OEMLib/Base64/Base64.c **** 	6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
  17:../Libraries/OEMLib/Base64/Base64.c **** 	21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,
  18:../Libraries/OEMLib/Base64/Base64.c **** 	29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
  19:../Libraries/OEMLib/Base64/Base64.c **** 	43, 44, 45, 46, 47, 48, 49, 50, 51 };
  20:../Libraries/OEMLib/Base64/Base64.c **** 
  21:../Libraries/OEMLib/Base64/Base64.c **** 
  22:../Libraries/OEMLib/Base64/Base64.c **** //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  23:../Libraries/OEMLib/Base64/Base64.c **** // Base64 Encode
  24:../Libraries/OEMLib/Base64/Base64.c **** char* base64_encode( const void* binaryData, uint16_t len, uint16_t *flen )
  25:../Libraries/OEMLib/Base64/Base64.c **** {
 120              	 .loc 1 25 0
 121              	 .cfi_startproc
 122              	 
 123              	 
 124 0000 80B5     	 push {r7,lr}
 125              	.LCFI0:
 126              	 .cfi_def_cfa_offset 8
 127              	 .cfi_offset 7,-8
 128              	 .cfi_offset 14,-4
 129 0002 8CB0     	 sub sp,sp,#48
 130              	.LCFI1:
 131              	 .cfi_def_cfa_offset 56
 132 0004 00AF     	 add r7,sp,#0
 133              	.LCFI2:
 134              	 .cfi_def_cfa_register 7
 135 0006 F860     	 str r0,[r7,#12]
 136 0008 0B46     	 mov r3,r1
 137 000a 7A60     	 str r2,[r7,#4]
 138 000c 7B81     	 strh r3,[r7,#10]
  26:../Libraries/OEMLib/Base64/Base64.c ****   const unsigned char* bin = (const unsigned char*) binaryData ;
 139              	 .loc 1 26 0
 140 000e FB68     	 ldr r3,[r7,#12]
 141 0010 7B62     	 str r3,[r7,#36]
  27:../Libraries/OEMLib/Base64/Base64.c ****   char * result;
  28:../Libraries/OEMLib/Base64/Base64.c **** 
  29:../Libraries/OEMLib/Base64/Base64.c ****   int rc = 0 ; // result counter
 142              	 .loc 1 29 0
 143 0012 0023     	 movs r3,#0
 144 0014 FB62     	 str r3,[r7,#44]
  30:../Libraries/OEMLib/Base64/Base64.c ****   int byteNo ; // I need this after the loop
  31:../Libraries/OEMLib/Base64/Base64.c **** 
  32:../Libraries/OEMLib/Base64/Base64.c ****   int modulusLen = len % 3 ;
 145              	 .loc 1 32 0
 146 0016 7A89     	 ldrh r2,[r7,#10]
 147 0018 834B     	 ldr r3,.L8
 148 001a A3FB0213 	 umull r1,r3,r3,r2
 149 001e 5908     	 lsrs r1,r3,#1
 150 0020 0B46     	 mov r3,r1
 151 0022 5B00     	 lsls r3,r3,#1
 152 0024 0B44     	 add r3,r3,r1
 153 0026 D31A     	 subs r3,r2,r3
 154 0028 9BB2     	 uxth r3,r3
 155 002a 3B62     	 str r3,[r7,#32]
  33:../Libraries/OEMLib/Base64/Base64.c ****   int pad = ((modulusLen&1)<<1) + ((modulusLen&2)>>1) ; // 2 gives 1 and 1 gives 2, but 0 gives 0.
 156              	 .loc 1 33 0
 157 002c 3B6A     	 ldr r3,[r7,#32]
 158 002e 03F00103 	 and r3,r3,#1
 159 0032 5A00     	 lsls r2,r3,#1
 160 0034 3B6A     	 ldr r3,[r7,#32]
 161 0036 03F00203 	 and r3,r3,#2
 162 003a 5B10     	 asrs r3,r3,#1
 163 003c 1344     	 add r3,r3,r2
 164 003e FB61     	 str r3,[r7,#28]
  34:../Libraries/OEMLib/Base64/Base64.c **** 
  35:../Libraries/OEMLib/Base64/Base64.c ****   *flen = 4*(len + pad)/3 ;
 165              	 .loc 1 35 0
 166 0040 7A89     	 ldrh r2,[r7,#10]
 167 0042 FB69     	 ldr r3,[r7,#28]
 168 0044 1344     	 add r3,r3,r2
 169 0046 9B00     	 lsls r3,r3,#2
 170 0048 784A     	 ldr r2,.L8+4
 171 004a 82FB0312 	 smull r1,r2,r2,r3
 172 004e DB17     	 asrs r3,r3,#31
 173 0050 D31A     	 subs r3,r2,r3
 174 0052 9AB2     	 uxth r2,r3
 175 0054 7B68     	 ldr r3,[r7,#4]
 176 0056 1A80     	 strh r2,[r3]
  36:../Libraries/OEMLib/Base64/Base64.c ****   result = (char*) calloc( *flen + 1,sizeof(char) ) ; // and one for the null
 177              	 .loc 1 36 0
 178 0058 7B68     	 ldr r3,[r7,#4]
 179 005a 1B88     	 ldrh r3,[r3]
 180 005c 0133     	 adds r3,r3,#1
 181 005e 1846     	 mov r0,r3
 182 0060 0121     	 movs r1,#1
 183 0062 FFF7FEFF 	 bl calloc
 184 0066 0346     	 mov r3,r0
 185 0068 BB61     	 str r3,[r7,#24]
  37:../Libraries/OEMLib/Base64/Base64.c ****   if( !result )
 186              	 .loc 1 37 0
 187 006a BB69     	 ldr r3,[r7,#24]
 188 006c 002B     	 cmp r3,#0
 189 006e 01D1     	 bne .L2
  38:../Libraries/OEMLib/Base64/Base64.c ****   {
  39:../Libraries/OEMLib/Base64/Base64.c **** //    puts( "ERROR: base64 could not allocate enough memory." ) ;
  40:../Libraries/OEMLib/Base64/Base64.c **** //    puts( "I must stop because I could not get enough" ) ;
  41:../Libraries/OEMLib/Base64/Base64.c ****     return NULL;
 190              	 .loc 1 41 0
 191 0070 0023     	 movs r3,#0
 192 0072 D4E0     	 b .L3
 193              	.L2:
  42:../Libraries/OEMLib/Base64/Base64.c ****   }
  43:../Libraries/OEMLib/Base64/Base64.c **** 
  44:../Libraries/OEMLib/Base64/Base64.c ****   for( byteNo = 0 ; byteNo <= len-3 ; byteNo+=3 )
 194              	 .loc 1 44 0
 195 0074 0023     	 movs r3,#0
 196 0076 BB62     	 str r3,[r7,#40]
 197 0078 4EE0     	 b .L4
 198              	.L5:
 199              	.LBB2:
  45:../Libraries/OEMLib/Base64/Base64.c ****   {
  46:../Libraries/OEMLib/Base64/Base64.c ****     unsigned char BYTE0=bin[byteNo];
 200              	 .loc 1 46 0 discriminator 3
 201 007a BB6A     	 ldr r3,[r7,#40]
 202 007c 7A6A     	 ldr r2,[r7,#36]
 203 007e 1344     	 add r3,r3,r2
 204 0080 1B78     	 ldrb r3,[r3]
 205 0082 FB75     	 strb r3,[r7,#23]
  47:../Libraries/OEMLib/Base64/Base64.c ****     unsigned char BYTE1=bin[byteNo+1];
 206              	 .loc 1 47 0 discriminator 3
 207 0084 BB6A     	 ldr r3,[r7,#40]
 208 0086 0133     	 adds r3,r3,#1
 209 0088 7A6A     	 ldr r2,[r7,#36]
 210 008a 1344     	 add r3,r3,r2
 211 008c 1B78     	 ldrb r3,[r3]
 212 008e BB75     	 strb r3,[r7,#22]
  48:../Libraries/OEMLib/Base64/Base64.c ****     unsigned char BYTE2=bin[byteNo+2];
 213              	 .loc 1 48 0 discriminator 3
 214 0090 BB6A     	 ldr r3,[r7,#40]
 215 0092 0233     	 adds r3,r3,#2
 216 0094 7A6A     	 ldr r2,[r7,#36]
 217 0096 1344     	 add r3,r3,r2
 218 0098 1B78     	 ldrb r3,[r3]
 219 009a 7B75     	 strb r3,[r7,#21]
  49:../Libraries/OEMLib/Base64/Base64.c ****     result[rc++]  = b64[ BYTE0 >> 2 ] ;
 220              	 .loc 1 49 0 discriminator 3
 221 009c FB6A     	 ldr r3,[r7,#44]
 222 009e 5A1C     	 adds r2,r3,#1
 223 00a0 FA62     	 str r2,[r7,#44]
 224 00a2 1A46     	 mov r2,r3
 225 00a4 BB69     	 ldr r3,[r7,#24]
 226 00a6 1344     	 add r3,r3,r2
 227 00a8 FA7D     	 ldrb r2,[r7,#23]
 228 00aa 9208     	 lsrs r2,r2,#2
 229 00ac D2B2     	 uxtb r2,r2
 230 00ae 1146     	 mov r1,r2
 231 00b0 5F4A     	 ldr r2,.L8+8
 232 00b2 525C     	 ldrb r2,[r2,r1]
 233 00b4 1A70     	 strb r2,[r3]
  50:../Libraries/OEMLib/Base64/Base64.c ****     result[rc++]  = b64[ ((0x3&BYTE0)<<4) + (BYTE1 >> 4) ] ;
 234              	 .loc 1 50 0 discriminator 3
 235 00b6 FB6A     	 ldr r3,[r7,#44]
 236 00b8 5A1C     	 adds r2,r3,#1
 237 00ba FA62     	 str r2,[r7,#44]
 238 00bc 1A46     	 mov r2,r3
 239 00be BB69     	 ldr r3,[r7,#24]
 240 00c0 1344     	 add r3,r3,r2
 241 00c2 FA7D     	 ldrb r2,[r7,#23]
 242 00c4 02F00302 	 and r2,r2,#3
 243 00c8 1201     	 lsls r2,r2,#4
 244 00ca B97D     	 ldrb r1,[r7,#22]
 245 00cc 0909     	 lsrs r1,r1,#4
 246 00ce C9B2     	 uxtb r1,r1
 247 00d0 0A44     	 add r2,r2,r1
 248 00d2 5749     	 ldr r1,.L8+8
 249 00d4 8A5C     	 ldrb r2,[r1,r2]
 250 00d6 1A70     	 strb r2,[r3]
  51:../Libraries/OEMLib/Base64/Base64.c ****     result[rc++]  = b64[ ((0x0f&BYTE1)<<2) + (BYTE2>>6) ] ;
 251              	 .loc 1 51 0 discriminator 3
 252 00d8 FB6A     	 ldr r3,[r7,#44]
 253 00da 5A1C     	 adds r2,r3,#1
 254 00dc FA62     	 str r2,[r7,#44]
 255 00de 1A46     	 mov r2,r3
 256 00e0 BB69     	 ldr r3,[r7,#24]
 257 00e2 1344     	 add r3,r3,r2
 258 00e4 BA7D     	 ldrb r2,[r7,#22]
 259 00e6 02F00F02 	 and r2,r2,#15
 260 00ea 9200     	 lsls r2,r2,#2
 261 00ec 797D     	 ldrb r1,[r7,#21]
 262 00ee 8909     	 lsrs r1,r1,#6
 263 00f0 C9B2     	 uxtb r1,r1
 264 00f2 0A44     	 add r2,r2,r1
 265 00f4 4E49     	 ldr r1,.L8+8
 266 00f6 8A5C     	 ldrb r2,[r1,r2]
 267 00f8 1A70     	 strb r2,[r3]
  52:../Libraries/OEMLib/Base64/Base64.c ****     result[rc++]  = b64[ 0x3f&BYTE2 ] ;
 268              	 .loc 1 52 0 discriminator 3
 269 00fa FB6A     	 ldr r3,[r7,#44]
 270 00fc 5A1C     	 adds r2,r3,#1
 271 00fe FA62     	 str r2,[r7,#44]
 272 0100 1A46     	 mov r2,r3
 273 0102 BB69     	 ldr r3,[r7,#24]
 274 0104 1344     	 add r3,r3,r2
 275 0106 7A7D     	 ldrb r2,[r7,#21]
 276 0108 02F03F02 	 and r2,r2,#63
 277 010c 4849     	 ldr r1,.L8+8
 278 010e 8A5C     	 ldrb r2,[r1,r2]
 279 0110 1A70     	 strb r2,[r3]
 280              	.LBE2:
  44:../Libraries/OEMLib/Base64/Base64.c ****   {
 281              	 .loc 1 44 0 discriminator 3
 282 0112 BB6A     	 ldr r3,[r7,#40]
 283 0114 0333     	 adds r3,r3,#3
 284 0116 BB62     	 str r3,[r7,#40]
 285              	.L4:
  44:../Libraries/OEMLib/Base64/Base64.c ****   {
 286              	 .loc 1 44 0 is_stmt 0 discriminator 1
 287 0118 7B89     	 ldrh r3,[r7,#10]
 288 011a DA1E     	 subs r2,r3,#3
 289 011c BB6A     	 ldr r3,[r7,#40]
 290 011e 9A42     	 cmp r2,r3
 291 0120 ABDA     	 bge .L5
  53:../Libraries/OEMLib/Base64/Base64.c ****   }
  54:../Libraries/OEMLib/Base64/Base64.c **** 
  55:../Libraries/OEMLib/Base64/Base64.c ****   if( pad==2 )
 292              	 .loc 1 55 0 is_stmt 1
 293 0122 FB69     	 ldr r3,[r7,#28]
 294 0124 022B     	 cmp r3,#2
 295 0126 30D1     	 bne .L6
  56:../Libraries/OEMLib/Base64/Base64.c ****   {
  57:../Libraries/OEMLib/Base64/Base64.c **** 	result[rc++] = b64[ bin[byteNo] >> 2 ] ;
 296              	 .loc 1 57 0
 297 0128 FB6A     	 ldr r3,[r7,#44]
 298 012a 5A1C     	 adds r2,r3,#1
 299 012c FA62     	 str r2,[r7,#44]
 300 012e 1A46     	 mov r2,r3
 301 0130 BB69     	 ldr r3,[r7,#24]
 302 0132 1344     	 add r3,r3,r2
 303 0134 BA6A     	 ldr r2,[r7,#40]
 304 0136 796A     	 ldr r1,[r7,#36]
 305 0138 0A44     	 add r2,r2,r1
 306 013a 1278     	 ldrb r2,[r2]
 307 013c 9208     	 lsrs r2,r2,#2
 308 013e D2B2     	 uxtb r2,r2
 309 0140 1146     	 mov r1,r2
 310 0142 3B4A     	 ldr r2,.L8+8
 311 0144 525C     	 ldrb r2,[r2,r1]
 312 0146 1A70     	 strb r2,[r3]
  58:../Libraries/OEMLib/Base64/Base64.c **** 	result[rc++] = b64[ (0x3&bin[byteNo])<<4 ] ;
 313              	 .loc 1 58 0
 314 0148 FB6A     	 ldr r3,[r7,#44]
 315 014a 5A1C     	 adds r2,r3,#1
 316 014c FA62     	 str r2,[r7,#44]
 317 014e 1A46     	 mov r2,r3
 318 0150 BB69     	 ldr r3,[r7,#24]
 319 0152 1344     	 add r3,r3,r2
 320 0154 BA6A     	 ldr r2,[r7,#40]
 321 0156 796A     	 ldr r1,[r7,#36]
 322 0158 0A44     	 add r2,r2,r1
 323 015a 1278     	 ldrb r2,[r2]
 324 015c 02F00302 	 and r2,r2,#3
 325 0160 1201     	 lsls r2,r2,#4
 326 0162 3349     	 ldr r1,.L8+8
 327 0164 8A5C     	 ldrb r2,[r1,r2]
 328 0166 1A70     	 strb r2,[r3]
  59:../Libraries/OEMLib/Base64/Base64.c **** 	result[rc++] = '=';
 329              	 .loc 1 59 0
 330 0168 FB6A     	 ldr r3,[r7,#44]
 331 016a 5A1C     	 adds r2,r3,#1
 332 016c FA62     	 str r2,[r7,#44]
 333 016e 1A46     	 mov r2,r3
 334 0170 BB69     	 ldr r3,[r7,#24]
 335 0172 1344     	 add r3,r3,r2
 336 0174 3D22     	 movs r2,#61
 337 0176 1A70     	 strb r2,[r3]
  60:../Libraries/OEMLib/Base64/Base64.c **** 	result[rc++] = '=';
 338              	 .loc 1 60 0
 339 0178 FB6A     	 ldr r3,[r7,#44]
 340 017a 5A1C     	 adds r2,r3,#1
 341 017c FA62     	 str r2,[r7,#44]
 342 017e 1A46     	 mov r2,r3
 343 0180 BB69     	 ldr r3,[r7,#24]
 344 0182 1344     	 add r3,r3,r2
 345 0184 3D22     	 movs r2,#61
 346 0186 1A70     	 strb r2,[r3]
 347 0188 43E0     	 b .L7
 348              	.L6:
  61:../Libraries/OEMLib/Base64/Base64.c ****   }
  62:../Libraries/OEMLib/Base64/Base64.c ****   else if( pad==1 )
 349              	 .loc 1 62 0
 350 018a FB69     	 ldr r3,[r7,#28]
 351 018c 012B     	 cmp r3,#1
 352 018e 40D1     	 bne .L7
  63:../Libraries/OEMLib/Base64/Base64.c ****   {
  64:../Libraries/OEMLib/Base64/Base64.c **** 	result[rc++]  = b64[ bin[byteNo] >> 2 ] ;
 353              	 .loc 1 64 0
 354 0190 FB6A     	 ldr r3,[r7,#44]
 355 0192 5A1C     	 adds r2,r3,#1
 356 0194 FA62     	 str r2,[r7,#44]
 357 0196 1A46     	 mov r2,r3
 358 0198 BB69     	 ldr r3,[r7,#24]
 359 019a 1344     	 add r3,r3,r2
 360 019c BA6A     	 ldr r2,[r7,#40]
 361 019e 796A     	 ldr r1,[r7,#36]
 362 01a0 0A44     	 add r2,r2,r1
 363 01a2 1278     	 ldrb r2,[r2]
 364 01a4 9208     	 lsrs r2,r2,#2
 365 01a6 D2B2     	 uxtb r2,r2
 366 01a8 1146     	 mov r1,r2
 367 01aa 214A     	 ldr r2,.L8+8
 368 01ac 525C     	 ldrb r2,[r2,r1]
 369 01ae 1A70     	 strb r2,[r3]
  65:../Libraries/OEMLib/Base64/Base64.c **** 	result[rc++]  = b64[ ((0x3&bin[byteNo])<<4)   +   (bin[byteNo+1] >> 4) ] ;
 370              	 .loc 1 65 0
 371 01b0 FB6A     	 ldr r3,[r7,#44]
 372 01b2 5A1C     	 adds r2,r3,#1
 373 01b4 FA62     	 str r2,[r7,#44]
 374 01b6 1A46     	 mov r2,r3
 375 01b8 BB69     	 ldr r3,[r7,#24]
 376 01ba 1344     	 add r3,r3,r2
 377 01bc BA6A     	 ldr r2,[r7,#40]
 378 01be 796A     	 ldr r1,[r7,#36]
 379 01c0 0A44     	 add r2,r2,r1
 380 01c2 1278     	 ldrb r2,[r2]
 381 01c4 02F00302 	 and r2,r2,#3
 382 01c8 1201     	 lsls r2,r2,#4
 383 01ca B96A     	 ldr r1,[r7,#40]
 384 01cc 0131     	 adds r1,r1,#1
 385 01ce 786A     	 ldr r0,[r7,#36]
 386 01d0 0144     	 add r1,r1,r0
 387 01d2 0978     	 ldrb r1,[r1]
 388 01d4 0909     	 lsrs r1,r1,#4
 389 01d6 C9B2     	 uxtb r1,r1
 390 01d8 0A44     	 add r2,r2,r1
 391 01da 1549     	 ldr r1,.L8+8
 392 01dc 8A5C     	 ldrb r2,[r1,r2]
 393 01de 1A70     	 strb r2,[r3]
  66:../Libraries/OEMLib/Base64/Base64.c **** 	result[rc++]  = b64[ (0x0f&bin[byteNo+1])<<2 ] ;
 394              	 .loc 1 66 0
 395 01e0 FB6A     	 ldr r3,[r7,#44]
 396 01e2 5A1C     	 adds r2,r3,#1
 397 01e4 FA62     	 str r2,[r7,#44]
 398 01e6 1A46     	 mov r2,r3
 399 01e8 BB69     	 ldr r3,[r7,#24]
 400 01ea 1344     	 add r3,r3,r2
 401 01ec BA6A     	 ldr r2,[r7,#40]
 402 01ee 0132     	 adds r2,r2,#1
 403 01f0 796A     	 ldr r1,[r7,#36]
 404 01f2 0A44     	 add r2,r2,r1
 405 01f4 1278     	 ldrb r2,[r2]
 406 01f6 02F00F02 	 and r2,r2,#15
 407 01fa 9200     	 lsls r2,r2,#2
 408 01fc 0C49     	 ldr r1,.L8+8
 409 01fe 8A5C     	 ldrb r2,[r1,r2]
 410 0200 1A70     	 strb r2,[r3]
  67:../Libraries/OEMLib/Base64/Base64.c **** 	result[rc++] = '=';
 411              	 .loc 1 67 0
 412 0202 FB6A     	 ldr r3,[r7,#44]
 413 0204 5A1C     	 adds r2,r3,#1
 414 0206 FA62     	 str r2,[r7,#44]
 415 0208 1A46     	 mov r2,r3
 416 020a BB69     	 ldr r3,[r7,#24]
 417 020c 1344     	 add r3,r3,r2
 418 020e 3D22     	 movs r2,#61
 419 0210 1A70     	 strb r2,[r3]
 420              	.L7:
  68:../Libraries/OEMLib/Base64/Base64.c ****   }
  69:../Libraries/OEMLib/Base64/Base64.c **** 
  70:../Libraries/OEMLib/Base64/Base64.c ****   result[rc]=0; // NULL TERMINATOR! ;)
 421              	 .loc 1 70 0
 422 0212 FB6A     	 ldr r3,[r7,#44]
 423 0214 BA69     	 ldr r2,[r7,#24]
 424 0216 1344     	 add r3,r3,r2
 425 0218 0022     	 movs r2,#0
 426 021a 1A70     	 strb r2,[r3]
  71:../Libraries/OEMLib/Base64/Base64.c ****   return result;
 427              	 .loc 1 71 0
 428 021c BB69     	 ldr r3,[r7,#24]
 429              	.L3:
  72:../Libraries/OEMLib/Base64/Base64.c **** }
 430              	 .loc 1 72 0
 431 021e 1846     	 mov r0,r3
 432 0220 3037     	 adds r7,r7,#48
 433              	.LCFI3:
 434              	 .cfi_def_cfa_offset 8
 435 0222 BD46     	 mov sp,r7
 436              	.LCFI4:
 437              	 .cfi_def_cfa_register 13
 438              	 
 439 0224 80BD     	 pop {r7,pc}
 440              	.L9:
 441 0226 00BF     	 .align 2
 442              	.L8:
 443 0228 ABAAAAAA 	 .word -1431655765
 444 022c 56555555 	 .word 1431655766
 445 0230 00000000 	 .word b64
 446              	 .cfi_endproc
 447              	.LFE349:
 449              	 .section .text.b64_decoded_size,"ax",%progbits
 450              	 .align 2
 451              	 .global b64_decoded_size
 452              	 .thumb
 453              	 .thumb_func
 455              	b64_decoded_size:
 456              	.LFB350:
  73:../Libraries/OEMLib/Base64/Base64.c **** 
  74:../Libraries/OEMLib/Base64/Base64.c **** //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  75:../Libraries/OEMLib/Base64/Base64.c **** // Decode Size
  76:../Libraries/OEMLib/Base64/Base64.c **** size_t b64_decoded_size(const char *in)
  77:../Libraries/OEMLib/Base64/Base64.c **** {
 457              	 .loc 1 77 0
 458              	 .cfi_startproc
 459              	 
 460              	 
 461 0000 80B5     	 push {r7,lr}
 462              	.LCFI5:
 463              	 .cfi_def_cfa_offset 8
 464              	 .cfi_offset 7,-8
 465              	 .cfi_offset 14,-4
 466 0002 86B0     	 sub sp,sp,#24
 467              	.LCFI6:
 468              	 .cfi_def_cfa_offset 32
 469 0004 00AF     	 add r7,sp,#0
 470              	.LCFI7:
 471              	 .cfi_def_cfa_register 7
 472 0006 7860     	 str r0,[r7,#4]
  78:../Libraries/OEMLib/Base64/Base64.c **** 	size_t len;
  79:../Libraries/OEMLib/Base64/Base64.c **** 	size_t ret;
  80:../Libraries/OEMLib/Base64/Base64.c **** 	size_t i;
  81:../Libraries/OEMLib/Base64/Base64.c **** 
  82:../Libraries/OEMLib/Base64/Base64.c **** 	if (in == NULL)
 473              	 .loc 1 82 0
 474 0008 7B68     	 ldr r3,[r7,#4]
 475 000a 002B     	 cmp r3,#0
 476 000c 01D1     	 bne .L11
  83:../Libraries/OEMLib/Base64/Base64.c **** 		return 0;
 477              	 .loc 1 83 0
 478 000e 0023     	 movs r3,#0
 479 0010 1DE0     	 b .L12
 480              	.L11:
  84:../Libraries/OEMLib/Base64/Base64.c **** 
  85:../Libraries/OEMLib/Base64/Base64.c **** 	len = strlen(in);
 481              	 .loc 1 85 0
 482 0012 7868     	 ldr r0,[r7,#4]
 483 0014 FFF7FEFF 	 bl strlen
 484 0018 F860     	 str r0,[r7,#12]
  86:../Libraries/OEMLib/Base64/Base64.c **** 
  87:../Libraries/OEMLib/Base64/Base64.c **** 	ret = len / 4 * 3;
 485              	 .loc 1 87 0
 486 001a FB68     	 ldr r3,[r7,#12]
 487 001c 9A08     	 lsrs r2,r3,#2
 488 001e 1346     	 mov r3,r2
 489 0020 5B00     	 lsls r3,r3,#1
 490 0022 1344     	 add r3,r3,r2
 491 0024 7B61     	 str r3,[r7,#20]
  88:../Libraries/OEMLib/Base64/Base64.c **** 
  89:../Libraries/OEMLib/Base64/Base64.c **** 	for (i=len; i-->0; ) {
 492              	 .loc 1 89 0
 493 0026 FB68     	 ldr r3,[r7,#12]
 494 0028 3B61     	 str r3,[r7,#16]
 495 002a 0AE0     	 b .L13
 496              	.L16:
  90:../Libraries/OEMLib/Base64/Base64.c **** 		if (in[i] == '=') {
 497              	 .loc 1 90 0
 498 002c 7A68     	 ldr r2,[r7,#4]
 499 002e 3B69     	 ldr r3,[r7,#16]
 500 0030 1344     	 add r3,r3,r2
 501 0032 1B78     	 ldrb r3,[r3]
 502 0034 3D2B     	 cmp r3,#61
 503 0036 03D1     	 bne .L14
  91:../Libraries/OEMLib/Base64/Base64.c **** 			ret--;
 504              	 .loc 1 91 0
 505 0038 7B69     	 ldr r3,[r7,#20]
 506 003a 013B     	 subs r3,r3,#1
 507 003c 7B61     	 str r3,[r7,#20]
 508 003e 00E0     	 b .L13
 509              	.L14:
  92:../Libraries/OEMLib/Base64/Base64.c **** 		} else {
  93:../Libraries/OEMLib/Base64/Base64.c **** 			break;
 510              	 .loc 1 93 0
 511 0040 04E0     	 b .L15
 512              	.L13:
  89:../Libraries/OEMLib/Base64/Base64.c **** 		if (in[i] == '=') {
 513              	 .loc 1 89 0 discriminator 1
 514 0042 3B69     	 ldr r3,[r7,#16]
 515 0044 5A1E     	 subs r2,r3,#1
 516 0046 3A61     	 str r2,[r7,#16]
 517 0048 002B     	 cmp r3,#0
 518 004a EFD1     	 bne .L16
 519              	.L15:
  94:../Libraries/OEMLib/Base64/Base64.c **** 		}
  95:../Libraries/OEMLib/Base64/Base64.c **** 	}
  96:../Libraries/OEMLib/Base64/Base64.c **** 
  97:../Libraries/OEMLib/Base64/Base64.c **** 	return ret;
 520              	 .loc 1 97 0
 521 004c 7B69     	 ldr r3,[r7,#20]
 522              	.L12:
  98:../Libraries/OEMLib/Base64/Base64.c **** }
 523              	 .loc 1 98 0
 524 004e 1846     	 mov r0,r3
 525 0050 1837     	 adds r7,r7,#24
 526              	.LCFI8:
 527              	 .cfi_def_cfa_offset 8
 528 0052 BD46     	 mov sp,r7
 529              	.LCFI9:
 530              	 .cfi_def_cfa_register 13
 531              	 
 532 0054 80BD     	 pop {r7,pc}
 533              	 .cfi_endproc
 534              	.LFE350:
 536 0056 00BF     	 .section .text.b64_generate_decode_table,"ax",%progbits
 537              	 .align 2
 538              	 .global b64_generate_decode_table
 539              	 .thumb
 540              	 .thumb_func
 542              	b64_generate_decode_table:
 543              	.LFB351:
  99:../Libraries/OEMLib/Base64/Base64.c **** 
 100:../Libraries/OEMLib/Base64/Base64.c **** //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 101:../Libraries/OEMLib/Base64/Base64.c **** // Generate decode table
 102:../Libraries/OEMLib/Base64/Base64.c **** void b64_generate_decode_table()
 103:../Libraries/OEMLib/Base64/Base64.c **** {
 544              	 .loc 1 103 0
 545              	 .cfi_startproc
 546              	 
 547              	 
 548 0000 80B5     	 push {r7,lr}
 549              	.LCFI10:
 550              	 .cfi_def_cfa_offset 8
 551              	 .cfi_offset 7,-8
 552              	 .cfi_offset 14,-4
 553 0002 D2B0     	 sub sp,sp,#328
 554              	.LCFI11:
 555              	 .cfi_def_cfa_offset 336
 556 0004 00AF     	 add r7,sp,#0
 557              	.LCFI12:
 558              	 .cfi_def_cfa_register 7
 104:../Libraries/OEMLib/Base64/Base64.c **** 	int    inv[80];
 105:../Libraries/OEMLib/Base64/Base64.c **** 	size_t i;
 106:../Libraries/OEMLib/Base64/Base64.c **** 
 107:../Libraries/OEMLib/Base64/Base64.c **** 	memset(inv, -1, sizeof(inv));
 559              	 .loc 1 107 0
 560 0006 3B1D     	 adds r3,r7,#4
 561 0008 1846     	 mov r0,r3
 562 000a 4FF0FF31 	 mov r1,#-1
 563 000e 4FF4A072 	 mov r2,#320
 564 0012 FFF7FEFF 	 bl memset
 108:../Libraries/OEMLib/Base64/Base64.c **** 	for (i=0; i<sizeof(b64)-1; i++) {
 565              	 .loc 1 108 0
 566 0016 0023     	 movs r3,#0
 567 0018 C7F84431 	 str r3,[r7,#324]
 568 001c 10E0     	 b .L18
 569              	.L19:
 109:../Libraries/OEMLib/Base64/Base64.c **** 		inv[b64[i]-43] = i;
 570              	 .loc 1 109 0 discriminator 3
 571 001e 0C4A     	 ldr r2,.L20
 572 0020 D7F84431 	 ldr r3,[r7,#324]
 573 0024 1344     	 add r3,r3,r2
 574 0026 1B78     	 ldrb r3,[r3]
 575 0028 A3F12B02 	 sub r2,r3,#43
 576 002c D7F84411 	 ldr r1,[r7,#324]
 577 0030 3B1D     	 adds r3,r7,#4
 578 0032 43F82210 	 str r1,[r3,r2,lsl#2]
 108:../Libraries/OEMLib/Base64/Base64.c **** 	for (i=0; i<sizeof(b64)-1; i++) {
 579              	 .loc 1 108 0 discriminator 3
 580 0036 D7F84431 	 ldr r3,[r7,#324]
 581 003a 0133     	 adds r3,r3,#1
 582 003c C7F84431 	 str r3,[r7,#324]
 583              	.L18:
 108:../Libraries/OEMLib/Base64/Base64.c **** 	for (i=0; i<sizeof(b64)-1; i++) {
 584              	 .loc 1 108 0 is_stmt 0 discriminator 1
 585 0040 D7F84431 	 ldr r3,[r7,#324]
 586 0044 3F2B     	 cmp r3,#63
 587 0046 EAD9     	 bls .L19
 110:../Libraries/OEMLib/Base64/Base64.c **** 	}
 111:../Libraries/OEMLib/Base64/Base64.c **** }
 588              	 .loc 1 111 0 is_stmt 1
 589 0048 07F5A477 	 add r7,r7,#328
 590              	.LCFI13:
 591              	 .cfi_def_cfa_offset 8
 592 004c BD46     	 mov sp,r7
 593              	.LCFI14:
 594              	 .cfi_def_cfa_register 13
 595              	 
 596 004e 80BD     	 pop {r7,pc}
 597              	.L21:
 598              	 .align 2
 599              	.L20:
 600 0050 00000000 	 .word b64
 601              	 .cfi_endproc
 602              	.LFE351:
 604              	 .section .text.b64_is_valid_char,"ax",%progbits
 605              	 .align 2
 606              	 .global b64_is_valid_char
 607              	 .thumb
 608              	 .thumb_func
 610              	b64_is_valid_char:
 611              	.LFB352:
 112:../Libraries/OEMLib/Base64/Base64.c **** 
 113:../Libraries/OEMLib/Base64/Base64.c **** //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 114:../Libraries/OEMLib/Base64/Base64.c **** // check if char is valid
 115:../Libraries/OEMLib/Base64/Base64.c **** int b64_is_valid_char(char c)
 116:../Libraries/OEMLib/Base64/Base64.c **** {
 612              	 .loc 1 116 0
 613              	 .cfi_startproc
 614              	 
 615              	 
 616              	 
 617 0000 80B4     	 push {r7}
 618              	.LCFI15:
 619              	 .cfi_def_cfa_offset 4
 620              	 .cfi_offset 7,-4
 621 0002 83B0     	 sub sp,sp,#12
 622              	.LCFI16:
 623              	 .cfi_def_cfa_offset 16
 624 0004 00AF     	 add r7,sp,#0
 625              	.LCFI17:
 626              	 .cfi_def_cfa_register 7
 627 0006 0346     	 mov r3,r0
 628 0008 FB71     	 strb r3,[r7,#7]
 117:../Libraries/OEMLib/Base64/Base64.c **** 	if (c >= '0' && c <= '9')
 629              	 .loc 1 117 0
 630 000a FB79     	 ldrb r3,[r7,#7]
 631 000c 2F2B     	 cmp r3,#47
 632 000e 04D9     	 bls .L23
 633              	 .loc 1 117 0 is_stmt 0 discriminator 1
 634 0010 FB79     	 ldrb r3,[r7,#7]
 635 0012 392B     	 cmp r3,#57
 636 0014 01D8     	 bhi .L23
 118:../Libraries/OEMLib/Base64/Base64.c **** 		return 1;
 637              	 .loc 1 118 0 is_stmt 1
 638 0016 0123     	 movs r3,#1
 639 0018 1BE0     	 b .L24
 640              	.L23:
 119:../Libraries/OEMLib/Base64/Base64.c **** 	if (c >= 'A' && c <= 'Z')
 641              	 .loc 1 119 0
 642 001a FB79     	 ldrb r3,[r7,#7]
 643 001c 402B     	 cmp r3,#64
 644 001e 04D9     	 bls .L25
 645              	 .loc 1 119 0 is_stmt 0 discriminator 1
 646 0020 FB79     	 ldrb r3,[r7,#7]
 647 0022 5A2B     	 cmp r3,#90
 648 0024 01D8     	 bhi .L25
 120:../Libraries/OEMLib/Base64/Base64.c **** 		return 1;
 649              	 .loc 1 120 0 is_stmt 1
 650 0026 0123     	 movs r3,#1
 651 0028 13E0     	 b .L24
 652              	.L25:
 121:../Libraries/OEMLib/Base64/Base64.c **** 	if (c >= 'a' && c <= 'z')
 653              	 .loc 1 121 0
 654 002a FB79     	 ldrb r3,[r7,#7]
 655 002c 602B     	 cmp r3,#96
 656 002e 04D9     	 bls .L26
 657              	 .loc 1 121 0 is_stmt 0 discriminator 1
 658 0030 FB79     	 ldrb r3,[r7,#7]
 659 0032 7A2B     	 cmp r3,#122
 660 0034 01D8     	 bhi .L26
 122:../Libraries/OEMLib/Base64/Base64.c **** 		return 1;
 661              	 .loc 1 122 0 is_stmt 1
 662 0036 0123     	 movs r3,#1
 663 0038 0BE0     	 b .L24
 664              	.L26:
 123:../Libraries/OEMLib/Base64/Base64.c **** 	if (c == '+' || c == '/' || c == '=')
 665              	 .loc 1 123 0
 666 003a FB79     	 ldrb r3,[r7,#7]
 667 003c 2B2B     	 cmp r3,#43
 668 003e 05D0     	 beq .L27
 669              	 .loc 1 123 0 is_stmt 0 discriminator 1
 670 0040 FB79     	 ldrb r3,[r7,#7]
 671 0042 2F2B     	 cmp r3,#47
 672 0044 02D0     	 beq .L27
 673              	 .loc 1 123 0 discriminator 2
 674 0046 FB79     	 ldrb r3,[r7,#7]
 675 0048 3D2B     	 cmp r3,#61
 676 004a 01D1     	 bne .L28
 677              	.L27:
 124:../Libraries/OEMLib/Base64/Base64.c **** 		return 1;
 678              	 .loc 1 124 0 is_stmt 1
 679 004c 0123     	 movs r3,#1
 680 004e 00E0     	 b .L24
 681              	.L28:
 125:../Libraries/OEMLib/Base64/Base64.c **** 	return 0;
 682              	 .loc 1 125 0
 683 0050 0023     	 movs r3,#0
 684              	.L24:
 126:../Libraries/OEMLib/Base64/Base64.c **** }
 685              	 .loc 1 126 0
 686 0052 1846     	 mov r0,r3
 687 0054 0C37     	 adds r7,r7,#12
 688              	.LCFI18:
 689              	 .cfi_def_cfa_offset 4
 690 0056 BD46     	 mov sp,r7
 691              	.LCFI19:
 692              	 .cfi_def_cfa_register 13
 693              	 
 694 0058 5DF8047B 	 ldr r7,[sp],#4
 695              	.LCFI20:
 696              	 .cfi_restore 7
 697              	 .cfi_def_cfa_offset 0
 698 005c 7047     	 bx lr
 699              	 .cfi_endproc
 700              	.LFE352:
 702 005e 00BF     	 .section .text.b64_decode,"ax",%progbits
 703              	 .align 2
 704              	 .global b64_decode
 705              	 .thumb
 706              	 .thumb_func
 708              	b64_decode:
 709              	.LFB353:
 127:../Libraries/OEMLib/Base64/Base64.c **** 
 128:../Libraries/OEMLib/Base64/Base64.c **** //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 129:../Libraries/OEMLib/Base64/Base64.c **** // Decode
 130:../Libraries/OEMLib/Base64/Base64.c **** int b64_decode(const char *in, unsigned char *out, size_t outlen)
 131:../Libraries/OEMLib/Base64/Base64.c **** {
 710              	 .loc 1 131 0
 711              	 .cfi_startproc
 712              	 
 713              	 
 714 0000 80B5     	 push {r7,lr}
 715              	.LCFI21:
 716              	 .cfi_def_cfa_offset 8
 717              	 .cfi_offset 7,-8
 718              	 .cfi_offset 14,-4
 719 0002 88B0     	 sub sp,sp,#32
 720              	.LCFI22:
 721              	 .cfi_def_cfa_offset 40
 722 0004 00AF     	 add r7,sp,#0
 723              	.LCFI23:
 724              	 .cfi_def_cfa_register 7
 725 0006 F860     	 str r0,[r7,#12]
 726 0008 B960     	 str r1,[r7,#8]
 727 000a 7A60     	 str r2,[r7,#4]
 132:../Libraries/OEMLib/Base64/Base64.c **** 	size_t len;
 133:../Libraries/OEMLib/Base64/Base64.c **** 	size_t i;
 134:../Libraries/OEMLib/Base64/Base64.c **** 	size_t j;
 135:../Libraries/OEMLib/Base64/Base64.c **** 	int    v;
 136:../Libraries/OEMLib/Base64/Base64.c **** 
 137:../Libraries/OEMLib/Base64/Base64.c **** 	if (in == NULL || out == NULL)
 728              	 .loc 1 137 0
 729 000c FB68     	 ldr r3,[r7,#12]
 730 000e 002B     	 cmp r3,#0
 731 0010 02D0     	 beq .L30
 732              	 .loc 1 137 0 is_stmt 0 discriminator 1
 733 0012 BB68     	 ldr r3,[r7,#8]
 734 0014 002B     	 cmp r3,#0
 735 0016 01D1     	 bne .L31
 736              	.L30:
 138:../Libraries/OEMLib/Base64/Base64.c **** 		return 0;
 737              	 .loc 1 138 0 is_stmt 1
 738 0018 0023     	 movs r3,#0
 739 001a 9FE0     	 b .L32
 740              	.L31:
 139:../Libraries/OEMLib/Base64/Base64.c **** 
 140:../Libraries/OEMLib/Base64/Base64.c **** 	len = strlen(in);
 741              	 .loc 1 140 0
 742 001c F868     	 ldr r0,[r7,#12]
 743 001e FFF7FEFF 	 bl strlen
 744 0022 7861     	 str r0,[r7,#20]
 141:../Libraries/OEMLib/Base64/Base64.c **** 	if (outlen < b64_decoded_size(in) || len % 4 != 0)
 745              	 .loc 1 141 0
 746 0024 F868     	 ldr r0,[r7,#12]
 747 0026 FFF7FEFF 	 bl b64_decoded_size
 748 002a 0246     	 mov r2,r0
 749 002c 7B68     	 ldr r3,[r7,#4]
 750 002e 9A42     	 cmp r2,r3
 751 0030 04D8     	 bhi .L33
 752              	 .loc 1 141 0 is_stmt 0 discriminator 1
 753 0032 7B69     	 ldr r3,[r7,#20]
 754 0034 03F00303 	 and r3,r3,#3
 755 0038 002B     	 cmp r3,#0
 756 003a 01D0     	 beq .L34
 757              	.L33:
 142:../Libraries/OEMLib/Base64/Base64.c **** 		return 0;
 758              	 .loc 1 142 0 is_stmt 1
 759 003c 0023     	 movs r3,#0
 760 003e 8DE0     	 b .L32
 761              	.L34:
 143:../Libraries/OEMLib/Base64/Base64.c **** 
 144:../Libraries/OEMLib/Base64/Base64.c **** 	for (i=0; i<len; i++) {
 762              	 .loc 1 144 0
 763 0040 0023     	 movs r3,#0
 764 0042 FB61     	 str r3,[r7,#28]
 765 0044 0EE0     	 b .L35
 766              	.L37:
 145:../Libraries/OEMLib/Base64/Base64.c **** 		if (!b64_is_valid_char(in[i])) {
 767              	 .loc 1 145 0
 768 0046 FA68     	 ldr r2,[r7,#12]
 769 0048 FB69     	 ldr r3,[r7,#28]
 770 004a 1344     	 add r3,r3,r2
 771 004c 1B78     	 ldrb r3,[r3]
 772 004e 1846     	 mov r0,r3
 773 0050 FFF7FEFF 	 bl b64_is_valid_char
 774 0054 0346     	 mov r3,r0
 775 0056 002B     	 cmp r3,#0
 776 0058 01D1     	 bne .L36
 146:../Libraries/OEMLib/Base64/Base64.c **** 			return 0;
 777              	 .loc 1 146 0
 778 005a 0023     	 movs r3,#0
 779 005c 7EE0     	 b .L32
 780              	.L36:
 144:../Libraries/OEMLib/Base64/Base64.c **** 		if (!b64_is_valid_char(in[i])) {
 781              	 .loc 1 144 0 discriminator 2
 782 005e FB69     	 ldr r3,[r7,#28]
 783 0060 0133     	 adds r3,r3,#1
 784 0062 FB61     	 str r3,[r7,#28]
 785              	.L35:
 144:../Libraries/OEMLib/Base64/Base64.c **** 		if (!b64_is_valid_char(in[i])) {
 786              	 .loc 1 144 0 is_stmt 0 discriminator 1
 787 0064 FA69     	 ldr r2,[r7,#28]
 788 0066 7B69     	 ldr r3,[r7,#20]
 789 0068 9A42     	 cmp r2,r3
 790 006a ECD3     	 bcc .L37
 147:../Libraries/OEMLib/Base64/Base64.c **** 		}
 148:../Libraries/OEMLib/Base64/Base64.c **** 	}
 149:../Libraries/OEMLib/Base64/Base64.c **** 
 150:../Libraries/OEMLib/Base64/Base64.c **** 	for (i=0, j=0; i<len; i+=4, j+=3) {
 791              	 .loc 1 150 0 is_stmt 1
 792 006c 0023     	 movs r3,#0
 793 006e FB61     	 str r3,[r7,#28]
 794 0070 0023     	 movs r3,#0
 795 0072 BB61     	 str r3,[r7,#24]
 796 0074 6DE0     	 b .L38
 797              	.L45:
 151:../Libraries/OEMLib/Base64/Base64.c **** 		v = b64invs[in[i]-43];
 798              	 .loc 1 151 0
 799 0076 FA68     	 ldr r2,[r7,#12]
 800 0078 FB69     	 ldr r3,[r7,#28]
 801 007a 1344     	 add r3,r3,r2
 802 007c 1B78     	 ldrb r3,[r3]
 803 007e 2B3B     	 subs r3,r3,#43
 804 0080 384A     	 ldr r2,.L46
 805 0082 52F82330 	 ldr r3,[r2,r3,lsl#2]
 806 0086 3B61     	 str r3,[r7,#16]
 152:../Libraries/OEMLib/Base64/Base64.c **** 		v = (v << 6) | b64invs[in[i+1]-43];
 807              	 .loc 1 152 0
 808 0088 3B69     	 ldr r3,[r7,#16]
 809 008a 9A01     	 lsls r2,r3,#6
 810 008c FB69     	 ldr r3,[r7,#28]
 811 008e 0133     	 adds r3,r3,#1
 812 0090 F968     	 ldr r1,[r7,#12]
 813 0092 0B44     	 add r3,r3,r1
 814 0094 1B78     	 ldrb r3,[r3]
 815 0096 2B3B     	 subs r3,r3,#43
 816 0098 3249     	 ldr r1,.L46
 817 009a 51F82330 	 ldr r3,[r1,r3,lsl#2]
 818 009e 1343     	 orrs r3,r3,r2
 819 00a0 3B61     	 str r3,[r7,#16]
 153:../Libraries/OEMLib/Base64/Base64.c **** 		v = in[i+2]=='=' ? v << 6 : (v << 6) | b64invs[in[i+2]-43];
 820              	 .loc 1 153 0
 821 00a2 FB69     	 ldr r3,[r7,#28]
 822 00a4 0233     	 adds r3,r3,#2
 823 00a6 FA68     	 ldr r2,[r7,#12]
 824 00a8 1344     	 add r3,r3,r2
 825 00aa 1B78     	 ldrb r3,[r3]
 826 00ac 3D2B     	 cmp r3,#61
 827 00ae 02D1     	 bne .L39
 828              	 .loc 1 153 0 is_stmt 0 discriminator 1
 829 00b0 3B69     	 ldr r3,[r7,#16]
 830 00b2 9B01     	 lsls r3,r3,#6
 831 00b4 0BE0     	 b .L40
 832              	.L39:
 833              	 .loc 1 153 0 discriminator 2
 834 00b6 3B69     	 ldr r3,[r7,#16]
 835 00b8 9A01     	 lsls r2,r3,#6
 836 00ba FB69     	 ldr r3,[r7,#28]
 837 00bc 0233     	 adds r3,r3,#2
 838 00be F968     	 ldr r1,[r7,#12]
 839 00c0 0B44     	 add r3,r3,r1
 840 00c2 1B78     	 ldrb r3,[r3]
 841 00c4 2B3B     	 subs r3,r3,#43
 842 00c6 2749     	 ldr r1,.L46
 843 00c8 51F82330 	 ldr r3,[r1,r3,lsl#2]
 844 00cc 1343     	 orrs r3,r3,r2
 845              	.L40:
 846              	 .loc 1 153 0 discriminator 4
 847 00ce 3B61     	 str r3,[r7,#16]
 154:../Libraries/OEMLib/Base64/Base64.c **** 		v = in[i+3]=='=' ? v << 6 : (v << 6) | b64invs[in[i+3]-43];
 848              	 .loc 1 154 0 is_stmt 1 discriminator 4
 849 00d0 FB69     	 ldr r3,[r7,#28]
 850 00d2 0333     	 adds r3,r3,#3
 851 00d4 FA68     	 ldr r2,[r7,#12]
 852 00d6 1344     	 add r3,r3,r2
 853 00d8 1B78     	 ldrb r3,[r3]
 854 00da 3D2B     	 cmp r3,#61
 855 00dc 02D1     	 bne .L41
 856              	 .loc 1 154 0 is_stmt 0 discriminator 1
 857 00de 3B69     	 ldr r3,[r7,#16]
 858 00e0 9B01     	 lsls r3,r3,#6
 859 00e2 0BE0     	 b .L42
 860              	.L41:
 861              	 .loc 1 154 0 discriminator 2
 862 00e4 3B69     	 ldr r3,[r7,#16]
 863 00e6 9A01     	 lsls r2,r3,#6
 864 00e8 FB69     	 ldr r3,[r7,#28]
 865 00ea 0333     	 adds r3,r3,#3
 866 00ec F968     	 ldr r1,[r7,#12]
 867 00ee 0B44     	 add r3,r3,r1
 868 00f0 1B78     	 ldrb r3,[r3]
 869 00f2 2B3B     	 subs r3,r3,#43
 870 00f4 1B49     	 ldr r1,.L46
 871 00f6 51F82330 	 ldr r3,[r1,r3,lsl#2]
 872 00fa 1343     	 orrs r3,r3,r2
 873              	.L42:
 874              	 .loc 1 154 0 discriminator 4
 875 00fc 3B61     	 str r3,[r7,#16]
 155:../Libraries/OEMLib/Base64/Base64.c **** 
 156:../Libraries/OEMLib/Base64/Base64.c **** 		out[j] = (v >> 16) & 0xFF;
 876              	 .loc 1 156 0 is_stmt 1 discriminator 4
 877 00fe BA68     	 ldr r2,[r7,#8]
 878 0100 BB69     	 ldr r3,[r7,#24]
 879 0102 1344     	 add r3,r3,r2
 880 0104 3A69     	 ldr r2,[r7,#16]
 881 0106 1214     	 asrs r2,r2,#16
 882 0108 D2B2     	 uxtb r2,r2
 883 010a 1A70     	 strb r2,[r3]
 157:../Libraries/OEMLib/Base64/Base64.c **** 		if (in[i+2] != '=')
 884              	 .loc 1 157 0 discriminator 4
 885 010c FB69     	 ldr r3,[r7,#28]
 886 010e 0233     	 adds r3,r3,#2
 887 0110 FA68     	 ldr r2,[r7,#12]
 888 0112 1344     	 add r3,r3,r2
 889 0114 1B78     	 ldrb r3,[r3]
 890 0116 3D2B     	 cmp r3,#61
 891 0118 07D0     	 beq .L43
 158:../Libraries/OEMLib/Base64/Base64.c **** 			out[j+1] = (v >> 8) & 0xFF;
 892              	 .loc 1 158 0
 893 011a BB69     	 ldr r3,[r7,#24]
 894 011c 0133     	 adds r3,r3,#1
 895 011e BA68     	 ldr r2,[r7,#8]
 896 0120 1344     	 add r3,r3,r2
 897 0122 3A69     	 ldr r2,[r7,#16]
 898 0124 1212     	 asrs r2,r2,#8
 899 0126 D2B2     	 uxtb r2,r2
 900 0128 1A70     	 strb r2,[r3]
 901              	.L43:
 159:../Libraries/OEMLib/Base64/Base64.c **** 		if (in[i+3] != '=')
 902              	 .loc 1 159 0
 903 012a FB69     	 ldr r3,[r7,#28]
 904 012c 0333     	 adds r3,r3,#3
 905 012e FA68     	 ldr r2,[r7,#12]
 906 0130 1344     	 add r3,r3,r2
 907 0132 1B78     	 ldrb r3,[r3]
 908 0134 3D2B     	 cmp r3,#61
 909 0136 06D0     	 beq .L44
 160:../Libraries/OEMLib/Base64/Base64.c **** 			out[j+2] = v & 0xFF;
 910              	 .loc 1 160 0
 911 0138 BB69     	 ldr r3,[r7,#24]
 912 013a 0233     	 adds r3,r3,#2
 913 013c BA68     	 ldr r2,[r7,#8]
 914 013e 1344     	 add r3,r3,r2
 915 0140 3A69     	 ldr r2,[r7,#16]
 916 0142 D2B2     	 uxtb r2,r2
 917 0144 1A70     	 strb r2,[r3]
 918              	.L44:
 150:../Libraries/OEMLib/Base64/Base64.c **** 		v = b64invs[in[i]-43];
 919              	 .loc 1 150 0 discriminator 2
 920 0146 FB69     	 ldr r3,[r7,#28]
 921 0148 0433     	 adds r3,r3,#4
 922 014a FB61     	 str r3,[r7,#28]
 923 014c BB69     	 ldr r3,[r7,#24]
 924 014e 0333     	 adds r3,r3,#3
 925 0150 BB61     	 str r3,[r7,#24]
 926              	.L38:
 150:../Libraries/OEMLib/Base64/Base64.c **** 		v = b64invs[in[i]-43];
 927              	 .loc 1 150 0 is_stmt 0 discriminator 1
 928 0152 FA69     	 ldr r2,[r7,#28]
 929 0154 7B69     	 ldr r3,[r7,#20]
 930 0156 9A42     	 cmp r2,r3
 931 0158 8DD3     	 bcc .L45
 161:../Libraries/OEMLib/Base64/Base64.c **** 	}
 162:../Libraries/OEMLib/Base64/Base64.c **** 
 163:../Libraries/OEMLib/Base64/Base64.c **** 	return 1;
 932              	 .loc 1 163 0 is_stmt 1
 933 015a 0123     	 movs r3,#1
 934              	.L32:
 164:../Libraries/OEMLib/Base64/Base64.c **** }
 935              	 .loc 1 164 0
 936 015c 1846     	 mov r0,r3
 937 015e 2037     	 adds r7,r7,#32
 938              	.LCFI24:
 939              	 .cfi_def_cfa_offset 8
 940 0160 BD46     	 mov sp,r7
 941              	.LCFI25:
 942              	 .cfi_def_cfa_register 13
 943              	 
 944 0162 80BD     	 pop {r7,pc}
 945              	.L47:
 946              	 .align 2
 947              	.L46:
 948 0164 00000000 	 .word b64invs
 949              	 .cfi_endproc
 950              	.LFE353:
 952              	 .text
 953              	.Letext0:
 954              	 .file 2 "c:\\program files\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 955              	 .file 3 "c:\\program files\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 956              	 .file 4 "c:\\program files\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 957              	 .file 5 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 958              	 .file 6 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc/xmc_usic.h"
 959              	 .file 7 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc/xmc_usbd_regs.h"
 960              	 .file 8 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc/xmc_usbd.h"
 961              	 .file 9 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Dave/Generated/USBD/usbd.h"
 962              	 .file 10 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/CMSIS/Include/cmsis_gcc.h"
 963              	 .file 11 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/CMSIS/Include/core_cm4.h"
 964              	 .file 12 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
 965              	 .file 13 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Dave/Generated/USBD/usbd_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Base64.c
    {standard input}:20     .rodata.b64:00000000 $d
    {standard input}:23     .rodata.b64:00000000 b64
    {standard input}:27     .rodata.b64invs:00000000 $d
    {standard input}:30     .rodata.b64invs:00000000 b64invs
    {standard input}:112    .text.base64_encode:00000000 $t
    {standard input}:117    .text.base64_encode:00000000 base64_encode
    {standard input}:443    .text.base64_encode:00000228 $d
    {standard input}:450    .text.b64_decoded_size:00000000 $t
    {standard input}:455    .text.b64_decoded_size:00000000 b64_decoded_size
    {standard input}:537    .text.b64_generate_decode_table:00000000 $t
    {standard input}:542    .text.b64_generate_decode_table:00000000 b64_generate_decode_table
    {standard input}:600    .text.b64_generate_decode_table:00000050 $d
    {standard input}:605    .text.b64_is_valid_char:00000000 $t
    {standard input}:610    .text.b64_is_valid_char:00000000 b64_is_valid_char
    {standard input}:703    .text.b64_decode:00000000 $t
    {standard input}:708    .text.b64_decode:00000000 b64_decode
    {standard input}:948    .text.b64_decode:00000164 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
calloc
strlen
memset
