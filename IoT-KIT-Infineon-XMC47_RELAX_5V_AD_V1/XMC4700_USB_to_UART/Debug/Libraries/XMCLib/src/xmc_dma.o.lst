   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_dma.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_DMA_GetEventStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_DMA_GetEventStatus:
  25              	.LFB133:
  26              	 .file 1 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc/xmc_dma.h"
   1:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
   2:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @file xmc_dma.h
   3:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @date 2018-09-18
   4:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
   5:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @cond
   6:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *****************************************************************************
   7:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
   9:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * All rights reserved.
  11:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  12:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  14:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * do so, all subject to the following:
  20:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  21:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * a source language processor.
  27:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  28:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  36:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * at XMCSupport@infineon.com.
  39:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *****************************************************************************
  40:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  41:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Change History
  42:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * --------------
  43:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  44:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-02-20:
  45:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Initial <br>
  46:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  47:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-06-20:
  48:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  49:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  50:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  51:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  52:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Documentation updates <br>
  53:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  54:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  55:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * 2016-10-28:
  56:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Fix documentation on maximum block size
  57:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  58:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * 2017-09-28:
  59:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Improved documentation and added XMC_DMA_CH_EnableFifo() and XMC_DMA_CH_DisableFifo()
  60:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  61:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * 2018-09-18:
  62:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Added XMC_DMA_CH_GetTransferredData()
  63:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  64:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @endcond
  65:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
  66:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
  67:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #ifndef XMC_DMA_H
  68:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA_H
  69:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
  70:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  71:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * HEADER FILES
  72:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  73:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
  74:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_common.h"
  75:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
  76:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  77:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
  78:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_dma_map.h"
  79:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
  80:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
  81:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  82:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  83:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
  84:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
  85:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
  86:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup DMA
  87:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  88:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  89:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  90:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  91:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  92:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  93:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  94:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  95:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  96:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
  97:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  98:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * hardware peripheral.
  99:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
 100:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 101:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 102:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 103:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * MACROS
 104:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 105:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 106:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
 107:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
 108:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
 109:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 110:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 111:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA1)
 112:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 113:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 114:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 115:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 116:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 117:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * ENUMS
 118:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 119:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 120:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 121:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer types
 122:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 123:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 124:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 125:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 126:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 127:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 128:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 129:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 130:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 131:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 132:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 133:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 134:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 135:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 136:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 137:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer flow modes
 138:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 139:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 140:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 141:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 142:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 143:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 144:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 145:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 146:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 147:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 148:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 149:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 150:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 151:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 152:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid burst length values
 153:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 154:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 155:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 156:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 157:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 158:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 159:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 160:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 161:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 162:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid transfer width values
 163:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 164:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 165:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 166:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 167:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 168:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 169:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 170:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 171:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 172:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA address count mode
 173:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 174:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 175:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 176:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 177:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 178:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 179:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 180:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 181:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 182:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel priorities
 183:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 184:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 185:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 186:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 187:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 188:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 189:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 190:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 191:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 192:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 193:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 194:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 195:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 196:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 197:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Source handshake interface
 198:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 199:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 200:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 201:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 202:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 203:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 204:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 205:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 206:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination handshake interface
 207:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 208:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 209:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 210:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 211:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 212:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 213:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 214:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 215:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA hardware handshaking interface
 216:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 217:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 218:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 219:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 220:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 221:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 222:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 223:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 224:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 225:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 226:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 227:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 228:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 229:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 230:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 231:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA events
 232:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 233:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 234:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 235:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 236:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 237:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 238:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 239:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 240:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 241:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 242:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 243:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Transaction types
 244:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 245:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 246:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 247:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 248:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 249:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 250:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 251:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 252:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel status values
 253:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 254:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 255:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 256:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 257:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 258:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 259:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 260:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 261:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 262:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DATA STRUCTURES
 263:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 264:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 265:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 266:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 267:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 268:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 269:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 270:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 271:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 272:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * modes and the like.
 273:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 274:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 275:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct GPDMA_CH
 276:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 277:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SAR;
 278:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 279:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DAR;
 280:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 281:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LLP;
 282:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 283:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 284:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 285:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 286:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 287:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 288:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 289:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 290:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 291:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 292:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 293:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 294:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 295:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGR;
 296:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 297:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSR;
 298:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 299:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } GPDMA_CH_t;
 300:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 301:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 302:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA device structure <br>
 303:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 304:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 305:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 306:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 307:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 308:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA
 309:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 310:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 311:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 312:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 313:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 314:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 315:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 316:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 317:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 318:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 319:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 320:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 321:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 322:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 323:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 324:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 325:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 326:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 327:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 328:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 329:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 330:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 331:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 332:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 333:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 334:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  ID;
 335:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 336:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 337:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 338:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_t;
 339:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 340:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 341:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 342:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #pragma push
 343:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #pragma anon_unions
 344:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 345:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #pragma warning 586
 346:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 347:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 348:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 349:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel linked list item.
 350:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Note: Needs to be word aligned
 351:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 352:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 353:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 354:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 355:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 356:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 357:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   union
 358:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   {
 359:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 360:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     {
 361:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 362:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 363:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 364:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 365:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 366:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 367:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 368:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 369:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 370:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 371:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 372:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 373:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 374:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 375:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 376:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     };
 377:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 378:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   };
 379:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 380:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 381:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 382:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 383:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 384:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 385:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 386:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 387:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure
 388:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 389:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 390:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 391:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   union
 392:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   {
 393:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 394:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 395:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     {
 396:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 397:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 398:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 399:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 400:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 401:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 402:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 403:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 404:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 405:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;
 406:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 407:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 9;
 408:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     };
 409:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   };
 410:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 411:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 412:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 413:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 414:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 415:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   union
 416:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   {
 417:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t src_gather_control;
 418:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 419:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     {
 420:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 421:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 422:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     };
 423:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   };
 424:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 425:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   union
 426:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   {
 427:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 428:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 429:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     {
 430:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 431:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 432:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****     };
 433:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   };
 434:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 435:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [max. 
 436:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type (:: XMC_DMA_CH_TRANSFER_TYPE
 437:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority (::XMC_DMA_CH_PRIORITY_t)
 438:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface (:: XMC_DMA_C
 439:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request. See xmc_dma_map.h *
 440:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface (:: XMC_
 441:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request. See xmc_dma_ma
 442:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 443:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 444:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 445:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 446:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #pragma pop
 447:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 448:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #pragma warning restore
 449:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 450:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 451:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 452:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel event handler
 453:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 454:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 455:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 456:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 457:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * API PROTOTYPES
 458:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 459:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 460:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #ifdef __cplusplus
 461:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** extern "C" {
 462:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 463:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 464:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 465:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 466:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 467:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 468:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 469:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 470:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 471:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 472:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 473:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral.
 474:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 475:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 476:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 477:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 478:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 479:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 480:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 481:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 482:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 483:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 484:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 485:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 486:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 487:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 488:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 489:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 490:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 491:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 492:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 493:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 494:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 495:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 496:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 497:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 498:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 499:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 500:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 501:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 502:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 503:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 504:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 505:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 506:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 507:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @return bool
 508:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 509:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 510:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 511:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 512:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 513:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 514:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 515:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 516:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * is enabled.
 517:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 518:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 519:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 520:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 521:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 522:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 523:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 524:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 525:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA event status <br>
 526:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 527:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 528:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 529:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 530:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 531:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 532:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 533:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 534:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 535:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 536:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 537:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 538:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 539:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 540:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 541:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
  27              	 .loc 1 541 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 542:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSGLEV);
  43              	 .loc 1 542 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F86033 	 ldr r3,[r3,#864]
 543:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** }
  46              	 .loc 1 543 0
  47 000e 1846     	 mov r0,r3
  48 0010 0C37     	 adds r7,r7,#12
  49              	.LCFI3:
  50              	 .cfi_def_cfa_offset 4
  51 0012 BD46     	 mov sp,r7
  52              	.LCFI4:
  53              	 .cfi_def_cfa_register 13
  54              	 
  55 0014 5DF8047B 	 ldr r7,[sp],#4
  56              	.LCFI5:
  57              	 .cfi_restore 7
  58              	 .cfi_def_cfa_offset 0
  59 0018 7047     	 bx lr
  60              	 .cfi_endproc
  61              	.LFE133:
  63 001a 00BF     	 .section .text.XMC_DMA_GetChannelsTransferCompleteStatus,"ax",%progbits
  64              	 .align 2
  65              	 .thumb
  66              	 .thumb_func
  68              	XMC_DMA_GetChannelsTransferCompleteStatus:
  69              	.LFB134:
 544:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 545:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 546:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 547:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 548:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 549:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 550:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Get transfer complete status <br>
 551:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 552:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 553:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 554:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 555:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 556:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
  70              	 .loc 1 556 0
  71              	 .cfi_startproc
  72              	 
  73              	 
  74              	 
  75 0000 80B4     	 push {r7}
  76              	.LCFI6:
  77              	 .cfi_def_cfa_offset 4
  78              	 .cfi_offset 7,-4
  79 0002 83B0     	 sub sp,sp,#12
  80              	.LCFI7:
  81              	 .cfi_def_cfa_offset 16
  82 0004 00AF     	 add r7,sp,#0
  83              	.LCFI8:
  84              	 .cfi_def_cfa_register 7
  85 0006 7860     	 str r0,[r7,#4]
 557:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
  86              	 .loc 1 557 0
  87 0008 7B68     	 ldr r3,[r7,#4]
  88 000a D3F8E832 	 ldr r3,[r3,#744]
 558:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** }
  89              	 .loc 1 558 0
  90 000e 1846     	 mov r0,r3
  91 0010 0C37     	 adds r7,r7,#12
  92              	.LCFI9:
  93              	 .cfi_def_cfa_offset 4
  94 0012 BD46     	 mov sp,r7
  95              	.LCFI10:
  96              	 .cfi_def_cfa_register 13
  97              	 
  98 0014 5DF8047B 	 ldr r7,[sp],#4
  99              	.LCFI11:
 100              	 .cfi_restore 7
 101              	 .cfi_def_cfa_offset 0
 102 0018 7047     	 bx lr
 103              	 .cfi_endproc
 104              	.LFE134:
 106 001a 00BF     	 .section .text.XMC_DMA_GetChannelsBlockCompleteStatus,"ax",%progbits
 107              	 .align 2
 108              	 .thumb
 109              	 .thumb_func
 111              	XMC_DMA_GetChannelsBlockCompleteStatus:
 112              	.LFB135:
 559:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 560:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 561:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 562:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 563:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 564:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 565:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Get block transfer complete status <br>
 566:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 567:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 568:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 569:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 570:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 571:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 113              	 .loc 1 571 0
 114              	 .cfi_startproc
 115              	 
 116              	 
 117              	 
 118 0000 80B4     	 push {r7}
 119              	.LCFI12:
 120              	 .cfi_def_cfa_offset 4
 121              	 .cfi_offset 7,-4
 122 0002 83B0     	 sub sp,sp,#12
 123              	.LCFI13:
 124              	 .cfi_def_cfa_offset 16
 125 0004 00AF     	 add r7,sp,#0
 126              	.LCFI14:
 127              	 .cfi_def_cfa_register 7
 128 0006 7860     	 str r0,[r7,#4]
 572:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 129              	 .loc 1 572 0
 130 0008 7B68     	 ldr r3,[r7,#4]
 131 000a D3F8F032 	 ldr r3,[r3,#752]
 573:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** }
 132              	 .loc 1 573 0
 133 000e 1846     	 mov r0,r3
 134 0010 0C37     	 adds r7,r7,#12
 135              	.LCFI15:
 136              	 .cfi_def_cfa_offset 4
 137 0012 BD46     	 mov sp,r7
 138              	.LCFI16:
 139              	 .cfi_def_cfa_register 13
 140              	 
 141 0014 5DF8047B 	 ldr r7,[sp],#4
 142              	.LCFI17:
 143              	 .cfi_restore 7
 144              	 .cfi_def_cfa_offset 0
 145 0018 7047     	 bx lr
 146              	 .cfi_endproc
 147              	.LFE135:
 149 001a 00BF     	 .section .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus,"ax",%progbits
 150              	 .align 2
 151              	 .thumb
 152              	 .thumb_func
 154              	XMC_DMA_GetChannelsSourceTransactionCompleteStatus:
 155              	.LFB136:
 574:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 575:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 576:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 577:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 578:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 579:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 580:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Get source transaction complete status <br>
 581:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 582:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 583:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 584:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 585:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 586:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 587:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * ignored.
 588:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 589:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 590:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 156              	 .loc 1 590 0
 157              	 .cfi_startproc
 158              	 
 159              	 
 160              	 
 161 0000 80B4     	 push {r7}
 162              	.LCFI18:
 163              	 .cfi_def_cfa_offset 4
 164              	 .cfi_offset 7,-4
 165 0002 83B0     	 sub sp,sp,#12
 166              	.LCFI19:
 167              	 .cfi_def_cfa_offset 16
 168 0004 00AF     	 add r7,sp,#0
 169              	.LCFI20:
 170              	 .cfi_def_cfa_register 7
 171 0006 7860     	 str r0,[r7,#4]
 591:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 172              	 .loc 1 591 0
 173 0008 7B68     	 ldr r3,[r7,#4]
 174 000a D3F8F832 	 ldr r3,[r3,#760]
 592:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** }
 175              	 .loc 1 592 0
 176 000e 1846     	 mov r0,r3
 177 0010 0C37     	 adds r7,r7,#12
 178              	.LCFI21:
 179              	 .cfi_def_cfa_offset 4
 180 0012 BD46     	 mov sp,r7
 181              	.LCFI22:
 182              	 .cfi_def_cfa_register 13
 183              	 
 184 0014 5DF8047B 	 ldr r7,[sp],#4
 185              	.LCFI23:
 186              	 .cfi_restore 7
 187              	 .cfi_def_cfa_offset 0
 188 0018 7047     	 bx lr
 189              	 .cfi_endproc
 190              	.LFE136:
 192 001a 00BF     	 .section .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus,"ax",%progbits
 193              	 .align 2
 194              	 .thumb
 195              	 .thumb_func
 197              	XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:
 198              	.LFB137:
 593:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 594:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 595:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 596:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 597:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 598:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 599:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 600:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 601:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 602:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 603:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 604:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 605:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 606:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * interrupt is ignored.
 607:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 608:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 609:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 199              	 .loc 1 609 0
 200              	 .cfi_startproc
 201              	 
 202              	 
 203              	 
 204 0000 80B4     	 push {r7}
 205              	.LCFI24:
 206              	 .cfi_def_cfa_offset 4
 207              	 .cfi_offset 7,-4
 208 0002 83B0     	 sub sp,sp,#12
 209              	.LCFI25:
 210              	 .cfi_def_cfa_offset 16
 211 0004 00AF     	 add r7,sp,#0
 212              	.LCFI26:
 213              	 .cfi_def_cfa_register 7
 214 0006 7860     	 str r0,[r7,#4]
 610:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 215              	 .loc 1 610 0
 216 0008 7B68     	 ldr r3,[r7,#4]
 217 000a D3F80033 	 ldr r3,[r3,#768]
 611:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** }
 218              	 .loc 1 611 0
 219 000e 1846     	 mov r0,r3
 220 0010 0C37     	 adds r7,r7,#12
 221              	.LCFI27:
 222              	 .cfi_def_cfa_offset 4
 223 0012 BD46     	 mov sp,r7
 224              	.LCFI28:
 225              	 .cfi_def_cfa_register 13
 226              	 
 227 0014 5DF8047B 	 ldr r7,[sp],#4
 228              	.LCFI29:
 229              	 .cfi_restore 7
 230              	 .cfi_def_cfa_offset 0
 231 0018 7047     	 bx lr
 232              	 .cfi_endproc
 233              	.LFE137:
 235 001a 00BF     	 .section .text.XMC_DMA_GetChannelsErrorStatus,"ax",%progbits
 236              	 .align 2
 237              	 .thumb
 238              	 .thumb_func
 240              	XMC_DMA_GetChannelsErrorStatus:
 241              	.LFB138:
 612:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** 
 613:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** /**
 614:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 615:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 616:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 617:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 618:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA error event status <br>
 619:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  *
 620:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 621:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 622:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****  */
 623:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 624:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** {
 242              	 .loc 1 624 0
 243              	 .cfi_startproc
 244              	 
 245              	 
 246              	 
 247 0000 80B4     	 push {r7}
 248              	.LCFI30:
 249              	 .cfi_def_cfa_offset 4
 250              	 .cfi_offset 7,-4
 251 0002 83B0     	 sub sp,sp,#12
 252              	.LCFI31:
 253              	 .cfi_def_cfa_offset 16
 254 0004 00AF     	 add r7,sp,#0
 255              	.LCFI32:
 256              	 .cfi_def_cfa_register 7
 257 0006 7860     	 str r0,[r7,#4]
 625:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 258              	 .loc 1 625 0
 259 0008 7B68     	 ldr r3,[r7,#4]
 260 000a D3F80833 	 ldr r3,[r3,#776]
 626:C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc\xmc_dma.h **** }
 261              	 .loc 1 626 0
 262 000e 1846     	 mov r0,r3
 263 0010 0C37     	 adds r7,r7,#12
 264              	.LCFI33:
 265              	 .cfi_def_cfa_offset 4
 266 0012 BD46     	 mov sp,r7
 267              	.LCFI34:
 268              	 .cfi_def_cfa_register 13
 269              	 
 270 0014 5DF8047B 	 ldr r7,[sp],#4
 271              	.LCFI35:
 272              	 .cfi_restore 7
 273              	 .cfi_def_cfa_offset 0
 274 0018 7047     	 bx lr
 275              	 .cfi_endproc
 276              	.LFE138:
 278 001a 00BF     	 .section .bss.dma0_event_handlers,"aw",%nobits
 279              	 .align 2
 282              	dma0_event_handlers:
 283 0000 00000000 	 .space 32
 283      00000000 
 283      00000000 
 283      00000000 
 283      00000000 
 284              	 .section .bss.dma1_event_handlers,"aw",%nobits
 285              	 .align 2
 288              	dma1_event_handlers:
 289 0000 00000000 	 .space 16
 289      00000000 
 289      00000000 
 289      00000000 
 290              	 .section .text.XMC_DMA_Init,"ax",%progbits
 291              	 .align 2
 292              	 .global XMC_DMA_Init
 293              	 .thumb
 294              	 .thumb_func
 296              	XMC_DMA_Init:
 297              	.LFB185:
 298              	 .file 2 "../Libraries/XMCLib/src/xmc_dma.c"
   1:../Libraries/XMCLib/src/xmc_dma.c **** 
   2:../Libraries/XMCLib/src/xmc_dma.c **** /**
   3:../Libraries/XMCLib/src/xmc_dma.c ****  * @file xmc_dma.c
   4:../Libraries/XMCLib/src/xmc_dma.c ****  * @date 2019-05-07
   5:../Libraries/XMCLib/src/xmc_dma.c ****  *
   6:../Libraries/XMCLib/src/xmc_dma.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_dma.c ****  *****************************************************************************
   8:../Libraries/XMCLib/src/xmc_dma.c ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   9:../Libraries/XMCLib/src/xmc_dma.c ****  *
  10:../Libraries/XMCLib/src/xmc_dma.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_dma.c ****  * All rights reserved.
  12:../Libraries/XMCLib/src/xmc_dma.c ****  *
  13:../Libraries/XMCLib/src/xmc_dma.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  14:../Libraries/XMCLib/src/xmc_dma.c ****  *
  15:../Libraries/XMCLib/src/xmc_dma.c ****  * Permission is hereby granted, free of charge, to any person or organization
  16:../Libraries/XMCLib/src/xmc_dma.c ****  * obtaining a copy of the software and accompanying documentation covered by
  17:../Libraries/XMCLib/src/xmc_dma.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  18:../Libraries/XMCLib/src/xmc_dma.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  19:../Libraries/XMCLib/src/xmc_dma.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  20:../Libraries/XMCLib/src/xmc_dma.c ****  * do so, all subject to the following:
  21:../Libraries/XMCLib/src/xmc_dma.c ****  *
  22:../Libraries/XMCLib/src/xmc_dma.c ****  * The copyright notices in the Software and this entire statement, including
  23:../Libraries/XMCLib/src/xmc_dma.c ****  * the above license grant, this restriction and the following disclaimer,
  24:../Libraries/XMCLib/src/xmc_dma.c ****  * must be included in all copies of the Software, in whole or in part, and
  25:../Libraries/XMCLib/src/xmc_dma.c ****  * all derivative works of the Software, unless such copies or derivative
  26:../Libraries/XMCLib/src/xmc_dma.c ****  * works are solely in the form of machine-executable object code generated by
  27:../Libraries/XMCLib/src/xmc_dma.c ****  * a source language processor.
  28:../Libraries/XMCLib/src/xmc_dma.c ****  *
  29:../Libraries/XMCLib/src/xmc_dma.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30:../Libraries/XMCLib/src/xmc_dma.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31:../Libraries/XMCLib/src/xmc_dma.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  32:../Libraries/XMCLib/src/xmc_dma.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  33:../Libraries/XMCLib/src/xmc_dma.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  34:../Libraries/XMCLib/src/xmc_dma.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  35:../Libraries/XMCLib/src/xmc_dma.c ****  * DEALINGS IN THE SOFTWARE.
  36:../Libraries/XMCLib/src/xmc_dma.c ****  *
  37:../Libraries/XMCLib/src/xmc_dma.c ****  * To improve the quality of the software, users are encouraged to share
  38:../Libraries/XMCLib/src/xmc_dma.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  39:../Libraries/XMCLib/src/xmc_dma.c ****  * at XMCSupport@infineon.com.
  40:../Libraries/XMCLib/src/xmc_dma.c ****  *****************************************************************************
  41:../Libraries/XMCLib/src/xmc_dma.c ****  *
  42:../Libraries/XMCLib/src/xmc_dma.c ****  * Change History
  43:../Libraries/XMCLib/src/xmc_dma.c ****  * --------------
  44:../Libraries/XMCLib/src/xmc_dma.c ****  *
  45:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-02-20:
  46:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Initial <br>
  47:../Libraries/XMCLib/src/xmc_dma.c ****  *
  48:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-05-20:
  49:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Add the declarations for the following APIs: <br>
  50:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  51:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  52:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  53:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Remove PRIOARRAY <br>
  54:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Documentation updates <br>
  55:../Libraries/XMCLib/src/xmc_dma.c ****  *
  56:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-06-20:
  57:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Removed GetDriverVersion API <br>
  58:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Init() to support scatter/gather functionality (only
  59:../Libraries/XMCLib/src/xmc_dma.c ****  *       on advanced DMA channels) <br>
  60:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Disable() <br>
  61:../Libraries/XMCLib/src/xmc_dma.c ****  *
  62:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-03-09:
  63:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Optimize write only registers
  64:../Libraries/XMCLib/src/xmc_dma.c ****  *
  65:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-04-08:
  66:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Update XMC_DMA_CH_EnableEvent and XMC_DMA_CH_DisableEvent.
  67:../Libraries/XMCLib/src/xmc_dma.c ****  *       Write optimization of MASKCHEV
  68:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_IRQHandler, clear channel event status before processing the event handler.
  69:../Libraries/XMCLib/src/xmc_dma.c ****  *       It corrects event losses if the DMA triggered in the event handler finished before returni
  70:../Libraries/XMCLib/src/xmc_dma.c ****  *
  71:../Libraries/XMCLib/src/xmc_dma.c ****  * 2018-02-08:
  72:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_CH_RequestLastMultiblockTransfer() clearing CTLL_LLP_SRC_EN and CTLL_LLP_DST_E
  73:../Libraries/XMCLib/src/xmc_dma.c ****  *
  74:../Libraries/XMCLib/src/xmc_dma.c ****  * 2019-05-07:
  75:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fixed compilation warnings
  76:../Libraries/XMCLib/src/xmc_dma.c ****  *
  77:../Libraries/XMCLib/src/xmc_dma.c ****  * @endcond
  78:../Libraries/XMCLib/src/xmc_dma.c ****  */
  79:../Libraries/XMCLib/src/xmc_dma.c **** 
  80:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  81:../Libraries/XMCLib/src/xmc_dma.c ****  * HEADER FILES
  82:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  83:../Libraries/XMCLib/src/xmc_dma.c **** 
  84:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_dma.h"
  85:../Libraries/XMCLib/src/xmc_dma.c **** 
  86:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  87:../Libraries/XMCLib/src/xmc_dma.c **** 
  88:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_scu.h"
  89:../Libraries/XMCLib/src/xmc_dma.c **** 
  90:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  91:../Libraries/XMCLib/src/xmc_dma.c ****  * MACROS
  92:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  93:../Libraries/XMCLib/src/xmc_dma.c **** 
  94:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_MSK (0xfUL)
  95:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_BITSIZE (4UL)
  96:../Libraries/XMCLib/src/xmc_dma.c **** #define DMA_EVENT_MAX (5UL)
  97:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_DEST_PER_Pos GPDMA0_CH_CFGH_DEST_PER_Pos
  98:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_SRC_PER_Pos GPDMA0_CH_CFGH_SRC_PER_Pos
  99:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA0_CH_CFGH_PER_Msk (0x7U)
 100:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA1_CH_CFGH_PER_Msk (0x3U)
 101:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_PER_BITSIZE (4U)
 102:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CTLL_INT_EN_Msk GPDMA0_CH_CTLL_INT_EN_Msk
 103:../Libraries/XMCLib/src/xmc_dma.c **** 
 104:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 105:../Libraries/XMCLib/src/xmc_dma.c ****  * LOCAL DATA
 106:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 107:../Libraries/XMCLib/src/xmc_dma.c **** 
 108:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
 109:../Libraries/XMCLib/src/xmc_dma.c **** static XMC_DMA_CH_EVENT_HANDLER_t dma0_event_handlers[XMC_DMA0_NUM_CHANNELS];
 110:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 111:../Libraries/XMCLib/src/xmc_dma.c **** 
 112:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA1)
 113:../Libraries/XMCLib/src/xmc_dma.c **** static XMC_DMA_CH_EVENT_HANDLER_t dma1_event_handlers[XMC_DMA1_NUM_CHANNELS];
 114:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 115:../Libraries/XMCLib/src/xmc_dma.c **** 
 116:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 117:../Libraries/XMCLib/src/xmc_dma.c ****  * API IMPLEMENTATION
 118:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 119:../Libraries/XMCLib/src/xmc_dma.c **** 
 120:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize GPDMA */
 121:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Init(XMC_DMA_t *const dma)
 122:../Libraries/XMCLib/src/xmc_dma.c **** {
 299              	 .loc 2 122 0
 300              	 .cfi_startproc
 301              	 
 302              	 
 303 0000 80B5     	 push {r7,lr}
 304              	.LCFI36:
 305              	 .cfi_def_cfa_offset 8
 306              	 .cfi_offset 7,-8
 307              	 .cfi_offset 14,-4
 308 0002 82B0     	 sub sp,sp,#8
 309              	.LCFI37:
 310              	 .cfi_def_cfa_offset 16
 311 0004 00AF     	 add r7,sp,#0
 312              	.LCFI38:
 313              	 .cfi_def_cfa_register 7
 314 0006 7860     	 str r0,[r7,#4]
 123:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
 315              	 .loc 2 123 0
 316 0008 7868     	 ldr r0,[r7,#4]
 317 000a FFF7FEFF 	 bl XMC_DMA_Enable
 124:../Libraries/XMCLib/src/xmc_dma.c **** }
 318              	 .loc 2 124 0
 319 000e 0837     	 adds r7,r7,#8
 320              	.LCFI39:
 321              	 .cfi_def_cfa_offset 8
 322 0010 BD46     	 mov sp,r7
 323              	.LCFI40:
 324              	 .cfi_def_cfa_register 13
 325              	 
 326 0012 80BD     	 pop {r7,pc}
 327              	 .cfi_endproc
 328              	.LFE185:
 330              	 .section .text.XMC_DMA_Enable,"ax",%progbits
 331              	 .align 2
 332              	 .global XMC_DMA_Enable
 333              	 .thumb
 334              	 .thumb_func
 336              	XMC_DMA_Enable:
 337              	.LFB186:
 125:../Libraries/XMCLib/src/xmc_dma.c **** 
 126:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA module */
 127:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Enable(XMC_DMA_t *const dma)
 128:../Libraries/XMCLib/src/xmc_dma.c **** {
 338              	 .loc 2 128 0
 339              	 .cfi_startproc
 340              	 
 341              	 
 342 0000 80B5     	 push {r7,lr}
 343              	.LCFI41:
 344              	 .cfi_def_cfa_offset 8
 345              	 .cfi_offset 7,-8
 346              	 .cfi_offset 14,-4
 347 0002 82B0     	 sub sp,sp,#8
 348              	.LCFI42:
 349              	 .cfi_def_cfa_offset 16
 350 0004 00AF     	 add r7,sp,#0
 351              	.LCFI43:
 352              	 .cfi_def_cfa_register 7
 353 0006 7860     	 str r0,[r7,#4]
 129:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 130:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 354              	 .loc 2 130 0
 355 0008 7B68     	 ldr r3,[r7,#4]
 356 000a 0B4A     	 ldr r2,.L17
 357 000c 9342     	 cmp r3,r2
 358 000e 06D1     	 bne .L15
 131:../Libraries/XMCLib/src/xmc_dma.c ****   {
 132:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 133:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 134:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 359              	 .loc 2 134 0
 360 0010 0A48     	 ldr r0,.L17+4
 361 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 135:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 136:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 362              	 .loc 2 136 0
 363 0016 0948     	 ldr r0,.L17+4
 364 0018 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 365 001c 05E0     	 b .L16
 366              	.L15:
 137:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 138:../Libraries/XMCLib/src/xmc_dma.c ****   }
 139:../Libraries/XMCLib/src/xmc_dma.c ****   else
 140:../Libraries/XMCLib/src/xmc_dma.c ****   {
 141:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 142:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 367              	 .loc 2 142 0
 368 001e 0848     	 ldr r0,.L17+8
 369 0020 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 143:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 144:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 370              	 .loc 2 144 0
 371 0024 0648     	 ldr r0,.L17+8
 372 0026 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 373              	.L16:
 145:../Libraries/XMCLib/src/xmc_dma.c ****   }
 146:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 147:../Libraries/XMCLib/src/xmc_dma.c **** 
 148:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x1U;
 374              	 .loc 2 148 0
 375 002a 7B68     	 ldr r3,[r7,#4]
 376 002c 0122     	 movs r2,#1
 377 002e C3F89823 	 str r2,[r3,#920]
 149:../Libraries/XMCLib/src/xmc_dma.c **** }
 378              	 .loc 2 149 0
 379 0032 0837     	 adds r7,r7,#8
 380              	.LCFI44:
 381              	 .cfi_def_cfa_offset 8
 382 0034 BD46     	 mov sp,r7
 383              	.LCFI45:
 384              	 .cfi_def_cfa_register 13
 385              	 
 386 0036 80BD     	 pop {r7,pc}
 387              	.L18:
 388              	 .align 2
 389              	.L17:
 390 0038 00400150 	 .word 1342259200
 391 003c 10000020 	 .word 536870928
 392 0040 20000020 	 .word 536870944
 393              	 .cfi_endproc
 394              	.LFE186:
 396              	 .section .text.XMC_DMA_Disable,"ax",%progbits
 397              	 .align 2
 398              	 .global XMC_DMA_Disable
 399              	 .thumb
 400              	 .thumb_func
 402              	XMC_DMA_Disable:
 403              	.LFB187:
 150:../Libraries/XMCLib/src/xmc_dma.c **** 
 151:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA module */
 152:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Disable(XMC_DMA_t *const dma)
 153:../Libraries/XMCLib/src/xmc_dma.c **** {
 404              	 .loc 2 153 0
 405              	 .cfi_startproc
 406              	 
 407              	 
 408 0000 80B5     	 push {r7,lr}
 409              	.LCFI46:
 410              	 .cfi_def_cfa_offset 8
 411              	 .cfi_offset 7,-8
 412              	 .cfi_offset 14,-4
 413 0002 82B0     	 sub sp,sp,#8
 414              	.LCFI47:
 415              	 .cfi_def_cfa_offset 16
 416 0004 00AF     	 add r7,sp,#0
 417              	.LCFI48:
 418              	 .cfi_def_cfa_register 7
 419 0006 7860     	 str r0,[r7,#4]
 154:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x0U;
 420              	 .loc 2 154 0
 421 0008 7B68     	 ldr r3,[r7,#4]
 422 000a 0022     	 movs r2,#0
 423 000c C3F89823 	 str r2,[r3,#920]
 155:../Libraries/XMCLib/src/xmc_dma.c **** 
 156:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 157:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 424              	 .loc 2 157 0
 425 0010 7B68     	 ldr r3,[r7,#4]
 426 0012 094A     	 ldr r2,.L22
 427 0014 9342     	 cmp r3,r2
 428 0016 06D1     	 bne .L20
 158:../Libraries/XMCLib/src/xmc_dma.c ****   {
 159:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 160:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 429              	 .loc 2 160 0
 430 0018 0848     	 ldr r0,.L22+4
 431 001a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 161:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 162:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 432              	 .loc 2 162 0
 433 001e 0748     	 ldr r0,.L22+4
 434 0020 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 435 0024 05E0     	 b .L19
 436              	.L20:
 163:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 164:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 165:../Libraries/XMCLib/src/xmc_dma.c ****   }
 166:../Libraries/XMCLib/src/xmc_dma.c ****   else
 167:../Libraries/XMCLib/src/xmc_dma.c ****   {
 168:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 437              	 .loc 2 168 0
 438 0026 0648     	 ldr r0,.L22+8
 439 0028 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 169:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 170:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 440              	 .loc 2 170 0
 441 002c 0448     	 ldr r0,.L22+8
 442 002e FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 443              	.L19:
 171:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 172:../Libraries/XMCLib/src/xmc_dma.c ****   }
 173:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 174:../Libraries/XMCLib/src/xmc_dma.c **** }
 444              	 .loc 2 174 0
 445 0032 0837     	 adds r7,r7,#8
 446              	.LCFI49:
 447              	 .cfi_def_cfa_offset 8
 448 0034 BD46     	 mov sp,r7
 449              	.LCFI50:
 450              	 .cfi_def_cfa_register 13
 451              	 
 452 0036 80BD     	 pop {r7,pc}
 453              	.L23:
 454              	 .align 2
 455              	.L22:
 456 0038 00400150 	 .word 1342259200
 457 003c 10000020 	 .word 536870928
 458 0040 20000020 	 .word 536870944
 459              	 .cfi_endproc
 460              	.LFE187:
 462              	 .section .text.XMC_DMA_IsEnabled,"ax",%progbits
 463              	 .align 2
 464              	 .global XMC_DMA_IsEnabled
 465              	 .thumb
 466              	 .thumb_func
 468              	XMC_DMA_IsEnabled:
 469              	.LFB188:
 175:../Libraries/XMCLib/src/xmc_dma.c **** 
 176:../Libraries/XMCLib/src/xmc_dma.c **** /* Check is the GPDMA peripheral is enabled */
 177:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
 178:../Libraries/XMCLib/src/xmc_dma.c **** {
 470              	 .loc 2 178 0
 471              	 .cfi_startproc
 472              	 
 473              	 
 474 0000 80B5     	 push {r7,lr}
 475              	.LCFI51:
 476              	 .cfi_def_cfa_offset 8
 477              	 .cfi_offset 7,-8
 478              	 .cfi_offset 14,-4
 479 0002 84B0     	 sub sp,sp,#16
 480              	.LCFI52:
 481              	 .cfi_def_cfa_offset 24
 482 0004 00AF     	 add r7,sp,#0
 483              	.LCFI53:
 484              	 .cfi_def_cfa_register 7
 485 0006 7860     	 str r0,[r7,#4]
 179:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 180:../Libraries/XMCLib/src/xmc_dma.c **** 
 181:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 182:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 486              	 .loc 2 182 0
 487 0008 7B68     	 ldr r3,[r7,#4]
 488 000a 334A     	 ldr r2,.L35
 489 000c 9342     	 cmp r3,r2
 490 000e 25D1     	 bne .L25
 183:../Libraries/XMCLib/src/xmc_dma.c ****   {
 184:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 185:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 491              	 .loc 2 185 0
 492 0010 3248     	 ldr r0,.L35+4
 493 0012 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 494 0016 0346     	 mov r3,r0
 495 0018 002B     	 cmp r3,#0
 496 001a 14BF     	 ite ne
 497 001c 0123     	 movne r3,#1
 498 001e 0023     	 moveq r3,#0
 499 0020 DBB2     	 uxtb r3,r3
 500 0022 83F00103 	 eor r3,r3,#1
 501 0026 DBB2     	 uxtb r3,r3
 502 0028 FB73     	 strb r3,[r7,#15]
 503 002a FB7B     	 ldrb r3,[r7,#15]
 504 002c 03F00103 	 and r3,r3,#1
 505 0030 FB73     	 strb r3,[r7,#15]
 186:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 187:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 506              	 .loc 2 187 0
 507 0032 FB7B     	 ldrb r3,[r7,#15]
 508 0034 002B     	 cmp r3,#0
 509 0036 0AD0     	 beq .L26
 510              	 .loc 2 187 0 is_stmt 0 discriminator 1
 511 0038 2848     	 ldr r0,.L35+4
 512 003a FFF7FEFF 	 bl XMC_SCU_CLOCK_IsPeripheralClockGated
 513 003e 0346     	 mov r3,r0
 514 0040 83F00103 	 eor r3,r3,#1
 515 0044 DBB2     	 uxtb r3,r3
 516 0046 002B     	 cmp r3,#0
 517 0048 01D0     	 beq .L26
 518              	 .loc 2 187 0 discriminator 3
 519 004a 0123     	 movs r3,#1
 520 004c 00E0     	 b .L27
 521              	.L26:
 522              	 .loc 2 187 0 discriminator 4
 523 004e 0023     	 movs r3,#0
 524              	.L27:
 525              	 .loc 2 187 0 discriminator 6
 526 0050 FB73     	 strb r3,[r7,#15]
 527 0052 FB7B     	 ldrb r3,[r7,#15]
 528 0054 03F00103 	 and r3,r3,#1
 529 0058 FB73     	 strb r3,[r7,#15]
 530 005a 24E0     	 b .L28
 531              	.L25:
 188:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 189:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 190:../Libraries/XMCLib/src/xmc_dma.c ****   }
 191:../Libraries/XMCLib/src/xmc_dma.c ****   else
 192:../Libraries/XMCLib/src/xmc_dma.c ****   {
 193:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 532              	 .loc 2 193 0 is_stmt 1
 533 005c 2048     	 ldr r0,.L35+8
 534 005e FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 535 0062 0346     	 mov r3,r0
 536 0064 002B     	 cmp r3,#0
 537 0066 14BF     	 ite ne
 538 0068 0123     	 movne r3,#1
 539 006a 0023     	 moveq r3,#0
 540 006c DBB2     	 uxtb r3,r3
 541 006e 83F00103 	 eor r3,r3,#1
 542 0072 DBB2     	 uxtb r3,r3
 543 0074 FB73     	 strb r3,[r7,#15]
 544 0076 FB7B     	 ldrb r3,[r7,#15]
 545 0078 03F00103 	 and r3,r3,#1
 546 007c FB73     	 strb r3,[r7,#15]
 194:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 195:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 547              	 .loc 2 195 0
 548 007e FB7B     	 ldrb r3,[r7,#15]
 549 0080 002B     	 cmp r3,#0
 550 0082 0AD0     	 beq .L29
 551              	 .loc 2 195 0 is_stmt 0 discriminator 1
 552 0084 1648     	 ldr r0,.L35+8
 553 0086 FFF7FEFF 	 bl XMC_SCU_CLOCK_IsPeripheralClockGated
 554 008a 0346     	 mov r3,r0
 555 008c 83F00103 	 eor r3,r3,#1
 556 0090 DBB2     	 uxtb r3,r3
 557 0092 002B     	 cmp r3,#0
 558 0094 01D0     	 beq .L29
 559              	 .loc 2 195 0 discriminator 3
 560 0096 0123     	 movs r3,#1
 561 0098 00E0     	 b .L30
 562              	.L29:
 563              	 .loc 2 195 0 discriminator 4
 564 009a 0023     	 movs r3,#0
 565              	.L30:
 566              	 .loc 2 195 0 discriminator 6
 567 009c FB73     	 strb r3,[r7,#15]
 568 009e FB7B     	 ldrb r3,[r7,#15]
 569 00a0 03F00103 	 and r3,r3,#1
 570 00a4 FB73     	 strb r3,[r7,#15]
 571              	.L28:
 196:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 197:../Libraries/XMCLib/src/xmc_dma.c ****   }
 198:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 199:../Libraries/XMCLib/src/xmc_dma.c **** 
 200:../Libraries/XMCLib/src/xmc_dma.c ****   /* DMA reset is not asserted and peripheral clock is not gated */
 201:../Libraries/XMCLib/src/xmc_dma.c ****   if (status == true)
 572              	 .loc 2 201 0 is_stmt 1
 573 00a6 FB7B     	 ldrb r3,[r7,#15]
 574 00a8 002B     	 cmp r3,#0
 575 00aa 0FD0     	 beq .L31
 202:../Libraries/XMCLib/src/xmc_dma.c ****   {
 203:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && (dma->DMACFGREG != 0U);
 576              	 .loc 2 203 0
 577 00ac FB7B     	 ldrb r3,[r7,#15]
 578 00ae 002B     	 cmp r3,#0
 579 00b0 06D0     	 beq .L32
 580              	 .loc 2 203 0 is_stmt 0 discriminator 1
 581 00b2 7B68     	 ldr r3,[r7,#4]
 582 00b4 D3F89833 	 ldr r3,[r3,#920]
 583 00b8 002B     	 cmp r3,#0
 584 00ba 01D0     	 beq .L32
 585              	 .loc 2 203 0 discriminator 3
 586 00bc 0123     	 movs r3,#1
 587 00be 00E0     	 b .L33
 588              	.L32:
 589              	 .loc 2 203 0 discriminator 4
 590 00c0 0023     	 movs r3,#0
 591              	.L33:
 592              	 .loc 2 203 0 discriminator 6
 593 00c2 FB73     	 strb r3,[r7,#15]
 594 00c4 FB7B     	 ldrb r3,[r7,#15]
 595 00c6 03F00103 	 and r3,r3,#1
 596 00ca FB73     	 strb r3,[r7,#15]
 597              	.L31:
 204:../Libraries/XMCLib/src/xmc_dma.c ****   }
 205:../Libraries/XMCLib/src/xmc_dma.c **** 
 206:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 598              	 .loc 2 206 0 is_stmt 1
 599 00cc FB7B     	 ldrb r3,[r7,#15]
 207:../Libraries/XMCLib/src/xmc_dma.c **** }
 600              	 .loc 2 207 0
 601 00ce 1846     	 mov r0,r3
 602 00d0 1037     	 adds r7,r7,#16
 603              	.LCFI54:
 604              	 .cfi_def_cfa_offset 8
 605 00d2 BD46     	 mov sp,r7
 606              	.LCFI55:
 607              	 .cfi_def_cfa_register 13
 608              	 
 609 00d4 80BD     	 pop {r7,pc}
 610              	.L36:
 611 00d6 00BF     	 .align 2
 612              	.L35:
 613 00d8 00400150 	 .word 1342259200
 614 00dc 10000020 	 .word 536870928
 615 00e0 20000020 	 .word 536870944
 616              	 .cfi_endproc
 617              	.LFE188:
 619              	 .section .text.XMC_DMA_EnableRequestLine,"ax",%progbits
 620              	 .align 2
 621              	 .global XMC_DMA_EnableRequestLine
 622              	 .thumb
 623              	 .thumb_func
 625              	XMC_DMA_EnableRequestLine:
 626              	.LFB189:
 208:../Libraries/XMCLib/src/xmc_dma.c **** 
 209:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable request line */
 210:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
 211:../Libraries/XMCLib/src/xmc_dma.c **** {
 627              	 .loc 2 211 0
 628              	 .cfi_startproc
 629              	 
 630              	 
 631              	 
 632 0000 80B4     	 push {r7}
 633              	.LCFI56:
 634              	 .cfi_def_cfa_offset 4
 635              	 .cfi_offset 7,-4
 636 0002 83B0     	 sub sp,sp,#12
 637              	.LCFI57:
 638              	 .cfi_def_cfa_offset 16
 639 0004 00AF     	 add r7,sp,#0
 640              	.LCFI58:
 641              	 .cfi_def_cfa_register 7
 642 0006 7860     	 str r0,[r7,#4]
 643 0008 0B46     	 mov r3,r1
 644 000a FB70     	 strb r3,[r7,#3]
 645 000c 1346     	 mov r3,r2
 646 000e BB70     	 strb r3,[r7,#2]
 212:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 213:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 647              	 .loc 2 213 0
 648 0010 7B68     	 ldr r3,[r7,#4]
 649 0012 1F4A     	 ldr r2,.L40
 650 0014 9342     	 cmp r3,r2
 651 0016 1BD1     	 bne .L38
 214:../Libraries/XMCLib/src/xmc_dma.c ****   {
 215:../Libraries/XMCLib/src/xmc_dma.c **** #else
 216:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 217:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 218:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 652              	 .loc 2 218 0
 653 0018 1E48     	 ldr r0,.L40+4
 654 001a 1E4B     	 ldr r3,.L40+4
 655 001c 9A68     	 ldr r2,[r3,#8]
 656 001e FB78     	 ldrb r3,[r7,#3]
 657 0020 9B00     	 lsls r3,r3,#2
 658 0022 1946     	 mov r1,r3
 659 0024 0F23     	 movs r3,#15
 660 0026 8B40     	 lsls r3,r3,r1
 661 0028 DB43     	 mvns r3,r3
 662 002a 1A40     	 ands r2,r2,r3
 219:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 663              	 .loc 2 219 0
 664 002c BB78     	 ldrb r3,[r7,#2]
 665 002e F978     	 ldrb r1,[r7,#3]
 666 0030 8900     	 lsls r1,r1,#2
 667 0032 8B40     	 lsls r3,r3,r1
 218:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 668              	 .loc 2 218 0
 669 0034 1343     	 orrs r3,r3,r2
 670 0036 8360     	 str r3,[r0,#8]
 220:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 671              	 .loc 2 220 0
 672 0038 1649     	 ldr r1,.L40+4
 673 003a 164B     	 ldr r3,.L40+4
 674 003c 1A69     	 ldr r2,[r3,#16]
 675 003e FB78     	 ldrb r3,[r7,#3]
 676 0040 03F00703 	 and r3,r3,#7
 677 0044 0120     	 movs r0,#1
 678 0046 00FA03F3 	 lsl r3,r0,r3
 679 004a 1343     	 orrs r3,r3,r2
 680 004c 0B61     	 str r3,[r1,#16]
 681 004e 19E0     	 b .L37
 682              	.L38:
 221:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 222:../Libraries/XMCLib/src/xmc_dma.c ****   }
 223:../Libraries/XMCLib/src/xmc_dma.c ****   else
 224:../Libraries/XMCLib/src/xmc_dma.c ****   {
 225:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 683              	 .loc 2 225 0
 684 0050 1048     	 ldr r0,.L40+4
 685 0052 104B     	 ldr r3,.L40+4
 686 0054 DA68     	 ldr r2,[r3,#12]
 687 0056 FB78     	 ldrb r3,[r7,#3]
 688 0058 9B00     	 lsls r3,r3,#2
 689 005a 1946     	 mov r1,r3
 690 005c 0F23     	 movs r3,#15
 691 005e 8B40     	 lsls r3,r3,r1
 692 0060 DB43     	 mvns r3,r3
 693 0062 1A40     	 ands r2,r2,r3
 226:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 694              	 .loc 2 226 0
 695 0064 BB78     	 ldrb r3,[r7,#2]
 696 0066 F978     	 ldrb r1,[r7,#3]
 697 0068 8900     	 lsls r1,r1,#2
 698 006a 8B40     	 lsls r3,r3,r1
 225:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 699              	 .loc 2 225 0
 700 006c 1343     	 orrs r3,r3,r2
 701 006e C360     	 str r3,[r0,#12]
 227:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 702              	 .loc 2 227 0
 703 0070 0849     	 ldr r1,.L40+4
 704 0072 084B     	 ldr r3,.L40+4
 705 0074 1A69     	 ldr r2,[r3,#16]
 706 0076 FB78     	 ldrb r3,[r7,#3]
 707 0078 4FF48070 	 mov r0,#256
 708 007c 00FA03F3 	 lsl r3,r0,r3
 709 0080 1343     	 orrs r3,r3,r2
 710 0082 0B61     	 str r3,[r1,#16]
 711              	.L37:
 228:../Libraries/XMCLib/src/xmc_dma.c ****   }
 229:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 230:../Libraries/XMCLib/src/xmc_dma.c **** }
 712              	 .loc 2 230 0
 713 0084 0C37     	 adds r7,r7,#12
 714              	.LCFI59:
 715              	 .cfi_def_cfa_offset 4
 716 0086 BD46     	 mov sp,r7
 717              	.LCFI60:
 718              	 .cfi_def_cfa_register 13
 719              	 
 720 0088 5DF8047B 	 ldr r7,[sp],#4
 721              	.LCFI61:
 722              	 .cfi_restore 7
 723              	 .cfi_def_cfa_offset 0
 724 008c 7047     	 bx lr
 725              	.L41:
 726 008e 00BF     	 .align 2
 727              	.L40:
 728 0090 00400150 	 .word 1342259200
 729 0094 00490050 	 .word 1342195968
 730              	 .cfi_endproc
 731              	.LFE189:
 733              	 .section .text.XMC_DMA_DisableRequestLine,"ax",%progbits
 734              	 .align 2
 735              	 .global XMC_DMA_DisableRequestLine
 736              	 .thumb
 737              	 .thumb_func
 739              	XMC_DMA_DisableRequestLine:
 740              	.LFB190:
 231:../Libraries/XMCLib/src/xmc_dma.c **** 
 232:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
 233:../Libraries/XMCLib/src/xmc_dma.c **** {
 741              	 .loc 2 233 0
 742              	 .cfi_startproc
 743              	 
 744              	 
 745              	 
 746 0000 80B4     	 push {r7}
 747              	.LCFI62:
 748              	 .cfi_def_cfa_offset 4
 749              	 .cfi_offset 7,-4
 750 0002 83B0     	 sub sp,sp,#12
 751              	.LCFI63:
 752              	 .cfi_def_cfa_offset 16
 753 0004 00AF     	 add r7,sp,#0
 754              	.LCFI64:
 755              	 .cfi_def_cfa_register 7
 756 0006 7860     	 str r0,[r7,#4]
 757 0008 0B46     	 mov r3,r1
 758 000a FB70     	 strb r3,[r7,#3]
 234:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 235:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 759              	 .loc 2 235 0
 760 000c 7B68     	 ldr r3,[r7,#4]
 761 000e 0F4A     	 ldr r2,.L45
 762 0010 9342     	 cmp r3,r2
 763 0012 0AD1     	 bne .L43
 236:../Libraries/XMCLib/src/xmc_dma.c ****   {
 237:../Libraries/XMCLib/src/xmc_dma.c **** #else
 238:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 239:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 240:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 764              	 .loc 2 240 0
 765 0014 0E49     	 ldr r1,.L45+4
 766 0016 0E4B     	 ldr r3,.L45+4
 767 0018 1A69     	 ldr r2,[r3,#16]
 768 001a FB78     	 ldrb r3,[r7,#3]
 769 001c 0120     	 movs r0,#1
 770 001e 00FA03F3 	 lsl r3,r0,r3
 771 0022 DB43     	 mvns r3,r3
 772 0024 1340     	 ands r3,r3,r2
 773 0026 0B61     	 str r3,[r1,#16]
 774 0028 0AE0     	 b .L42
 775              	.L43:
 241:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 242:../Libraries/XMCLib/src/xmc_dma.c ****   }
 243:../Libraries/XMCLib/src/xmc_dma.c ****   else
 244:../Libraries/XMCLib/src/xmc_dma.c ****   {
 245:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 776              	 .loc 2 245 0
 777 002a 0949     	 ldr r1,.L45+4
 778 002c 084B     	 ldr r3,.L45+4
 779 002e 1A69     	 ldr r2,[r3,#16]
 780 0030 FB78     	 ldrb r3,[r7,#3]
 781 0032 4FF48070 	 mov r0,#256
 782 0036 00FA03F3 	 lsl r3,r0,r3
 783 003a DB43     	 mvns r3,r3
 784 003c 1340     	 ands r3,r3,r2
 785 003e 0B61     	 str r3,[r1,#16]
 786              	.L42:
 246:../Libraries/XMCLib/src/xmc_dma.c ****   }
 247:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 248:../Libraries/XMCLib/src/xmc_dma.c **** }
 787              	 .loc 2 248 0
 788 0040 0C37     	 adds r7,r7,#12
 789              	.LCFI65:
 790              	 .cfi_def_cfa_offset 4
 791 0042 BD46     	 mov sp,r7
 792              	.LCFI66:
 793              	 .cfi_def_cfa_register 13
 794              	 
 795 0044 5DF8047B 	 ldr r7,[sp],#4
 796              	.LCFI67:
 797              	 .cfi_restore 7
 798              	 .cfi_def_cfa_offset 0
 799 0048 7047     	 bx lr
 800              	.L46:
 801 004a 00BF     	 .align 2
 802              	.L45:
 803 004c 00400150 	 .word 1342259200
 804 0050 00490050 	 .word 1342195968
 805              	 .cfi_endproc
 806              	.LFE190:
 808              	 .section .text.XMC_DMA_ClearRequestLine,"ax",%progbits
 809              	 .align 2
 810              	 .global XMC_DMA_ClearRequestLine
 811              	 .thumb
 812              	 .thumb_func
 814              	XMC_DMA_ClearRequestLine:
 815              	.LFB191:
 249:../Libraries/XMCLib/src/xmc_dma.c **** 
 250:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
 251:../Libraries/XMCLib/src/xmc_dma.c **** {
 816              	 .loc 2 251 0
 817              	 .cfi_startproc
 818              	 
 819              	 
 820              	 
 821 0000 80B4     	 push {r7}
 822              	.LCFI68:
 823              	 .cfi_def_cfa_offset 4
 824              	 .cfi_offset 7,-4
 825 0002 83B0     	 sub sp,sp,#12
 826              	.LCFI69:
 827              	 .cfi_def_cfa_offset 16
 828 0004 00AF     	 add r7,sp,#0
 829              	.LCFI70:
 830              	 .cfi_def_cfa_register 7
 831 0006 7860     	 str r0,[r7,#4]
 832 0008 0B46     	 mov r3,r1
 833 000a FB70     	 strb r3,[r7,#3]
 252:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 253:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 834              	 .loc 2 253 0
 835 000c 7B68     	 ldr r3,[r7,#4]
 836 000e 184A     	 ldr r2,.L50
 837 0010 9342     	 cmp r3,r2
 838 0012 13D1     	 bne .L48
 254:../Libraries/XMCLib/src/xmc_dma.c ****   {
 255:../Libraries/XMCLib/src/xmc_dma.c **** #else
 256:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 257:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 258:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 839              	 .loc 2 258 0
 840 0014 1749     	 ldr r1,.L50+4
 841 0016 174B     	 ldr r3,.L50+4
 842 0018 1A69     	 ldr r2,[r3,#16]
 843 001a FB78     	 ldrb r3,[r7,#3]
 844 001c 0120     	 movs r0,#1
 845 001e 00FA03F3 	 lsl r3,r0,r3
 846 0022 DB43     	 mvns r3,r3
 847 0024 1340     	 ands r3,r3,r2
 848 0026 0B61     	 str r3,[r1,#16]
 259:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= 0x1UL << line;
 849              	 .loc 2 259 0
 850 0028 1249     	 ldr r1,.L50+4
 851 002a 124B     	 ldr r3,.L50+4
 852 002c 1A69     	 ldr r2,[r3,#16]
 853 002e FB78     	 ldrb r3,[r7,#3]
 854 0030 0120     	 movs r0,#1
 855 0032 00FA03F3 	 lsl r3,r0,r3
 856 0036 1343     	 orrs r3,r3,r2
 857 0038 0B61     	 str r3,[r1,#16]
 858 003a 14E0     	 b .L47
 859              	.L48:
 260:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 261:../Libraries/XMCLib/src/xmc_dma.c ****   }
 262:../Libraries/XMCLib/src/xmc_dma.c ****   else
 263:../Libraries/XMCLib/src/xmc_dma.c ****   {
 264:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 860              	 .loc 2 264 0
 861 003c 0D49     	 ldr r1,.L50+4
 862 003e 0D4B     	 ldr r3,.L50+4
 863 0040 1A69     	 ldr r2,[r3,#16]
 864 0042 FB78     	 ldrb r3,[r7,#3]
 865 0044 4FF48070 	 mov r0,#256
 866 0048 00FA03F3 	 lsl r3,r0,r3
 867 004c DB43     	 mvns r3,r3
 868 004e 1340     	 ands r3,r3,r2
 869 0050 0B61     	 str r3,[r1,#16]
 265:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= 0x100UL << line;
 870              	 .loc 2 265 0
 871 0052 0849     	 ldr r1,.L50+4
 872 0054 074B     	 ldr r3,.L50+4
 873 0056 1A69     	 ldr r2,[r3,#16]
 874 0058 FB78     	 ldrb r3,[r7,#3]
 875 005a 4FF48070 	 mov r0,#256
 876 005e 00FA03F3 	 lsl r3,r0,r3
 877 0062 1343     	 orrs r3,r3,r2
 878 0064 0B61     	 str r3,[r1,#16]
 879              	.L47:
 266:../Libraries/XMCLib/src/xmc_dma.c ****   }
 267:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 268:../Libraries/XMCLib/src/xmc_dma.c **** }
 880              	 .loc 2 268 0
 881 0066 0C37     	 adds r7,r7,#12
 882              	.LCFI71:
 883              	 .cfi_def_cfa_offset 4
 884 0068 BD46     	 mov sp,r7
 885              	.LCFI72:
 886              	 .cfi_def_cfa_register 13
 887              	 
 888 006a 5DF8047B 	 ldr r7,[sp],#4
 889              	.LCFI73:
 890              	 .cfi_restore 7
 891              	 .cfi_def_cfa_offset 0
 892 006e 7047     	 bx lr
 893              	.L51:
 894              	 .align 2
 895              	.L50:
 896 0070 00400150 	 .word 1342259200
 897 0074 00490050 	 .word 1342195968
 898              	 .cfi_endproc
 899              	.LFE191:
 901              	 .section .text.XMC_DMA_GetOverrunStatus,"ax",%progbits
 902              	 .align 2
 903              	 .global XMC_DMA_GetOverrunStatus
 904              	 .thumb
 905              	 .thumb_func
 907              	XMC_DMA_GetOverrunStatus:
 908              	.LFB192:
 269:../Libraries/XMCLib/src/xmc_dma.c **** 
 270:../Libraries/XMCLib/src/xmc_dma.c **** /* Get DMA DLR overrun status */
 271:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
 272:../Libraries/XMCLib/src/xmc_dma.c **** {
 909              	 .loc 2 272 0
 910              	 .cfi_startproc
 911              	 
 912              	 
 913              	 
 914 0000 80B4     	 push {r7}
 915              	.LCFI74:
 916              	 .cfi_def_cfa_offset 4
 917              	 .cfi_offset 7,-4
 918 0002 85B0     	 sub sp,sp,#20
 919              	.LCFI75:
 920              	 .cfi_def_cfa_offset 24
 921 0004 00AF     	 add r7,sp,#0
 922              	.LCFI76:
 923              	 .cfi_def_cfa_register 7
 924 0006 7860     	 str r0,[r7,#4]
 925 0008 0B46     	 mov r3,r1
 926 000a FB70     	 strb r3,[r7,#3]
 273:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 274:../Libraries/XMCLib/src/xmc_dma.c **** 
 275:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 276:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 927              	 .loc 2 276 0
 928 000c 7B68     	 ldr r3,[r7,#4]
 929 000e 124A     	 ldr r2,.L56
 930 0010 9342     	 cmp r3,r2
 931 0012 0CD1     	 bne .L53
 277:../Libraries/XMCLib/src/xmc_dma.c ****   {
 278:../Libraries/XMCLib/src/xmc_dma.c **** #else
 279:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 280:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 281:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 932              	 .loc 2 281 0
 933 0014 114B     	 ldr r3,.L56+4
 934 0016 1A68     	 ldr r2,[r3]
 935 0018 FB78     	 ldrb r3,[r7,#3]
 936 001a 22FA03F3 	 lsr r3,r2,r3
 937 001e 03F00103 	 and r3,r3,#1
 938 0022 002B     	 cmp r3,#0
 939 0024 14BF     	 ite ne
 940 0026 0123     	 movne r3,#1
 941 0028 0023     	 moveq r3,#0
 942 002a FB73     	 strb r3,[r7,#15]
 943 002c 0CE0     	 b .L54
 944              	.L53:
 282:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 283:../Libraries/XMCLib/src/xmc_dma.c ****   }
 284:../Libraries/XMCLib/src/xmc_dma.c ****   else
 285:../Libraries/XMCLib/src/xmc_dma.c ****   {
 286:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 945              	 .loc 2 286 0
 946 002e 0B4B     	 ldr r3,.L56+4
 947 0030 1A68     	 ldr r2,[r3]
 948 0032 FB78     	 ldrb r3,[r7,#3]
 949 0034 4FF48071 	 mov r1,#256
 950 0038 01FA03F3 	 lsl r3,r1,r3
 951 003c 1340     	 ands r3,r3,r2
 952 003e 002B     	 cmp r3,#0
 953 0040 14BF     	 ite ne
 954 0042 0123     	 movne r3,#1
 955 0044 0023     	 moveq r3,#0
 956 0046 FB73     	 strb r3,[r7,#15]
 957              	.L54:
 287:../Libraries/XMCLib/src/xmc_dma.c ****   }
 288:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 289:../Libraries/XMCLib/src/xmc_dma.c **** 
 290:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 958              	 .loc 2 290 0
 959 0048 FB7B     	 ldrb r3,[r7,#15]
 291:../Libraries/XMCLib/src/xmc_dma.c **** }
 960              	 .loc 2 291 0
 961 004a 1846     	 mov r0,r3
 962 004c 1437     	 adds r7,r7,#20
 963              	.LCFI77:
 964              	 .cfi_def_cfa_offset 4
 965 004e BD46     	 mov sp,r7
 966              	.LCFI78:
 967              	 .cfi_def_cfa_register 13
 968              	 
 969 0050 5DF8047B 	 ldr r7,[sp],#4
 970              	.LCFI79:
 971              	 .cfi_restore 7
 972              	 .cfi_def_cfa_offset 0
 973 0054 7047     	 bx lr
 974              	.L57:
 975 0056 00BF     	 .align 2
 976              	.L56:
 977 0058 00400150 	 .word 1342259200
 978 005c 00490050 	 .word 1342195968
 979              	 .cfi_endproc
 980              	.LFE192:
 982              	 .section .text.XMC_DMA_ClearOverrunStatus,"ax",%progbits
 983              	 .align 2
 984              	 .global XMC_DMA_ClearOverrunStatus
 985              	 .thumb
 986              	 .thumb_func
 988              	XMC_DMA_ClearOverrunStatus:
 989              	.LFB193:
 292:../Libraries/XMCLib/src/xmc_dma.c **** 
 293:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear DMA DLR overrun status */
 294:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
 295:../Libraries/XMCLib/src/xmc_dma.c **** {
 990              	 .loc 2 295 0
 991              	 .cfi_startproc
 992              	 
 993              	 
 994              	 
 995 0000 80B4     	 push {r7}
 996              	.LCFI80:
 997              	 .cfi_def_cfa_offset 4
 998              	 .cfi_offset 7,-4
 999 0002 83B0     	 sub sp,sp,#12
 1000              	.LCFI81:
 1001              	 .cfi_def_cfa_offset 16
 1002 0004 00AF     	 add r7,sp,#0
 1003              	.LCFI82:
 1004              	 .cfi_def_cfa_register 7
 1005 0006 7860     	 str r0,[r7,#4]
 1006 0008 0B46     	 mov r3,r1
 1007 000a FB70     	 strb r3,[r7,#3]
 296:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 297:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 1008              	 .loc 2 297 0
 1009 000c 7B68     	 ldr r3,[r7,#4]
 1010 000e 0B4A     	 ldr r2,.L61
 1011 0010 9342     	 cmp r3,r2
 1012 0012 06D1     	 bne .L59
 298:../Libraries/XMCLib/src/xmc_dma.c ****   {
 299:../Libraries/XMCLib/src/xmc_dma.c **** #else
 300:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 301:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 302:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x1UL << line);
 1013              	 .loc 2 302 0
 1014 0014 0A4A     	 ldr r2,.L61+4
 1015 0016 FB78     	 ldrb r3,[r7,#3]
 1016 0018 0121     	 movs r1,#1
 1017 001a 01FA03F3 	 lsl r3,r1,r3
 1018 001e 5360     	 str r3,[r2,#4]
 1019 0020 06E0     	 b .L58
 1020              	.L59:
 303:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 304:../Libraries/XMCLib/src/xmc_dma.c ****   }
 305:../Libraries/XMCLib/src/xmc_dma.c ****   else
 306:../Libraries/XMCLib/src/xmc_dma.c ****   {
 307:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x100UL << line);
 1021              	 .loc 2 307 0
 1022 0022 074A     	 ldr r2,.L61+4
 1023 0024 FB78     	 ldrb r3,[r7,#3]
 1024 0026 4FF48071 	 mov r1,#256
 1025 002a 01FA03F3 	 lsl r3,r1,r3
 1026 002e 5360     	 str r3,[r2,#4]
 1027              	.L58:
 308:../Libraries/XMCLib/src/xmc_dma.c ****   }
 309:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 310:../Libraries/XMCLib/src/xmc_dma.c **** }
 1028              	 .loc 2 310 0
 1029 0030 0C37     	 adds r7,r7,#12
 1030              	.LCFI83:
 1031              	 .cfi_def_cfa_offset 4
 1032 0032 BD46     	 mov sp,r7
 1033              	.LCFI84:
 1034              	 .cfi_def_cfa_register 13
 1035              	 
 1036 0034 5DF8047B 	 ldr r7,[sp],#4
 1037              	.LCFI85:
 1038              	 .cfi_restore 7
 1039              	 .cfi_def_cfa_offset 0
 1040 0038 7047     	 bx lr
 1041              	.L62:
 1042 003a 00BF     	 .align 2
 1043              	.L61:
 1044 003c 00400150 	 .word 1342259200
 1045 0040 00490050 	 .word 1342195968
 1046              	 .cfi_endproc
 1047              	.LFE193:
 1049              	 .section .text.XMC_DMA_CH_Disable,"ax",%progbits
 1050              	 .align 2
 1051              	 .global XMC_DMA_CH_Disable
 1052              	 .thumb
 1053              	 .thumb_func
 1055              	XMC_DMA_CH_Disable:
 1056              	.LFB194:
 311:../Libraries/XMCLib/src/xmc_dma.c **** 
 312:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable DMA channel */
 313:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
 314:../Libraries/XMCLib/src/xmc_dma.c **** {
 1057              	 .loc 2 314 0
 1058              	 .cfi_startproc
 1059              	 
 1060              	 
 1061              	 
 1062 0000 80B4     	 push {r7}
 1063              	.LCFI86:
 1064              	 .cfi_def_cfa_offset 4
 1065              	 .cfi_offset 7,-4
 1066 0002 83B0     	 sub sp,sp,#12
 1067              	.LCFI87:
 1068              	 .cfi_def_cfa_offset 16
 1069 0004 00AF     	 add r7,sp,#0
 1070              	.LCFI88:
 1071              	 .cfi_def_cfa_register 7
 1072 0006 7860     	 str r0,[r7,#4]
 1073 0008 0B46     	 mov r3,r1
 1074 000a FB70     	 strb r3,[r7,#3]
 315:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CHENREG = (uint32_t)(0x100UL << channel);
 1075              	 .loc 2 315 0
 1076 000c FB78     	 ldrb r3,[r7,#3]
 1077 000e 4FF48072 	 mov r2,#256
 1078 0012 9A40     	 lsls r2,r2,r3
 1079 0014 7B68     	 ldr r3,[r7,#4]
 1080 0016 C3F8A023 	 str r2,[r3,#928]
 316:../Libraries/XMCLib/src/xmc_dma.c ****   while ((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 1081              	 .loc 2 316 0
 1082 001a 00BF     	 nop
 1083              	.L64:
 1084              	 .loc 2 316 0 is_stmt 0 discriminator 1
 1085 001c 7B68     	 ldr r3,[r7,#4]
 1086 001e D3F8A023 	 ldr r2,[r3,#928]
 1087 0022 FB78     	 ldrb r3,[r7,#3]
 1088 0024 22FA03F3 	 lsr r3,r2,r3
 1089 0028 03F00103 	 and r3,r3,#1
 1090 002c 002B     	 cmp r3,#0
 1091 002e F5D1     	 bne .L64
 317:../Libraries/XMCLib/src/xmc_dma.c ****   {
 318:../Libraries/XMCLib/src/xmc_dma.c ****     /* wait until channel is disabled */
 319:../Libraries/XMCLib/src/xmc_dma.c ****   }
 320:../Libraries/XMCLib/src/xmc_dma.c **** }
 1092              	 .loc 2 320 0 is_stmt 1
 1093 0030 0C37     	 adds r7,r7,#12
 1094              	.LCFI89:
 1095              	 .cfi_def_cfa_offset 4
 1096 0032 BD46     	 mov sp,r7
 1097              	.LCFI90:
 1098              	 .cfi_def_cfa_register 13
 1099              	 
 1100 0034 5DF8047B 	 ldr r7,[sp],#4
 1101              	.LCFI91:
 1102              	 .cfi_restore 7
 1103              	 .cfi_def_cfa_offset 0
 1104 0038 7047     	 bx lr
 1105              	 .cfi_endproc
 1106              	.LFE194:
 1108 003a 00BF     	 .section .text.XMC_DMA_CH_IsEnabled,"ax",%progbits
 1109              	 .align 2
 1110              	 .global XMC_DMA_CH_IsEnabled
 1111              	 .thumb
 1112              	 .thumb_func
 1114              	XMC_DMA_CH_IsEnabled:
 1115              	.LFB195:
 321:../Libraries/XMCLib/src/xmc_dma.c **** 
 322:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is enabled */
 323:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
 324:../Libraries/XMCLib/src/xmc_dma.c **** {
 1116              	 .loc 2 324 0
 1117              	 .cfi_startproc
 1118              	 
 1119              	 
 1120              	 
 1121 0000 80B4     	 push {r7}
 1122              	.LCFI92:
 1123              	 .cfi_def_cfa_offset 4
 1124              	 .cfi_offset 7,-4
 1125 0002 83B0     	 sub sp,sp,#12
 1126              	.LCFI93:
 1127              	 .cfi_def_cfa_offset 16
 1128 0004 00AF     	 add r7,sp,#0
 1129              	.LCFI94:
 1130              	 .cfi_def_cfa_register 7
 1131 0006 7860     	 str r0,[r7,#4]
 1132 0008 0B46     	 mov r3,r1
 1133 000a FB70     	 strb r3,[r7,#3]
 325:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 1134              	 .loc 2 325 0
 1135 000c 7B68     	 ldr r3,[r7,#4]
 1136 000e D3F8A023 	 ldr r2,[r3,#928]
 1137 0012 FB78     	 ldrb r3,[r7,#3]
 1138 0014 22FA03F3 	 lsr r3,r2,r3
 1139 0018 03F00103 	 and r3,r3,#1
 1140 001c 002B     	 cmp r3,#0
 1141 001e 14BF     	 ite ne
 1142 0020 0123     	 movne r3,#1
 1143 0022 0023     	 moveq r3,#0
 1144 0024 DBB2     	 uxtb r3,r3
 326:../Libraries/XMCLib/src/xmc_dma.c **** }
 1145              	 .loc 2 326 0
 1146 0026 1846     	 mov r0,r3
 1147 0028 0C37     	 adds r7,r7,#12
 1148              	.LCFI95:
 1149              	 .cfi_def_cfa_offset 4
 1150 002a BD46     	 mov sp,r7
 1151              	.LCFI96:
 1152              	 .cfi_def_cfa_register 13
 1153              	 
 1154 002c 5DF8047B 	 ldr r7,[sp],#4
 1155              	.LCFI97:
 1156              	 .cfi_restore 7
 1157              	 .cfi_def_cfa_offset 0
 1158 0030 7047     	 bx lr
 1159              	 .cfi_endproc
 1160              	.LFE195:
 1162 0032 00BF     	 .section .text.XMC_DMA_CH_Init,"ax",%progbits
 1163              	 .align 2
 1164              	 .global XMC_DMA_CH_Init
 1165              	 .thumb
 1166              	 .thumb_func
 1168              	XMC_DMA_CH_Init:
 1169              	.LFB196:
 327:../Libraries/XMCLib/src/xmc_dma.c **** 
 328:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize DMA channel */
 329:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 330:../Libraries/XMCLib/src/xmc_dma.c **** {
 1170              	 .loc 2 330 0
 1171              	 .cfi_startproc
 1172              	 
 1173              	 
 1174 0000 80B5     	 push {r7,lr}
 1175              	.LCFI98:
 1176              	 .cfi_def_cfa_offset 8
 1177              	 .cfi_offset 7,-8
 1178              	 .cfi_offset 14,-4
 1179 0002 86B0     	 sub sp,sp,#24
 1180              	.LCFI99:
 1181              	 .cfi_def_cfa_offset 32
 1182 0004 00AF     	 add r7,sp,#0
 1183              	.LCFI100:
 1184              	 .cfi_def_cfa_register 7
 1185 0006 F860     	 str r0,[r7,#12]
 1186 0008 0B46     	 mov r3,r1
 1187 000a 7A60     	 str r2,[r7,#4]
 1188 000c FB72     	 strb r3,[r7,#11]
 331:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 332:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t line;
 333:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t peripheral;
 334:../Libraries/XMCLib/src/xmc_dma.c **** 
 335:../Libraries/XMCLib/src/xmc_dma.c ****   if (XMC_DMA_IsEnabled(dma) == true)
 1189              	 .loc 2 335 0
 1190 000e F868     	 ldr r0,[r7,#12]
 1191 0010 FFF7FEFF 	 bl XMC_DMA_IsEnabled
 1192 0014 0346     	 mov r3,r0
 1193 0016 002B     	 cmp r3,#0
 1194 0018 00F0F181 	 beq .L68
 336:../Libraries/XMCLib/src/xmc_dma.c ****   {
 337:../Libraries/XMCLib/src/xmc_dma.c ****     if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 1195              	 .loc 2 337 0
 1196 001c FB7A     	 ldrb r3,[r7,#11]
 1197 001e F868     	 ldr r0,[r7,#12]
 1198 0020 1946     	 mov r1,r3
 1199 0022 FFF7FEFF 	 bl XMC_DMA_CH_IsEnabled
 1200 0026 0346     	 mov r3,r0
 1201 0028 83F00103 	 eor r3,r3,#1
 1202 002c DBB2     	 uxtb r3,r3
 1203 002e 002B     	 cmp r3,#0
 1204 0030 00F0E281 	 beq .L69
 338:../Libraries/XMCLib/src/xmc_dma.c ****     {
 339:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].SAR = config->src_addr;
 1205              	 .loc 2 339 0
 1206 0034 FB7A     	 ldrb r3,[r7,#11]
 1207 0036 7A68     	 ldr r2,[r7,#4]
 1208 0038 5268     	 ldr r2,[r2,#4]
 1209 003a F968     	 ldr r1,[r7,#12]
 1210 003c 5820     	 movs r0,#88
 1211 003e 00FB03F3 	 mul r3,r0,r3
 1212 0042 0B44     	 add r3,r3,r1
 1213 0044 1A60     	 str r2,[r3]
 340:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 1214              	 .loc 2 340 0
 1215 0046 FB7A     	 ldrb r3,[r7,#11]
 1216 0048 7A68     	 ldr r2,[r7,#4]
 1217 004a 9268     	 ldr r2,[r2,#8]
 1218 004c F968     	 ldr r1,[r7,#12]
 1219 004e 5820     	 movs r0,#88
 1220 0050 00FB03F3 	 mul r3,r0,r3
 1221 0054 0B44     	 add r3,r3,r1
 1222 0056 0833     	 adds r3,r3,#8
 1223 0058 1A60     	 str r2,[r3]
 341:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 1224              	 .loc 2 341 0
 1225 005a FB7A     	 ldrb r3,[r7,#11]
 1226 005c 7A68     	 ldr r2,[r7,#4]
 1227 005e D268     	 ldr r2,[r2,#12]
 1228 0060 1046     	 mov r0,r2
 1229 0062 FA68     	 ldr r2,[r7,#12]
 1230 0064 5821     	 movs r1,#88
 1231 0066 01FB03F3 	 mul r3,r1,r3
 1232 006a 1344     	 add r3,r3,r2
 1233 006c 1033     	 adds r3,r3,#16
 1234 006e 1860     	 str r0,[r3]
 342:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 1235              	 .loc 2 342 0
 1236 0070 FB7A     	 ldrb r3,[r7,#11]
 1237 0072 7A68     	 ldr r2,[r7,#4]
 1238 0074 128B     	 ldrh r2,[r2,#24]
 1239 0076 1046     	 mov r0,r2
 1240 0078 FA68     	 ldr r2,[r7,#12]
 1241 007a 5821     	 movs r1,#88
 1242 007c 01FB03F3 	 mul r3,r1,r3
 1243 0080 1344     	 add r3,r3,r2
 1244 0082 1833     	 adds r3,r3,#24
 1245 0084 5860     	 str r0,[r3,#4]
 343:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 1246              	 .loc 2 343 0
 1247 0086 FB7A     	 ldrb r3,[r7,#11]
 1248 0088 7A68     	 ldr r2,[r7,#4]
 1249 008a 1268     	 ldr r2,[r2]
 1250 008c F968     	 ldr r1,[r7,#12]
 1251 008e 5820     	 movs r0,#88
 1252 0090 00FB03F3 	 mul r3,r0,r3
 1253 0094 0B44     	 add r3,r3,r1
 1254 0096 1833     	 adds r3,r3,#24
 1255 0098 1A60     	 str r2,[r3]
 344:../Libraries/XMCLib/src/xmc_dma.c **** 
 345:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 1256              	 .loc 2 345 0
 1257 009a FB7A     	 ldrb r3,[r7,#11]
 1258 009c 7A68     	 ldr r2,[r7,#4]
 1259 009e D27E     	 ldrb r2,[r2,#27]
 1260 00a0 42F44062 	 orr r2,r2,#3072
 1261 00a4 F968     	 ldr r1,[r7,#12]
 1262 00a6 5820     	 movs r0,#88
 1263 00a8 00FB03F3 	 mul r3,r0,r3
 1264 00ac 0B44     	 add r3,r3,r1
 1265 00ae 4033     	 adds r3,r3,#64
 1266 00b0 1A60     	 str r2,[r3]
 346:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 347:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);
 348:../Libraries/XMCLib/src/xmc_dma.c **** 
 349:../Libraries/XMCLib/src/xmc_dma.c ****       if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 1267              	 .loc 2 349 0
 1268 00b2 FB68     	 ldr r3,[r7,#12]
 1269 00b4 B14A     	 ldr r2,.L95
 1270 00b6 9342     	 cmp r3,r2
 1271 00b8 16D1     	 bne .L70
 1272              	 .loc 2 349 0 is_stmt 0 discriminator 1
 1273 00ba FB7A     	 ldrb r3,[r7,#11]
 1274 00bc 012B     	 cmp r3,#1
 1275 00be 13D8     	 bhi .L70
 350:../Libraries/XMCLib/src/xmc_dma.c ****       {
 351:../Libraries/XMCLib/src/xmc_dma.c ****         /* Configure scatter and gather */
 352:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].SGR = config->src_gather_control;
 1276              	 .loc 2 352 0 is_stmt 1
 1277 00c0 FB7A     	 ldrb r3,[r7,#11]
 1278 00c2 7A68     	 ldr r2,[r7,#4]
 1279 00c4 1269     	 ldr r2,[r2,#16]
 1280 00c6 F968     	 ldr r1,[r7,#12]
 1281 00c8 5820     	 movs r0,#88
 1282 00ca 00FB03F3 	 mul r3,r0,r3
 1283 00ce 0B44     	 add r3,r3,r1
 1284 00d0 4833     	 adds r3,r3,#72
 1285 00d2 1A60     	 str r2,[r3]
 353:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 1286              	 .loc 2 353 0
 1287 00d4 FB7A     	 ldrb r3,[r7,#11]
 1288 00d6 7A68     	 ldr r2,[r7,#4]
 1289 00d8 5269     	 ldr r2,[r2,#20]
 1290 00da F968     	 ldr r1,[r7,#12]
 1291 00dc 5820     	 movs r0,#88
 1292 00de 00FB03F3 	 mul r3,r0,r3
 1293 00e2 0B44     	 add r3,r3,r1
 1294 00e4 5033     	 adds r3,r3,#80
 1295 00e6 1A60     	 str r2,[r3]
 1296              	.L70:
 354:../Libraries/XMCLib/src/xmc_dma.c ****       }
 355:../Libraries/XMCLib/src/xmc_dma.c **** 
 356:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 1297              	 .loc 2 356 0
 1298 00e8 7B68     	 ldr r3,[r7,#4]
 1299 00ea 1B8C     	 ldrh r3,[r3,#32]
 1300 00ec 002B     	 cmp r3,#0
 1301 00ee 4FD1     	 bne .L71
 357:../Libraries/XMCLib/src/xmc_dma.c ****       {
 358:../Libraries/XMCLib/src/xmc_dma.c ****         /* Hardware handshaking interface configuration */
 359:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 1302              	 .loc 2 359 0
 1303 00f0 7B68     	 ldr r3,[r7,#4]
 1304 00f2 9B78     	 ldrb r3,[r3,#2]
 1305 00f4 03F07003 	 and r3,r3,#112
 1306 00f8 DBB2     	 uxtb r3,r3
 1307 00fa 102B     	 cmp r3,#16
 1308 00fc 06D0     	 beq .L72
 360:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1309              	 .loc 2 360 0 discriminator 1
 1310 00fe 7B68     	 ldr r3,[r7,#4]
 1311 0100 9B78     	 ldrb r3,[r3,#2]
 1312 0102 03F07003 	 and r3,r3,#112
 1313 0106 DBB2     	 uxtb r3,r3
 359:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1314              	 .loc 2 359 0 discriminator 1
 1315 0108 302B     	 cmp r3,#48
 1316 010a 41D1     	 bne .L71
 1317              	.L72:
 361:../Libraries/XMCLib/src/xmc_dma.c ****         {
 362:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 363:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1318              	 .loc 2 363 0
 1319 010c FB68     	 ldr r3,[r7,#12]
 1320 010e 9B4A     	 ldr r2,.L95
 1321 0110 9342     	 cmp r3,r2
 1322 0112 06D1     	 bne .L73
 364:../Libraries/XMCLib/src/xmc_dma.c ****           {
 365:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 366:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1323              	 .loc 2 366 0
 1324 0114 7B68     	 ldr r3,[r7,#4]
 1325 0116 93F82230 	 ldrb r3,[r3,#34]
 1326 011a 03F00703 	 and r3,r3,#7
 1327 011e BB75     	 strb r3,[r7,#22]
 1328 0120 05E0     	 b .L74
 1329              	.L73:
 367:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 368:../Libraries/XMCLib/src/xmc_dma.c ****           }
 369:../Libraries/XMCLib/src/xmc_dma.c ****           else
 370:../Libraries/XMCLib/src/xmc_dma.c ****           {
 371:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1330              	 .loc 2 371 0
 1331 0122 7B68     	 ldr r3,[r7,#4]
 1332 0124 93F82230 	 ldrb r3,[r3,#34]
 1333 0128 03F00303 	 and r3,r3,#3
 1334 012c BB75     	 strb r3,[r7,#22]
 1335              	.L74:
 372:../Libraries/XMCLib/src/xmc_dma.c ****           }
 373:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 374:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1336              	 .loc 2 374 0
 1337 012e 7B68     	 ldr r3,[r7,#4]
 1338 0130 93F82230 	 ldrb r3,[r3,#34]
 1339 0134 1B09     	 lsrs r3,r3,#4
 1340 0136 7B75     	 strb r3,[r7,#21]
 375:../Libraries/XMCLib/src/xmc_dma.c **** 
 376:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 1341              	 .loc 2 376 0
 1342 0138 FB7A     	 ldrb r3,[r7,#11]
 1343 013a FA7A     	 ldrb r2,[r7,#11]
 1344 013c F968     	 ldr r1,[r7,#12]
 1345 013e 5820     	 movs r0,#88
 1346 0140 00FB02F2 	 mul r2,r0,r2
 1347 0144 0A44     	 add r2,r2,r1
 1348 0146 4032     	 adds r2,r2,#64
 1349 0148 5168     	 ldr r1,[r2,#4]
 1350 014a BA7D     	 ldrb r2,[r7,#22]
 1351 014c D202     	 lsls r2,r2,#11
 1352 014e 0A43     	 orrs r2,r2,r1
 1353 0150 F968     	 ldr r1,[r7,#12]
 1354 0152 5820     	 movs r0,#88
 1355 0154 00FB03F3 	 mul r3,r0,r3
 1356 0158 0B44     	 add r3,r3,r1
 1357 015a 4033     	 adds r3,r3,#64
 1358 015c 5A60     	 str r2,[r3,#4]
 377:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1359              	 .loc 2 377 0
 1360 015e BA7D     	 ldrb r2,[r7,#22]
 1361 0160 7B7D     	 ldrb r3,[r7,#21]
 1362 0162 F868     	 ldr r0,[r7,#12]
 1363 0164 1146     	 mov r1,r2
 1364 0166 1A46     	 mov r2,r3
 1365 0168 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 378:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 1366              	 .loc 2 378 0
 1367 016c FB7A     	 ldrb r3,[r7,#11]
 1368 016e FA7A     	 ldrb r2,[r7,#11]
 1369 0170 F968     	 ldr r1,[r7,#12]
 1370 0172 5820     	 movs r0,#88
 1371 0174 00FB02F2 	 mul r2,r0,r2
 1372 0178 0A44     	 add r2,r2,r1
 1373 017a 4032     	 adds r2,r2,#64
 1374 017c 1268     	 ldr r2,[r2]
 1375 017e 22F48062 	 bic r2,r2,#1024
 1376 0182 F968     	 ldr r1,[r7,#12]
 1377 0184 5820     	 movs r0,#88
 1378 0186 00FB03F3 	 mul r3,r0,r3
 1379 018a 0B44     	 add r3,r3,r1
 1380 018c 4033     	 adds r3,r3,#64
 1381 018e 1A60     	 str r2,[r3]
 1382              	.L71:
 379:../Libraries/XMCLib/src/xmc_dma.c ****         }
 380:../Libraries/XMCLib/src/xmc_dma.c ****       }
 381:../Libraries/XMCLib/src/xmc_dma.c **** 
 382:../Libraries/XMCLib/src/xmc_dma.c **** 
 383:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 1383              	 .loc 2 383 0
 1384 0190 7B68     	 ldr r3,[r7,#4]
 1385 0192 9B8B     	 ldrh r3,[r3,#28]
 1386 0194 002B     	 cmp r3,#0
 1387 0196 4CD1     	 bne .L75
 384:../Libraries/XMCLib/src/xmc_dma.c ****       {
 385:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 1388              	 .loc 2 385 0
 1389 0198 7B68     	 ldr r3,[r7,#4]
 1390 019a 9B78     	 ldrb r3,[r3,#2]
 1391 019c 03F07003 	 and r3,r3,#112
 1392 01a0 DBB2     	 uxtb r3,r3
 1393 01a2 202B     	 cmp r3,#32
 1394 01a4 06D0     	 beq .L76
 386:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1395              	 .loc 2 386 0 discriminator 1
 1396 01a6 7B68     	 ldr r3,[r7,#4]
 1397 01a8 9B78     	 ldrb r3,[r3,#2]
 1398 01aa 03F07003 	 and r3,r3,#112
 1399 01ae DBB2     	 uxtb r3,r3
 385:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1400              	 .loc 2 385 0 discriminator 1
 1401 01b0 302B     	 cmp r3,#48
 1402 01b2 3ED1     	 bne .L75
 1403              	.L76:
 387:../Libraries/XMCLib/src/xmc_dma.c ****         {
 388:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 389:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1404              	 .loc 2 389 0
 1405 01b4 FB68     	 ldr r3,[r7,#12]
 1406 01b6 714A     	 ldr r2,.L95
 1407 01b8 9342     	 cmp r3,r2
 1408 01ba 05D1     	 bne .L77
 390:../Libraries/XMCLib/src/xmc_dma.c ****           {
 391:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 392:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1409              	 .loc 2 392 0
 1410 01bc 7B68     	 ldr r3,[r7,#4]
 1411 01be 9B7F     	 ldrb r3,[r3,#30]
 1412 01c0 03F00703 	 and r3,r3,#7
 1413 01c4 BB75     	 strb r3,[r7,#22]
 1414 01c6 04E0     	 b .L78
 1415              	.L77:
 393:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 394:../Libraries/XMCLib/src/xmc_dma.c ****           }
 395:../Libraries/XMCLib/src/xmc_dma.c ****           else
 396:../Libraries/XMCLib/src/xmc_dma.c ****           {
 397:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1416              	 .loc 2 397 0
 1417 01c8 7B68     	 ldr r3,[r7,#4]
 1418 01ca 9B7F     	 ldrb r3,[r3,#30]
 1419 01cc 03F00303 	 and r3,r3,#3
 1420 01d0 BB75     	 strb r3,[r7,#22]
 1421              	.L78:
 398:../Libraries/XMCLib/src/xmc_dma.c ****           }
 399:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 400:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1422              	 .loc 2 400 0
 1423 01d2 7B68     	 ldr r3,[r7,#4]
 1424 01d4 9B7F     	 ldrb r3,[r3,#30]
 1425 01d6 1B09     	 lsrs r3,r3,#4
 1426 01d8 7B75     	 strb r3,[r7,#21]
 401:../Libraries/XMCLib/src/xmc_dma.c **** 
 402:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 1427              	 .loc 2 402 0
 1428 01da FB7A     	 ldrb r3,[r7,#11]
 1429 01dc FA7A     	 ldrb r2,[r7,#11]
 1430 01de F968     	 ldr r1,[r7,#12]
 1431 01e0 5820     	 movs r0,#88
 1432 01e2 00FB02F2 	 mul r2,r0,r2
 1433 01e6 0A44     	 add r2,r2,r1
 1434 01e8 4032     	 adds r2,r2,#64
 1435 01ea 5168     	 ldr r1,[r2,#4]
 1436 01ec BA7D     	 ldrb r2,[r7,#22]
 1437 01ee D201     	 lsls r2,r2,#7
 1438 01f0 0A43     	 orrs r2,r2,r1
 1439 01f2 F968     	 ldr r1,[r7,#12]
 1440 01f4 5820     	 movs r0,#88
 1441 01f6 00FB03F3 	 mul r3,r0,r3
 1442 01fa 0B44     	 add r3,r3,r1
 1443 01fc 4033     	 adds r3,r3,#64
 1444 01fe 5A60     	 str r2,[r3,#4]
 403:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1445              	 .loc 2 403 0
 1446 0200 BA7D     	 ldrb r2,[r7,#22]
 1447 0202 7B7D     	 ldrb r3,[r7,#21]
 1448 0204 F868     	 ldr r0,[r7,#12]
 1449 0206 1146     	 mov r1,r2
 1450 0208 1A46     	 mov r2,r3
 1451 020a FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 404:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 1452              	 .loc 2 404 0
 1453 020e FB7A     	 ldrb r3,[r7,#11]
 1454 0210 FA7A     	 ldrb r2,[r7,#11]
 1455 0212 F968     	 ldr r1,[r7,#12]
 1456 0214 5820     	 movs r0,#88
 1457 0216 00FB02F2 	 mul r2,r0,r2
 1458 021a 0A44     	 add r2,r2,r1
 1459 021c 4032     	 adds r2,r2,#64
 1460 021e 1268     	 ldr r2,[r2]
 1461 0220 22F40062 	 bic r2,r2,#2048
 1462 0224 F968     	 ldr r1,[r7,#12]
 1463 0226 5820     	 movs r0,#88
 1464 0228 00FB03F3 	 mul r3,r0,r3
 1465 022c 0B44     	 add r3,r3,r1
 1466 022e 4033     	 adds r3,r3,#64
 1467 0230 1A60     	 str r2,[r3]
 1468              	.L75:
 405:../Libraries/XMCLib/src/xmc_dma.c ****         }
 406:../Libraries/XMCLib/src/xmc_dma.c ****       }
 407:../Libraries/XMCLib/src/xmc_dma.c **** 
 408:../Libraries/XMCLib/src/xmc_dma.c ****       XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMP
 1469              	 .loc 2 408 0
 1470 0232 FB7A     	 ldrb r3,[r7,#11]
 1471 0234 F868     	 ldr r0,[r7,#12]
 1472 0236 1946     	 mov r1,r3
 1473 0238 1F22     	 movs r2,#31
 1474 023a FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 409:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 410:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
 411:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
 412:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_ERROR));
 413:../Libraries/XMCLib/src/xmc_dma.c **** 
 414:../Libraries/XMCLib/src/xmc_dma.c ****       switch (config->transfer_type)
 1475              	 .loc 2 414 0
 1476 023e 7B68     	 ldr r3,[r7,#4]
 1477 0240 9B7E     	 ldrb r3,[r3,#26]
 1478 0242 082B     	 cmp r3,#8
 1479 0244 00F2D480 	 bhi .L94
 1480 0248 01A2     	 adr r2,.L81
 1481 024a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1482 024e 00BF     	 .p2align 2
 1483              	.L81:
 1484 0250 F1030000 	 .word .L94+1
 1485 0254 75020000 	 .word .L82+1
 1486 0258 9B020000 	 .word .L83+1
 1487 025c C1020000 	 .word .L84+1
 1488 0260 E7020000 	 .word .L85+1
 1489 0264 0D030000 	 .word .L86+1
 1490 0268 57030000 	 .word .L87+1
 1491 026c 81030000 	 .word .L88+1
 1492 0270 CB030000 	 .word .L89+1
 1493              	 .p2align 1
 1494              	.L82:
 415:../Libraries/XMCLib/src/xmc_dma.c ****       {
 416:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
 417:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 418:../Libraries/XMCLib/src/xmc_dma.c **** 
 419:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
 420:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1495              	 .loc 2 420 0
 1496 0274 FB7A     	 ldrb r3,[r7,#11]
 1497 0276 FA7A     	 ldrb r2,[r7,#11]
 1498 0278 F968     	 ldr r1,[r7,#12]
 1499 027a 5820     	 movs r0,#88
 1500 027c 00FB02F2 	 mul r2,r0,r2
 1501 0280 0A44     	 add r2,r2,r1
 1502 0282 4032     	 adds r2,r2,#64
 1503 0284 1268     	 ldr r2,[r2]
 1504 0286 42F00042 	 orr r2,r2,#-2147483648
 1505 028a F968     	 ldr r1,[r7,#12]
 1506 028c 5820     	 movs r0,#88
 1507 028e 00FB03F3 	 mul r3,r0,r3
 1508 0292 0B44     	 add r3,r3,r1
 1509 0294 4033     	 adds r3,r3,#64
 1510 0296 1A60     	 str r2,[r3]
 421:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1511              	 .loc 2 421 0
 1512 0298 ABE0     	 b .L90
 1513              	.L83:
 422:../Libraries/XMCLib/src/xmc_dma.c **** 
 423:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
 424:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1514              	 .loc 2 424 0
 1515 029a FB7A     	 ldrb r3,[r7,#11]
 1516 029c FA7A     	 ldrb r2,[r7,#11]
 1517 029e F968     	 ldr r1,[r7,#12]
 1518 02a0 5820     	 movs r0,#88
 1519 02a2 00FB02F2 	 mul r2,r0,r2
 1520 02a6 0A44     	 add r2,r2,r1
 1521 02a8 4032     	 adds r2,r2,#64
 1522 02aa 1268     	 ldr r2,[r2]
 1523 02ac 42F08042 	 orr r2,r2,#1073741824
 1524 02b0 F968     	 ldr r1,[r7,#12]
 1525 02b2 5820     	 movs r0,#88
 1526 02b4 00FB03F3 	 mul r3,r0,r3
 1527 02b8 0B44     	 add r3,r3,r1
 1528 02ba 4033     	 adds r3,r3,#64
 1529 02bc 1A60     	 str r2,[r3]
 425:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1530              	 .loc 2 425 0
 1531 02be 98E0     	 b .L90
 1532              	.L84:
 426:../Libraries/XMCLib/src/xmc_dma.c **** 
 427:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
 428:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 1533              	 .loc 2 428 0
 1534 02c0 FB7A     	 ldrb r3,[r7,#11]
 1535 02c2 FA7A     	 ldrb r2,[r7,#11]
 1536 02c4 F968     	 ldr r1,[r7,#12]
 1537 02c6 5820     	 movs r0,#88
 1538 02c8 00FB02F2 	 mul r2,r0,r2
 1539 02cc 0A44     	 add r2,r2,r1
 1540 02ce 4032     	 adds r2,r2,#64
 1541 02d0 1268     	 ldr r2,[r2]
 1542 02d2 42F04042 	 orr r2,r2,#-1073741824
 1543 02d6 F968     	 ldr r1,[r7,#12]
 1544 02d8 5820     	 movs r0,#88
 1545 02da 00FB03F3 	 mul r3,r0,r3
 1546 02de 0B44     	 add r3,r3,r1
 1547 02e0 4033     	 adds r3,r3,#64
 1548 02e2 1A60     	 str r2,[r3]
 429:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 430:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1549              	 .loc 2 430 0
 1550 02e4 85E0     	 b .L90
 1551              	.L85:
 431:../Libraries/XMCLib/src/xmc_dma.c **** 
 432:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
 433:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1552              	 .loc 2 433 0
 1553 02e6 FB7A     	 ldrb r3,[r7,#11]
 1554 02e8 FA7A     	 ldrb r2,[r7,#11]
 1555 02ea F968     	 ldr r1,[r7,#12]
 1556 02ec 5820     	 movs r0,#88
 1557 02ee 00FB02F2 	 mul r2,r0,r2
 1558 02f2 0A44     	 add r2,r2,r1
 1559 02f4 1832     	 adds r2,r2,#24
 1560 02f6 1268     	 ldr r2,[r2]
 1561 02f8 42F00062 	 orr r2,r2,#134217728
 1562 02fc F968     	 ldr r1,[r7,#12]
 1563 02fe 5820     	 movs r0,#88
 1564 0300 00FB03F3 	 mul r3,r0,r3
 1565 0304 0B44     	 add r3,r3,r1
 1566 0306 1833     	 adds r3,r3,#24
 1567 0308 1A60     	 str r2,[r3]
 434:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1568              	 .loc 2 434 0
 1569 030a 72E0     	 b .L90
 1570              	.L86:
 435:../Libraries/XMCLib/src/xmc_dma.c **** 
 436:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
 437:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1571              	 .loc 2 437 0
 1572 030c FB7A     	 ldrb r3,[r7,#11]
 1573 030e FA7A     	 ldrb r2,[r7,#11]
 1574 0310 F968     	 ldr r1,[r7,#12]
 1575 0312 5820     	 movs r0,#88
 1576 0314 00FB02F2 	 mul r2,r0,r2
 1577 0318 0A44     	 add r2,r2,r1
 1578 031a 4032     	 adds r2,r2,#64
 1579 031c 1268     	 ldr r2,[r2]
 1580 031e 42F08042 	 orr r2,r2,#1073741824
 1581 0322 F968     	 ldr r1,[r7,#12]
 1582 0324 5820     	 movs r0,#88
 1583 0326 00FB03F3 	 mul r3,r0,r3
 1584 032a 0B44     	 add r3,r3,r1
 1585 032c 4033     	 adds r3,r3,#64
 1586 032e 1A60     	 str r2,[r3]
 438:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1587              	 .loc 2 438 0
 1588 0330 FB7A     	 ldrb r3,[r7,#11]
 1589 0332 FA7A     	 ldrb r2,[r7,#11]
 1590 0334 F968     	 ldr r1,[r7,#12]
 1591 0336 5820     	 movs r0,#88
 1592 0338 00FB02F2 	 mul r2,r0,r2
 1593 033c 0A44     	 add r2,r2,r1
 1594 033e 1832     	 adds r2,r2,#24
 1595 0340 1268     	 ldr r2,[r2]
 1596 0342 42F00062 	 orr r2,r2,#134217728
 1597 0346 F968     	 ldr r1,[r7,#12]
 1598 0348 5820     	 movs r0,#88
 1599 034a 00FB03F3 	 mul r3,r0,r3
 1600 034e 0B44     	 add r3,r3,r1
 1601 0350 1833     	 adds r3,r3,#24
 1602 0352 1A60     	 str r2,[r3]
 439:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1603              	 .loc 2 439 0
 1604 0354 4DE0     	 b .L90
 1605              	.L87:
 440:../Libraries/XMCLib/src/xmc_dma.c **** 
 441:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
 442:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1606              	 .loc 2 442 0
 1607 0356 FB7A     	 ldrb r3,[r7,#11]
 1608 0358 FA7A     	 ldrb r2,[r7,#11]
 1609 035a F968     	 ldr r1,[r7,#12]
 1610 035c 5820     	 movs r0,#88
 1611 035e 00FB02F2 	 mul r2,r0,r2
 1612 0362 0A44     	 add r2,r2,r1
 1613 0364 1832     	 adds r2,r2,#24
 1614 0366 1268     	 ldr r2,[r2]
 1615 0368 42F08052 	 orr r2,r2,#268435456
 1616 036c F968     	 ldr r1,[r7,#12]
 1617 036e 5820     	 movs r0,#88
 1618 0370 00FB03F3 	 mul r3,r0,r3
 1619 0374 0B44     	 add r3,r3,r1
 1620 0376 1833     	 adds r3,r3,#24
 1621 0378 1A60     	 str r2,[r3]
 443:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1622              	 .loc 2 443 0
 1623 037a 3AE0     	 b .L90
 1624              	.L96:
 1625              	 .align 2
 1626              	.L95:
 1627 037c 00400150 	 .word 1342259200
 1628              	.L88:
 444:../Libraries/XMCLib/src/xmc_dma.c **** 
 445:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
 446:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1629              	 .loc 2 446 0
 1630 0380 FB7A     	 ldrb r3,[r7,#11]
 1631 0382 FA7A     	 ldrb r2,[r7,#11]
 1632 0384 F968     	 ldr r1,[r7,#12]
 1633 0386 5820     	 movs r0,#88
 1634 0388 00FB02F2 	 mul r2,r0,r2
 1635 038c 0A44     	 add r2,r2,r1
 1636 038e 4032     	 adds r2,r2,#64
 1637 0390 1268     	 ldr r2,[r2]
 1638 0392 42F00042 	 orr r2,r2,#-2147483648
 1639 0396 F968     	 ldr r1,[r7,#12]
 1640 0398 5820     	 movs r0,#88
 1641 039a 00FB03F3 	 mul r3,r0,r3
 1642 039e 0B44     	 add r3,r3,r1
 1643 03a0 4033     	 adds r3,r3,#64
 1644 03a2 1A60     	 str r2,[r3]
 447:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1645              	 .loc 2 447 0
 1646 03a4 FB7A     	 ldrb r3,[r7,#11]
 1647 03a6 FA7A     	 ldrb r2,[r7,#11]
 1648 03a8 F968     	 ldr r1,[r7,#12]
 1649 03aa 5820     	 movs r0,#88
 1650 03ac 00FB02F2 	 mul r2,r0,r2
 1651 03b0 0A44     	 add r2,r2,r1
 1652 03b2 1832     	 adds r2,r2,#24
 1653 03b4 1268     	 ldr r2,[r2]
 1654 03b6 42F08052 	 orr r2,r2,#268435456
 1655 03ba F968     	 ldr r1,[r7,#12]
 1656 03bc 5820     	 movs r0,#88
 1657 03be 00FB03F3 	 mul r3,r0,r3
 1658 03c2 0B44     	 add r3,r3,r1
 1659 03c4 1833     	 adds r3,r3,#24
 1660 03c6 1A60     	 str r2,[r3]
 448:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1661              	 .loc 2 448 0
 1662 03c8 13E0     	 b .L90
 1663              	.L89:
 449:../Libraries/XMCLib/src/xmc_dma.c **** 
 450:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
 451:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 1664              	 .loc 2 451 0
 1665 03ca FB7A     	 ldrb r3,[r7,#11]
 1666 03cc FA7A     	 ldrb r2,[r7,#11]
 1667 03ce F968     	 ldr r1,[r7,#12]
 1668 03d0 5820     	 movs r0,#88
 1669 03d2 00FB02F2 	 mul r2,r0,r2
 1670 03d6 0A44     	 add r2,r2,r1
 1671 03d8 1832     	 adds r2,r2,#24
 1672 03da 1268     	 ldr r2,[r2]
 1673 03dc 42F0C052 	 orr r2,r2,#402653184
 1674 03e0 F968     	 ldr r1,[r7,#12]
 1675 03e2 5820     	 movs r0,#88
 1676 03e4 00FB03F3 	 mul r3,r0,r3
 1677 03e8 0B44     	 add r3,r3,r1
 1678 03ea 1833     	 adds r3,r3,#24
 1679 03ec 1A60     	 str r2,[r3]
 452:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 453:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1680              	 .loc 2 453 0
 1681 03ee 00E0     	 b .L90
 1682              	.L94:
 454:../Libraries/XMCLib/src/xmc_dma.c **** 
 455:../Libraries/XMCLib/src/xmc_dma.c ****         default:
 456:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1683              	 .loc 2 456 0
 1684 03f0 00BF     	 nop
 1685              	.L90:
 457:../Libraries/XMCLib/src/xmc_dma.c ****       }
 458:../Libraries/XMCLib/src/xmc_dma.c **** 
 459:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_OK;
 1686              	 .loc 2 459 0
 1687 03f2 0023     	 movs r3,#0
 1688 03f4 FB75     	 strb r3,[r7,#23]
 1689 03f6 04E0     	 b .L92
 1690              	.L69:
 460:../Libraries/XMCLib/src/xmc_dma.c **** 
 461:../Libraries/XMCLib/src/xmc_dma.c ****     }
 462:../Libraries/XMCLib/src/xmc_dma.c ****     else
 463:../Libraries/XMCLib/src/xmc_dma.c ****     {
 464:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_BUSY;
 1691              	 .loc 2 464 0
 1692 03f8 0223     	 movs r3,#2
 1693 03fa FB75     	 strb r3,[r7,#23]
 1694 03fc 01E0     	 b .L92
 1695              	.L68:
 465:../Libraries/XMCLib/src/xmc_dma.c ****     }
 466:../Libraries/XMCLib/src/xmc_dma.c ****   }
 467:../Libraries/XMCLib/src/xmc_dma.c ****   else
 468:../Libraries/XMCLib/src/xmc_dma.c ****   {
 469:../Libraries/XMCLib/src/xmc_dma.c ****     status = XMC_DMA_CH_STATUS_ERROR;
 1696              	 .loc 2 469 0
 1697 03fe 0123     	 movs r3,#1
 1698 0400 FB75     	 strb r3,[r7,#23]
 1699              	.L92:
 470:../Libraries/XMCLib/src/xmc_dma.c ****   }
 471:../Libraries/XMCLib/src/xmc_dma.c **** 
 472:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 1700              	 .loc 2 472 0
 1701 0402 FB7D     	 ldrb r3,[r7,#23]
 473:../Libraries/XMCLib/src/xmc_dma.c **** }
 1702              	 .loc 2 473 0
 1703 0404 1846     	 mov r0,r3
 1704 0406 1837     	 adds r7,r7,#24
 1705              	.LCFI101:
 1706              	 .cfi_def_cfa_offset 8
 1707 0408 BD46     	 mov sp,r7
 1708              	.LCFI102:
 1709              	 .cfi_def_cfa_register 13
 1710              	 
 1711 040a 80BD     	 pop {r7,pc}
 1712              	 .cfi_endproc
 1713              	.LFE196:
 1715              	 .section .text.XMC_DMA_CH_Suspend,"ax",%progbits
 1716              	 .align 2
 1717              	 .global XMC_DMA_CH_Suspend
 1718              	 .thumb
 1719              	 .thumb_func
 1721              	XMC_DMA_CH_Suspend:
 1722              	.LFB197:
 474:../Libraries/XMCLib/src/xmc_dma.c **** 
 475:../Libraries/XMCLib/src/xmc_dma.c **** /* Suspend DMA channel transfer */
 476:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
 477:../Libraries/XMCLib/src/xmc_dma.c **** {
 1723              	 .loc 2 477 0
 1724              	 .cfi_startproc
 1725              	 
 1726              	 
 1727              	 
 1728 0000 80B4     	 push {r7}
 1729              	.LCFI103:
 1730              	 .cfi_def_cfa_offset 4
 1731              	 .cfi_offset 7,-4
 1732 0002 83B0     	 sub sp,sp,#12
 1733              	.LCFI104:
 1734              	 .cfi_def_cfa_offset 16
 1735 0004 00AF     	 add r7,sp,#0
 1736              	.LCFI105:
 1737              	 .cfi_def_cfa_register 7
 1738 0006 7860     	 str r0,[r7,#4]
 1739 0008 0B46     	 mov r3,r1
 1740 000a FB70     	 strb r3,[r7,#3]
 478:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1741              	 .loc 2 478 0
 1742 000c FB78     	 ldrb r3,[r7,#3]
 1743 000e FA78     	 ldrb r2,[r7,#3]
 1744 0010 7968     	 ldr r1,[r7,#4]
 1745 0012 5820     	 movs r0,#88
 1746 0014 00FB02F2 	 mul r2,r0,r2
 1747 0018 0A44     	 add r2,r2,r1
 1748 001a 4032     	 adds r2,r2,#64
 1749 001c 1268     	 ldr r2,[r2]
 1750 001e 42F48072 	 orr r2,r2,#256
 1751 0022 7968     	 ldr r1,[r7,#4]
 1752 0024 5820     	 movs r0,#88
 1753 0026 00FB03F3 	 mul r3,r0,r3
 1754 002a 0B44     	 add r3,r3,r1
 1755 002c 4033     	 adds r3,r3,#64
 1756 002e 1A60     	 str r2,[r3]
 479:../Libraries/XMCLib/src/xmc_dma.c **** }
 1757              	 .loc 2 479 0
 1758 0030 0C37     	 adds r7,r7,#12
 1759              	.LCFI106:
 1760              	 .cfi_def_cfa_offset 4
 1761 0032 BD46     	 mov sp,r7
 1762              	.LCFI107:
 1763              	 .cfi_def_cfa_register 13
 1764              	 
 1765 0034 5DF8047B 	 ldr r7,[sp],#4
 1766              	.LCFI108:
 1767              	 .cfi_restore 7
 1768              	 .cfi_def_cfa_offset 0
 1769 0038 7047     	 bx lr
 1770              	 .cfi_endproc
 1771              	.LFE197:
 1773 003a 00BF     	 .section .text.XMC_DMA_CH_Resume,"ax",%progbits
 1774              	 .align 2
 1775              	 .global XMC_DMA_CH_Resume
 1776              	 .thumb
 1777              	 .thumb_func
 1779              	XMC_DMA_CH_Resume:
 1780              	.LFB198:
 480:../Libraries/XMCLib/src/xmc_dma.c **** 
 481:../Libraries/XMCLib/src/xmc_dma.c **** /* Resume DMA channel transfer */
 482:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
 483:../Libraries/XMCLib/src/xmc_dma.c **** {
 1781              	 .loc 2 483 0
 1782              	 .cfi_startproc
 1783              	 
 1784              	 
 1785              	 
 1786 0000 80B4     	 push {r7}
 1787              	.LCFI109:
 1788              	 .cfi_def_cfa_offset 4
 1789              	 .cfi_offset 7,-4
 1790 0002 83B0     	 sub sp,sp,#12
 1791              	.LCFI110:
 1792              	 .cfi_def_cfa_offset 16
 1793 0004 00AF     	 add r7,sp,#0
 1794              	.LCFI111:
 1795              	 .cfi_def_cfa_register 7
 1796 0006 7860     	 str r0,[r7,#4]
 1797 0008 0B46     	 mov r3,r1
 1798 000a FB70     	 strb r3,[r7,#3]
 484:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1799              	 .loc 2 484 0
 1800 000c FB78     	 ldrb r3,[r7,#3]
 1801 000e FA78     	 ldrb r2,[r7,#3]
 1802 0010 7968     	 ldr r1,[r7,#4]
 1803 0012 5820     	 movs r0,#88
 1804 0014 00FB02F2 	 mul r2,r0,r2
 1805 0018 0A44     	 add r2,r2,r1
 1806 001a 4032     	 adds r2,r2,#64
 1807 001c 1268     	 ldr r2,[r2]
 1808 001e 22F48072 	 bic r2,r2,#256
 1809 0022 7968     	 ldr r1,[r7,#4]
 1810 0024 5820     	 movs r0,#88
 1811 0026 00FB03F3 	 mul r3,r0,r3
 1812 002a 0B44     	 add r3,r3,r1
 1813 002c 4033     	 adds r3,r3,#64
 1814 002e 1A60     	 str r2,[r3]
 485:../Libraries/XMCLib/src/xmc_dma.c **** }
 1815              	 .loc 2 485 0
 1816 0030 0C37     	 adds r7,r7,#12
 1817              	.LCFI112:
 1818              	 .cfi_def_cfa_offset 4
 1819 0032 BD46     	 mov sp,r7
 1820              	.LCFI113:
 1821              	 .cfi_def_cfa_register 13
 1822              	 
 1823 0034 5DF8047B 	 ldr r7,[sp],#4
 1824              	.LCFI114:
 1825              	 .cfi_restore 7
 1826              	 .cfi_def_cfa_offset 0
 1827 0038 7047     	 bx lr
 1828              	 .cfi_endproc
 1829              	.LFE198:
 1831 003a 00BF     	 .section .text.XMC_DMA_CH_IsSuspended,"ax",%progbits
 1832              	 .align 2
 1833              	 .global XMC_DMA_CH_IsSuspended
 1834              	 .thumb
 1835              	 .thumb_func
 1837              	XMC_DMA_CH_IsSuspended:
 1838              	.LFB199:
 486:../Libraries/XMCLib/src/xmc_dma.c **** 
 487:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is suspended */
 488:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
 489:../Libraries/XMCLib/src/xmc_dma.c **** {
 1839              	 .loc 2 489 0
 1840              	 .cfi_startproc
 1841              	 
 1842              	 
 1843              	 
 1844 0000 80B4     	 push {r7}
 1845              	.LCFI115:
 1846              	 .cfi_def_cfa_offset 4
 1847              	 .cfi_offset 7,-4
 1848 0002 83B0     	 sub sp,sp,#12
 1849              	.LCFI116:
 1850              	 .cfi_def_cfa_offset 16
 1851 0004 00AF     	 add r7,sp,#0
 1852              	.LCFI117:
 1853              	 .cfi_def_cfa_register 7
 1854 0006 7860     	 str r0,[r7,#4]
 1855 0008 0B46     	 mov r3,r1
 1856 000a FB70     	 strb r3,[r7,#3]
 490:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 1857              	 .loc 2 490 0
 1858 000c FB78     	 ldrb r3,[r7,#3]
 1859 000e 7A68     	 ldr r2,[r7,#4]
 1860 0010 5821     	 movs r1,#88
 1861 0012 01FB03F3 	 mul r3,r1,r3
 1862 0016 1344     	 add r3,r3,r2
 1863 0018 4033     	 adds r3,r3,#64
 1864 001a 1B68     	 ldr r3,[r3]
 1865 001c 03F48073 	 and r3,r3,#256
 1866 0020 002B     	 cmp r3,#0
 1867 0022 14BF     	 ite ne
 1868 0024 0123     	 movne r3,#1
 1869 0026 0023     	 moveq r3,#0
 1870 0028 DBB2     	 uxtb r3,r3
 491:../Libraries/XMCLib/src/xmc_dma.c **** }
 1871              	 .loc 2 491 0
 1872 002a 1846     	 mov r0,r3
 1873 002c 0C37     	 adds r7,r7,#12
 1874              	.LCFI118:
 1875              	 .cfi_def_cfa_offset 4
 1876 002e BD46     	 mov sp,r7
 1877              	.LCFI119:
 1878              	 .cfi_def_cfa_register 13
 1879              	 
 1880 0030 5DF8047B 	 ldr r7,[sp],#4
 1881              	.LCFI120:
 1882              	 .cfi_restore 7
 1883              	 .cfi_def_cfa_offset 0
 1884 0034 7047     	 bx lr
 1885              	 .cfi_endproc
 1886              	.LFE199:
 1888 0036 00BF     	 .section .text.XMC_DMA_CH_EnableEvent,"ax",%progbits
 1889              	 .align 2
 1890              	 .global XMC_DMA_CH_EnableEvent
 1891              	 .thumb
 1892              	 .thumb_func
 1894              	XMC_DMA_CH_EnableEvent:
 1895              	.LFB200:
 492:../Libraries/XMCLib/src/xmc_dma.c **** 
 493:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA event */
 494:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 495:../Libraries/XMCLib/src/xmc_dma.c **** {
 1896              	 .loc 2 495 0
 1897              	 .cfi_startproc
 1898              	 
 1899              	 
 1900              	 
 1901 0000 80B4     	 push {r7}
 1902              	.LCFI121:
 1903              	 .cfi_def_cfa_offset 4
 1904              	 .cfi_offset 7,-4
 1905 0002 87B0     	 sub sp,sp,#28
 1906              	.LCFI122:
 1907              	 .cfi_def_cfa_offset 32
 1908 0004 00AF     	 add r7,sp,#0
 1909              	.LCFI123:
 1910              	 .cfi_def_cfa_register 7
 1911 0006 F860     	 str r0,[r7,#12]
 1912 0008 0B46     	 mov r3,r1
 1913 000a 7A60     	 str r2,[r7,#4]
 1914 000c FB72     	 strb r3,[r7,#11]
 496:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 497:../Libraries/XMCLib/src/xmc_dma.c **** 
 498:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1915              	 .loc 2 498 0
 1916 000e 0023     	 movs r3,#0
 1917 0010 7B61     	 str r3,[r7,#20]
 1918 0012 14E0     	 b .L102
 1919              	.L104:
 499:../Libraries/XMCLib/src/xmc_dma.c ****   {
 500:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1920              	 .loc 2 500 0
 1921 0014 7B69     	 ldr r3,[r7,#20]
 1922 0016 7A68     	 ldr r2,[r7,#4]
 1923 0018 22FA03F3 	 lsr r3,r2,r3
 1924 001c 03F00103 	 and r3,r3,#1
 1925 0020 002B     	 cmp r3,#0
 1926 0022 09D0     	 beq .L103
 501:../Libraries/XMCLib/src/xmc_dma.c ****     {
 502:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 1927              	 .loc 2 502 0
 1928 0024 7B69     	 ldr r3,[r7,#20]
 1929 0026 5A00     	 lsls r2,r3,#1
 1930 0028 FB7A     	 ldrb r3,[r7,#11]
 1931 002a 40F20111 	 movw r1,#257
 1932 002e 9940     	 lsls r1,r1,r3
 1933 0030 FB68     	 ldr r3,[r7,#12]
 1934 0032 C432     	 adds r2,r2,#196
 1935 0034 43F82210 	 str r1,[r3,r2,lsl#2]
 1936              	.L103:
 498:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1937              	 .loc 2 498 0 discriminator 2
 1938 0038 7B69     	 ldr r3,[r7,#20]
 1939 003a 0133     	 adds r3,r3,#1
 1940 003c 7B61     	 str r3,[r7,#20]
 1941              	.L102:
 498:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1942              	 .loc 2 498 0 is_stmt 0 discriminator 1
 1943 003e 7B69     	 ldr r3,[r7,#20]
 1944 0040 042B     	 cmp r3,#4
 1945 0042 E7D9     	 bls .L104
 503:../Libraries/XMCLib/src/xmc_dma.c ****     }
 504:../Libraries/XMCLib/src/xmc_dma.c ****   }
 505:../Libraries/XMCLib/src/xmc_dma.c **** }
 1946              	 .loc 2 505 0 is_stmt 1
 1947 0044 1C37     	 adds r7,r7,#28
 1948              	.LCFI124:
 1949              	 .cfi_def_cfa_offset 4
 1950 0046 BD46     	 mov sp,r7
 1951              	.LCFI125:
 1952              	 .cfi_def_cfa_register 13
 1953              	 
 1954 0048 5DF8047B 	 ldr r7,[sp],#4
 1955              	.LCFI126:
 1956              	 .cfi_restore 7
 1957              	 .cfi_def_cfa_offset 0
 1958 004c 7047     	 bx lr
 1959              	 .cfi_endproc
 1960              	.LFE200:
 1962 004e 00BF     	 .section .text.XMC_DMA_CH_DisableEvent,"ax",%progbits
 1963              	 .align 2
 1964              	 .global XMC_DMA_CH_DisableEvent
 1965              	 .thumb
 1966              	 .thumb_func
 1968              	XMC_DMA_CH_DisableEvent:
 1969              	.LFB201:
 506:../Libraries/XMCLib/src/xmc_dma.c **** 
 507:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA event */
 508:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 509:../Libraries/XMCLib/src/xmc_dma.c **** {
 1970              	 .loc 2 509 0
 1971              	 .cfi_startproc
 1972              	 
 1973              	 
 1974              	 
 1975 0000 80B4     	 push {r7}
 1976              	.LCFI127:
 1977              	 .cfi_def_cfa_offset 4
 1978              	 .cfi_offset 7,-4
 1979 0002 87B0     	 sub sp,sp,#28
 1980              	.LCFI128:
 1981              	 .cfi_def_cfa_offset 32
 1982 0004 00AF     	 add r7,sp,#0
 1983              	.LCFI129:
 1984              	 .cfi_def_cfa_register 7
 1985 0006 F860     	 str r0,[r7,#12]
 1986 0008 0B46     	 mov r3,r1
 1987 000a 7A60     	 str r2,[r7,#4]
 1988 000c FB72     	 strb r3,[r7,#11]
 510:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 511:../Libraries/XMCLib/src/xmc_dma.c **** 
 512:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1989              	 .loc 2 512 0
 1990 000e 0023     	 movs r3,#0
 1991 0010 7B61     	 str r3,[r7,#20]
 1992 0012 14E0     	 b .L106
 1993              	.L108:
 513:../Libraries/XMCLib/src/xmc_dma.c ****   {
 514:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1994              	 .loc 2 514 0
 1995 0014 7B69     	 ldr r3,[r7,#20]
 1996 0016 7A68     	 ldr r2,[r7,#4]
 1997 0018 22FA03F3 	 lsr r3,r2,r3
 1998 001c 03F00103 	 and r3,r3,#1
 1999 0020 002B     	 cmp r3,#0
 2000 0022 09D0     	 beq .L107
 515:../Libraries/XMCLib/src/xmc_dma.c ****     {
 516:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x100UL << channel);
 2001              	 .loc 2 516 0
 2002 0024 7B69     	 ldr r3,[r7,#20]
 2003 0026 5A00     	 lsls r2,r3,#1
 2004 0028 FB7A     	 ldrb r3,[r7,#11]
 2005 002a 4FF48071 	 mov r1,#256
 2006 002e 9940     	 lsls r1,r1,r3
 2007 0030 FB68     	 ldr r3,[r7,#12]
 2008 0032 C432     	 adds r2,r2,#196
 2009 0034 43F82210 	 str r1,[r3,r2,lsl#2]
 2010              	.L107:
 512:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2011              	 .loc 2 512 0 discriminator 2
 2012 0038 7B69     	 ldr r3,[r7,#20]
 2013 003a 0133     	 adds r3,r3,#1
 2014 003c 7B61     	 str r3,[r7,#20]
 2015              	.L106:
 512:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2016              	 .loc 2 512 0 is_stmt 0 discriminator 1
 2017 003e 7B69     	 ldr r3,[r7,#20]
 2018 0040 042B     	 cmp r3,#4
 2019 0042 E7D9     	 bls .L108
 517:../Libraries/XMCLib/src/xmc_dma.c ****     }
 518:../Libraries/XMCLib/src/xmc_dma.c ****   }
 519:../Libraries/XMCLib/src/xmc_dma.c **** }
 2020              	 .loc 2 519 0 is_stmt 1
 2021 0044 1C37     	 adds r7,r7,#28
 2022              	.LCFI130:
 2023              	 .cfi_def_cfa_offset 4
 2024 0046 BD46     	 mov sp,r7
 2025              	.LCFI131:
 2026              	 .cfi_def_cfa_register 13
 2027              	 
 2028 0048 5DF8047B 	 ldr r7,[sp],#4
 2029              	.LCFI132:
 2030              	 .cfi_restore 7
 2031              	 .cfi_def_cfa_offset 0
 2032 004c 7047     	 bx lr
 2033              	 .cfi_endproc
 2034              	.LFE201:
 2036 004e 00BF     	 .section .text.XMC_DMA_CH_ClearEventStatus,"ax",%progbits
 2037              	 .align 2
 2038              	 .global XMC_DMA_CH_ClearEventStatus
 2039              	 .thumb
 2040              	 .thumb_func
 2042              	XMC_DMA_CH_ClearEventStatus:
 2043              	.LFB202:
 520:../Libraries/XMCLib/src/xmc_dma.c **** 
 521:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear GPDMA event */
 522:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 523:../Libraries/XMCLib/src/xmc_dma.c **** {
 2044              	 .loc 2 523 0
 2045              	 .cfi_startproc
 2046              	 
 2047              	 
 2048              	 
 2049 0000 80B4     	 push {r7}
 2050              	.LCFI133:
 2051              	 .cfi_def_cfa_offset 4
 2052              	 .cfi_offset 7,-4
 2053 0002 87B0     	 sub sp,sp,#28
 2054              	.LCFI134:
 2055              	 .cfi_def_cfa_offset 32
 2056 0004 00AF     	 add r7,sp,#0
 2057              	.LCFI135:
 2058              	 .cfi_def_cfa_register 7
 2059 0006 F860     	 str r0,[r7,#12]
 2060 0008 0B46     	 mov r3,r1
 2061 000a 7A60     	 str r2,[r7,#4]
 2062 000c FB72     	 strb r3,[r7,#11]
 524:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 525:../Libraries/XMCLib/src/xmc_dma.c **** 
 526:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2063              	 .loc 2 526 0
 2064 000e 0023     	 movs r3,#0
 2065 0010 7B61     	 str r3,[r7,#20]
 2066 0012 13E0     	 b .L110
 2067              	.L112:
 527:../Libraries/XMCLib/src/xmc_dma.c ****   {
 528:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 2068              	 .loc 2 528 0
 2069 0014 7B69     	 ldr r3,[r7,#20]
 2070 0016 7A68     	 ldr r2,[r7,#4]
 2071 0018 22FA03F3 	 lsr r3,r2,r3
 2072 001c 03F00103 	 and r3,r3,#1
 2073 0020 002B     	 cmp r3,#0
 2074 0022 08D0     	 beq .L111
 529:../Libraries/XMCLib/src/xmc_dma.c ****     {
 530:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 2075              	 .loc 2 530 0
 2076 0024 7B69     	 ldr r3,[r7,#20]
 2077 0026 5A00     	 lsls r2,r3,#1
 2078 0028 FB7A     	 ldrb r3,[r7,#11]
 2079 002a 0121     	 movs r1,#1
 2080 002c 9940     	 lsls r1,r1,r3
 2081 002e FB68     	 ldr r3,[r7,#12]
 2082 0030 CE32     	 adds r2,r2,#206
 2083 0032 43F82210 	 str r1,[r3,r2,lsl#2]
 2084              	.L111:
 526:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2085              	 .loc 2 526 0 discriminator 2
 2086 0036 7B69     	 ldr r3,[r7,#20]
 2087 0038 0133     	 adds r3,r3,#1
 2088 003a 7B61     	 str r3,[r7,#20]
 2089              	.L110:
 526:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2090              	 .loc 2 526 0 is_stmt 0 discriminator 1
 2091 003c 7B69     	 ldr r3,[r7,#20]
 2092 003e 042B     	 cmp r3,#4
 2093 0040 E8D9     	 bls .L112
 531:../Libraries/XMCLib/src/xmc_dma.c ****     }
 532:../Libraries/XMCLib/src/xmc_dma.c ****   }
 533:../Libraries/XMCLib/src/xmc_dma.c **** 
 534:../Libraries/XMCLib/src/xmc_dma.c **** }
 2094              	 .loc 2 534 0 is_stmt 1
 2095 0042 1C37     	 adds r7,r7,#28
 2096              	.LCFI136:
 2097              	 .cfi_def_cfa_offset 4
 2098 0044 BD46     	 mov sp,r7
 2099              	.LCFI137:
 2100              	 .cfi_def_cfa_register 13
 2101              	 
 2102 0046 5DF8047B 	 ldr r7,[sp],#4
 2103              	.LCFI138:
 2104              	 .cfi_restore 7
 2105              	 .cfi_def_cfa_offset 0
 2106 004a 7047     	 bx lr
 2107              	 .cfi_endproc
 2108              	.LFE202:
 2110              	 .section .text.XMC_DMA_CH_GetEventStatus,"ax",%progbits
 2111              	 .align 2
 2112              	 .global XMC_DMA_CH_GetEventStatus
 2113              	 .thumb
 2114              	 .thumb_func
 2116              	XMC_DMA_CH_GetEventStatus:
 2117              	.LFB203:
 535:../Libraries/XMCLib/src/xmc_dma.c **** 
 536:../Libraries/XMCLib/src/xmc_dma.c **** /* Get GPDMA event status */
 537:../Libraries/XMCLib/src/xmc_dma.c **** uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
 538:../Libraries/XMCLib/src/xmc_dma.c **** {
 2118              	 .loc 2 538 0
 2119              	 .cfi_startproc
 2120              	 
 2121              	 
 2122              	 
 2123 0000 80B4     	 push {r7}
 2124              	.LCFI139:
 2125              	 .cfi_def_cfa_offset 4
 2126              	 .cfi_offset 7,-4
 2127 0002 85B0     	 sub sp,sp,#20
 2128              	.LCFI140:
 2129              	 .cfi_def_cfa_offset 24
 2130 0004 00AF     	 add r7,sp,#0
 2131              	.LCFI141:
 2132              	 .cfi_def_cfa_register 7
 2133 0006 7860     	 str r0,[r7,#4]
 2134 0008 0B46     	 mov r3,r1
 2135 000a FB70     	 strb r3,[r7,#3]
 539:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 540:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t status = 0UL;
 2136              	 .loc 2 540 0
 2137 000c 0023     	 movs r3,#0
 2138 000e BB60     	 str r3,[r7,#8]
 541:../Libraries/XMCLib/src/xmc_dma.c **** 
 542:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2139              	 .loc 2 542 0
 2140 0010 0023     	 movs r3,#0
 2141 0012 FB60     	 str r3,[r7,#12]
 2142 0014 18E0     	 b .L114
 2143              	.L117:
 543:../Libraries/XMCLib/src/xmc_dma.c ****   {
 544:../Libraries/XMCLib/src/xmc_dma.c ****     status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_
 2144              	 .loc 2 544 0
 2145 0016 FB68     	 ldr r3,[r7,#12]
 2146 0018 5A00     	 lsls r2,r3,#1
 2147 001a 7B68     	 ldr r3,[r7,#4]
 2148 001c BA32     	 adds r2,r2,#186
 2149 001e 53F82220 	 ldr r2,[r3,r2,lsl#2]
 2150 0022 FB78     	 ldrb r3,[r7,#3]
 2151 0024 22FA03F3 	 lsr r3,r2,r3
 2152 0028 03F00103 	 and r3,r3,#1
 2153 002c 002B     	 cmp r3,#0
 2154 002e 04D0     	 beq .L115
 2155              	 .loc 2 544 0 is_stmt 0 discriminator 1
 2156 0030 FB68     	 ldr r3,[r7,#12]
 2157 0032 0122     	 movs r2,#1
 2158 0034 02FA03F3 	 lsl r3,r2,r3
 2159 0038 00E0     	 b .L116
 2160              	.L115:
 2161              	 .loc 2 544 0 discriminator 2
 2162 003a 0023     	 movs r3,#0
 2163              	.L116:
 2164              	 .loc 2 544 0 discriminator 4
 2165 003c BA68     	 ldr r2,[r7,#8]
 2166 003e 1343     	 orrs r3,r3,r2
 2167 0040 BB60     	 str r3,[r7,#8]
 542:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2168              	 .loc 2 542 0 is_stmt 1 discriminator 4
 2169 0042 FB68     	 ldr r3,[r7,#12]
 2170 0044 0133     	 adds r3,r3,#1
 2171 0046 FB60     	 str r3,[r7,#12]
 2172              	.L114:
 542:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2173              	 .loc 2 542 0 is_stmt 0 discriminator 2
 2174 0048 FB68     	 ldr r3,[r7,#12]
 2175 004a 042B     	 cmp r3,#4
 2176 004c E3D9     	 bls .L117
 545:../Libraries/XMCLib/src/xmc_dma.c ****                          ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
 546:../Libraries/XMCLib/src/xmc_dma.c ****   }
 547:../Libraries/XMCLib/src/xmc_dma.c **** 
 548:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 2177              	 .loc 2 548 0 is_stmt 1
 2178 004e BB68     	 ldr r3,[r7,#8]
 549:../Libraries/XMCLib/src/xmc_dma.c **** }
 2179              	 .loc 2 549 0
 2180 0050 1846     	 mov r0,r3
 2181 0052 1437     	 adds r7,r7,#20
 2182              	.LCFI142:
 2183              	 .cfi_def_cfa_offset 4
 2184 0054 BD46     	 mov sp,r7
 2185              	.LCFI143:
 2186              	 .cfi_def_cfa_register 13
 2187              	 
 2188 0056 5DF8047B 	 ldr r7,[sp],#4
 2189              	.LCFI144:
 2190              	 .cfi_restore 7
 2191              	 .cfi_def_cfa_offset 0
 2192 005a 7047     	 bx lr
 2193              	 .cfi_endproc
 2194              	.LFE203:
 2196              	 .section .text.XMC_DMA_CH_EnableSourceGather,"ax",%progbits
 2197              	 .align 2
 2198              	 .global XMC_DMA_CH_EnableSourceGather
 2199              	 .thumb
 2200              	 .thumb_func
 2202              	XMC_DMA_CH_EnableSourceGather:
 2203              	.LFB204:
 550:../Libraries/XMCLib/src/xmc_dma.c **** 
 551:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source gather */
 552:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, 
 553:../Libraries/XMCLib/src/xmc_dma.c **** {
 2204              	 .loc 2 553 0
 2205              	 .cfi_startproc
 2206              	 
 2207              	 
 2208              	 
 2209 0000 80B4     	 push {r7}
 2210              	.LCFI145:
 2211              	 .cfi_def_cfa_offset 4
 2212              	 .cfi_offset 7,-4
 2213 0002 85B0     	 sub sp,sp,#20
 2214              	.LCFI146:
 2215              	 .cfi_def_cfa_offset 24
 2216 0004 00AF     	 add r7,sp,#0
 2217              	.LCFI147:
 2218              	 .cfi_def_cfa_register 7
 2219 0006 F860     	 str r0,[r7,#12]
 2220 0008 7A60     	 str r2,[r7,#4]
 2221 000a 1A46     	 mov r2,r3
 2222 000c 0B46     	 mov r3,r1
 2223 000e FB72     	 strb r3,[r7,#11]
 2224 0010 1346     	 mov r3,r2
 2225 0012 3B81     	 strh r3,[r7,#8]
 554:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2226              	 .loc 2 554 0
 2227 0014 FB7A     	 ldrb r3,[r7,#11]
 2228 0016 FA7A     	 ldrb r2,[r7,#11]
 2229 0018 F968     	 ldr r1,[r7,#12]
 2230 001a 5820     	 movs r0,#88
 2231 001c 00FB02F2 	 mul r2,r0,r2
 2232 0020 0A44     	 add r2,r2,r1
 2233 0022 1832     	 adds r2,r2,#24
 2234 0024 1268     	 ldr r2,[r2]
 2235 0026 42F40032 	 orr r2,r2,#131072
 2236 002a F968     	 ldr r1,[r7,#12]
 2237 002c 5820     	 movs r0,#88
 2238 002e 00FB03F3 	 mul r3,r0,r3
 2239 0032 0B44     	 add r3,r3,r1
 2240 0034 1833     	 adds r3,r3,#24
 2241 0036 1A60     	 str r2,[r3]
 555:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0
 2242              	 .loc 2 555 0
 2243 0038 FB7A     	 ldrb r3,[r7,#11]
 2244 003a 3A89     	 ldrh r2,[r7,#8]
 2245 003c 1105     	 lsls r1,r2,#20
 2246 003e 7A68     	 ldr r2,[r7,#4]
 2247 0040 0A43     	 orrs r2,r2,r1
 2248 0042 F968     	 ldr r1,[r7,#12]
 2249 0044 5820     	 movs r0,#88
 2250 0046 00FB03F3 	 mul r3,r0,r3
 2251 004a 0B44     	 add r3,r3,r1
 2252 004c 4833     	 adds r3,r3,#72
 2253 004e 1A60     	 str r2,[r3]
 556:../Libraries/XMCLib/src/xmc_dma.c **** }
 2254              	 .loc 2 556 0
 2255 0050 1437     	 adds r7,r7,#20
 2256              	.LCFI148:
 2257              	 .cfi_def_cfa_offset 4
 2258 0052 BD46     	 mov sp,r7
 2259              	.LCFI149:
 2260              	 .cfi_def_cfa_register 13
 2261              	 
 2262 0054 5DF8047B 	 ldr r7,[sp],#4
 2263              	.LCFI150:
 2264              	 .cfi_restore 7
 2265              	 .cfi_def_cfa_offset 0
 2266 0058 7047     	 bx lr
 2267              	 .cfi_endproc
 2268              	.LFE204:
 2270 005a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceGather,"ax",%progbits
 2271              	 .align 2
 2272              	 .global XMC_DMA_CH_DisableSourceGather
 2273              	 .thumb
 2274              	 .thumb_func
 2276              	XMC_DMA_CH_DisableSourceGather:
 2277              	.LFB205:
 557:../Libraries/XMCLib/src/xmc_dma.c **** 
 558:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source gather */
 559:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
 560:../Libraries/XMCLib/src/xmc_dma.c **** {
 2278              	 .loc 2 560 0
 2279              	 .cfi_startproc
 2280              	 
 2281              	 
 2282              	 
 2283 0000 80B4     	 push {r7}
 2284              	.LCFI151:
 2285              	 .cfi_def_cfa_offset 4
 2286              	 .cfi_offset 7,-4
 2287 0002 83B0     	 sub sp,sp,#12
 2288              	.LCFI152:
 2289              	 .cfi_def_cfa_offset 16
 2290 0004 00AF     	 add r7,sp,#0
 2291              	.LCFI153:
 2292              	 .cfi_def_cfa_register 7
 2293 0006 7860     	 str r0,[r7,#4]
 2294 0008 0B46     	 mov r3,r1
 2295 000a FB70     	 strb r3,[r7,#3]
 561:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2296              	 .loc 2 561 0
 2297 000c FB78     	 ldrb r3,[r7,#3]
 2298 000e FA78     	 ldrb r2,[r7,#3]
 2299 0010 7968     	 ldr r1,[r7,#4]
 2300 0012 5820     	 movs r0,#88
 2301 0014 00FB02F2 	 mul r2,r0,r2
 2302 0018 0A44     	 add r2,r2,r1
 2303 001a 1832     	 adds r2,r2,#24
 2304 001c 1268     	 ldr r2,[r2]
 2305 001e 22F40032 	 bic r2,r2,#131072
 2306 0022 7968     	 ldr r1,[r7,#4]
 2307 0024 5820     	 movs r0,#88
 2308 0026 00FB03F3 	 mul r3,r0,r3
 2309 002a 0B44     	 add r3,r3,r1
 2310 002c 1833     	 adds r3,r3,#24
 2311 002e 1A60     	 str r2,[r3]
 562:../Libraries/XMCLib/src/xmc_dma.c **** }
 2312              	 .loc 2 562 0
 2313 0030 0C37     	 adds r7,r7,#12
 2314              	.LCFI154:
 2315              	 .cfi_def_cfa_offset 4
 2316 0032 BD46     	 mov sp,r7
 2317              	.LCFI155:
 2318              	 .cfi_def_cfa_register 13
 2319              	 
 2320 0034 5DF8047B 	 ldr r7,[sp],#4
 2321              	.LCFI156:
 2322              	 .cfi_restore 7
 2323              	 .cfi_def_cfa_offset 0
 2324 0038 7047     	 bx lr
 2325              	 .cfi_endproc
 2326              	.LFE205:
 2328 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationScatter,"ax",%progbits
 2329              	 .align 2
 2330              	 .global XMC_DMA_CH_EnableDestinationScatter
 2331              	 .thumb
 2332              	 .thumb_func
 2334              	XMC_DMA_CH_EnableDestinationScatter:
 2335              	.LFB206:
 563:../Libraries/XMCLib/src/xmc_dma.c **** 
 564:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination scatter */
 565:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t inte
 566:../Libraries/XMCLib/src/xmc_dma.c **** {
 2336              	 .loc 2 566 0
 2337              	 .cfi_startproc
 2338              	 
 2339              	 
 2340              	 
 2341 0000 80B4     	 push {r7}
 2342              	.LCFI157:
 2343              	 .cfi_def_cfa_offset 4
 2344              	 .cfi_offset 7,-4
 2345 0002 85B0     	 sub sp,sp,#20
 2346              	.LCFI158:
 2347              	 .cfi_def_cfa_offset 24
 2348 0004 00AF     	 add r7,sp,#0
 2349              	.LCFI159:
 2350              	 .cfi_def_cfa_register 7
 2351 0006 F860     	 str r0,[r7,#12]
 2352 0008 7A60     	 str r2,[r7,#4]
 2353 000a 1A46     	 mov r2,r3
 2354 000c 0B46     	 mov r3,r1
 2355 000e FB72     	 strb r3,[r7,#11]
 2356 0010 1346     	 mov r3,r2
 2357 0012 3B81     	 strh r3,[r7,#8]
 567:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2358              	 .loc 2 567 0
 2359 0014 FB7A     	 ldrb r3,[r7,#11]
 2360 0016 FA7A     	 ldrb r2,[r7,#11]
 2361 0018 F968     	 ldr r1,[r7,#12]
 2362 001a 5820     	 movs r0,#88
 2363 001c 00FB02F2 	 mul r2,r0,r2
 2364 0020 0A44     	 add r2,r2,r1
 2365 0022 1832     	 adds r2,r2,#24
 2366 0024 1268     	 ldr r2,[r2]
 2367 0026 42F48022 	 orr r2,r2,#262144
 2368 002a F968     	 ldr r1,[r7,#12]
 2369 002c 5820     	 movs r0,#88
 2370 002e 00FB03F3 	 mul r3,r0,r3
 2371 0032 0B44     	 add r3,r3,r1
 2372 0034 1833     	 adds r3,r3,#24
 2373 0036 1A60     	 str r2,[r3]
 568:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0
 2374              	 .loc 2 568 0
 2375 0038 FB7A     	 ldrb r3,[r7,#11]
 2376 003a 3A89     	 ldrh r2,[r7,#8]
 2377 003c 1105     	 lsls r1,r2,#20
 2378 003e 7A68     	 ldr r2,[r7,#4]
 2379 0040 0A43     	 orrs r2,r2,r1
 2380 0042 F968     	 ldr r1,[r7,#12]
 2381 0044 5820     	 movs r0,#88
 2382 0046 00FB03F3 	 mul r3,r0,r3
 2383 004a 0B44     	 add r3,r3,r1
 2384 004c 5033     	 adds r3,r3,#80
 2385 004e 1A60     	 str r2,[r3]
 569:../Libraries/XMCLib/src/xmc_dma.c **** }
 2386              	 .loc 2 569 0
 2387 0050 1437     	 adds r7,r7,#20
 2388              	.LCFI160:
 2389              	 .cfi_def_cfa_offset 4
 2390 0052 BD46     	 mov sp,r7
 2391              	.LCFI161:
 2392              	 .cfi_def_cfa_register 13
 2393              	 
 2394 0054 5DF8047B 	 ldr r7,[sp],#4
 2395              	.LCFI162:
 2396              	 .cfi_restore 7
 2397              	 .cfi_def_cfa_offset 0
 2398 0058 7047     	 bx lr
 2399              	 .cfi_endproc
 2400              	.LFE206:
 2402 005a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationScatter,"ax",%progbits
 2403              	 .align 2
 2404              	 .global XMC_DMA_CH_DisableDestinationScatter
 2405              	 .thumb
 2406              	 .thumb_func
 2408              	XMC_DMA_CH_DisableDestinationScatter:
 2409              	.LFB207:
 570:../Libraries/XMCLib/src/xmc_dma.c **** 
 571:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination scatter */
 572:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
 573:../Libraries/XMCLib/src/xmc_dma.c **** {
 2410              	 .loc 2 573 0
 2411              	 .cfi_startproc
 2412              	 
 2413              	 
 2414              	 
 2415 0000 80B4     	 push {r7}
 2416              	.LCFI163:
 2417              	 .cfi_def_cfa_offset 4
 2418              	 .cfi_offset 7,-4
 2419 0002 83B0     	 sub sp,sp,#12
 2420              	.LCFI164:
 2421              	 .cfi_def_cfa_offset 16
 2422 0004 00AF     	 add r7,sp,#0
 2423              	.LCFI165:
 2424              	 .cfi_def_cfa_register 7
 2425 0006 7860     	 str r0,[r7,#4]
 2426 0008 0B46     	 mov r3,r1
 2427 000a FB70     	 strb r3,[r7,#3]
 574:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2428              	 .loc 2 574 0
 2429 000c FB78     	 ldrb r3,[r7,#3]
 2430 000e FA78     	 ldrb r2,[r7,#3]
 2431 0010 7968     	 ldr r1,[r7,#4]
 2432 0012 5820     	 movs r0,#88
 2433 0014 00FB02F2 	 mul r2,r0,r2
 2434 0018 0A44     	 add r2,r2,r1
 2435 001a 1832     	 adds r2,r2,#24
 2436 001c 1268     	 ldr r2,[r2]
 2437 001e 22F48022 	 bic r2,r2,#262144
 2438 0022 7968     	 ldr r1,[r7,#4]
 2439 0024 5820     	 movs r0,#88
 2440 0026 00FB03F3 	 mul r3,r0,r3
 2441 002a 0B44     	 add r3,r3,r1
 2442 002c 1833     	 adds r3,r3,#24
 2443 002e 1A60     	 str r2,[r3]
 575:../Libraries/XMCLib/src/xmc_dma.c **** }
 2444              	 .loc 2 575 0
 2445 0030 0C37     	 adds r7,r7,#12
 2446              	.LCFI166:
 2447              	 .cfi_def_cfa_offset 4
 2448 0032 BD46     	 mov sp,r7
 2449              	.LCFI167:
 2450              	 .cfi_def_cfa_register 13
 2451              	 
 2452 0034 5DF8047B 	 ldr r7,[sp],#4
 2453              	.LCFI168:
 2454              	 .cfi_restore 7
 2455              	 .cfi_def_cfa_offset 0
 2456 0038 7047     	 bx lr
 2457              	 .cfi_endproc
 2458              	.LFE207:
 2460 003a 00BF     	 .section .text.XMC_DMA_CH_TriggerSourceRequest,"ax",%progbits
 2461              	 .align 2
 2462              	 .global XMC_DMA_CH_TriggerSourceRequest
 2463              	 .thumb
 2464              	 .thumb_func
 2466              	XMC_DMA_CH_TriggerSourceRequest:
 2467              	.LFB208:
 576:../Libraries/XMCLib/src/xmc_dma.c **** 
 577:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger source request */
 578:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_
 579:../Libraries/XMCLib/src/xmc_dma.c **** {
 2468              	 .loc 2 579 0
 2469              	 .cfi_startproc
 2470              	 
 2471              	 
 2472              	 
 2473 0000 80B4     	 push {r7}
 2474              	.LCFI169:
 2475              	 .cfi_def_cfa_offset 4
 2476              	 .cfi_offset 7,-4
 2477 0002 83B0     	 sub sp,sp,#12
 2478              	.LCFI170:
 2479              	 .cfi_def_cfa_offset 16
 2480 0004 00AF     	 add r7,sp,#0
 2481              	.LCFI171:
 2482              	 .cfi_def_cfa_register 7
 2483 0006 7860     	 str r0,[r7,#4]
 2484 0008 0846     	 mov r0,r1
 2485 000a 1146     	 mov r1,r2
 2486 000c 1A46     	 mov r2,r3
 2487 000e 0346     	 mov r3,r0
 2488 0010 FB70     	 strb r3,[r7,#3]
 2489 0012 0B46     	 mov r3,r1
 2490 0014 BB70     	 strb r3,[r7,#2]
 2491 0016 1346     	 mov r3,r2
 2492 0018 7B70     	 strb r3,[r7,#1]
 580:../Libraries/XMCLib/src/xmc_dma.c ****   if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2493              	 .loc 2 580 0
 2494 001a BB78     	 ldrb r3,[r7,#2]
 2495 001c 002B     	 cmp r3,#0
 2496 001e 06D1     	 bne .L124
 581:../Libraries/XMCLib/src/xmc_dma.c ****   {
 582:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 2497              	 .loc 2 582 0
 2498 0020 FB78     	 ldrb r3,[r7,#3]
 2499 0022 40F20112 	 movw r2,#257
 2500 0026 9A40     	 lsls r2,r2,r3
 2501 0028 7B68     	 ldr r3,[r7,#4]
 2502 002a C3F87823 	 str r2,[r3,#888]
 2503              	.L124:
 583:../Libraries/XMCLib/src/xmc_dma.c ****   }
 584:../Libraries/XMCLib/src/xmc_dma.c **** 
 585:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2504              	 .loc 2 585 0
 2505 002e 7B78     	 ldrb r3,[r7,#1]
 2506 0030 002B     	 cmp r3,#0
 2507 0032 06D0     	 beq .L125
 586:../Libraries/XMCLib/src/xmc_dma.c ****   {
 587:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 2508              	 .loc 2 587 0
 2509 0034 FB78     	 ldrb r3,[r7,#3]
 2510 0036 40F20112 	 movw r2,#257
 2511 003a 9A40     	 lsls r2,r2,r3
 2512 003c 7B68     	 ldr r3,[r7,#4]
 2513 003e C3F88823 	 str r2,[r3,#904]
 2514              	.L125:
 588:../Libraries/XMCLib/src/xmc_dma.c ****   }
 589:../Libraries/XMCLib/src/xmc_dma.c **** 
 590:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQSRCREG = (uint32_t)0x101UL << channel;
 2515              	 .loc 2 590 0
 2516 0042 FB78     	 ldrb r3,[r7,#3]
 2517 0044 40F20112 	 movw r2,#257
 2518 0048 9A40     	 lsls r2,r2,r3
 2519 004a 7B68     	 ldr r3,[r7,#4]
 2520 004c C3F86823 	 str r2,[r3,#872]
 591:../Libraries/XMCLib/src/xmc_dma.c **** }
 2521              	 .loc 2 591 0
 2522 0050 0C37     	 adds r7,r7,#12
 2523              	.LCFI172:
 2524              	 .cfi_def_cfa_offset 4
 2525 0052 BD46     	 mov sp,r7
 2526              	.LCFI173:
 2527              	 .cfi_def_cfa_register 13
 2528              	 
 2529 0054 5DF8047B 	 ldr r7,[sp],#4
 2530              	.LCFI174:
 2531              	 .cfi_restore 7
 2532              	 .cfi_def_cfa_offset 0
 2533 0058 7047     	 bx lr
 2534              	 .cfi_endproc
 2535              	.LFE208:
 2537 005a 00BF     	 .section .text.XMC_DMA_CH_TriggerDestinationRequest,"ax",%progbits
 2538              	 .align 2
 2539              	 .global XMC_DMA_CH_TriggerDestinationRequest
 2540              	 .thumb
 2541              	 .thumb_func
 2543              	XMC_DMA_CH_TriggerDestinationRequest:
 2544              	.LFB209:
 592:../Libraries/XMCLib/src/xmc_dma.c **** 
 593:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger destination request */
 594:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DM
 595:../Libraries/XMCLib/src/xmc_dma.c **** {
 2545              	 .loc 2 595 0
 2546              	 .cfi_startproc
 2547              	 
 2548              	 
 2549              	 
 2550 0000 80B4     	 push {r7}
 2551              	.LCFI175:
 2552              	 .cfi_def_cfa_offset 4
 2553              	 .cfi_offset 7,-4
 2554 0002 83B0     	 sub sp,sp,#12
 2555              	.LCFI176:
 2556              	 .cfi_def_cfa_offset 16
 2557 0004 00AF     	 add r7,sp,#0
 2558              	.LCFI177:
 2559              	 .cfi_def_cfa_register 7
 2560 0006 7860     	 str r0,[r7,#4]
 2561 0008 0846     	 mov r0,r1
 2562 000a 1146     	 mov r1,r2
 2563 000c 1A46     	 mov r2,r3
 2564 000e 0346     	 mov r3,r0
 2565 0010 FB70     	 strb r3,[r7,#3]
 2566 0012 0B46     	 mov r3,r1
 2567 0014 BB70     	 strb r3,[r7,#2]
 2568 0016 1346     	 mov r3,r2
 2569 0018 7B70     	 strb r3,[r7,#1]
 596:../Libraries/XMCLib/src/xmc_dma.c ****   if (type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2570              	 .loc 2 596 0
 2571 001a BB78     	 ldrb r3,[r7,#2]
 2572 001c 002B     	 cmp r3,#0
 2573 001e 06D1     	 bne .L127
 597:../Libraries/XMCLib/src/xmc_dma.c ****   {
 598:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 2574              	 .loc 2 598 0
 2575 0020 FB78     	 ldrb r3,[r7,#3]
 2576 0022 40F20112 	 movw r2,#257
 2577 0026 9A40     	 lsls r2,r2,r3
 2578 0028 7B68     	 ldr r3,[r7,#4]
 2579 002a C3F88023 	 str r2,[r3,#896]
 2580              	.L127:
 599:../Libraries/XMCLib/src/xmc_dma.c ****   }
 600:../Libraries/XMCLib/src/xmc_dma.c **** 
 601:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2581              	 .loc 2 601 0
 2582 002e 7B78     	 ldrb r3,[r7,#1]
 2583 0030 002B     	 cmp r3,#0
 2584 0032 06D0     	 beq .L128
 602:../Libraries/XMCLib/src/xmc_dma.c ****   {
 603:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 2585              	 .loc 2 603 0
 2586 0034 FB78     	 ldrb r3,[r7,#3]
 2587 0036 40F20112 	 movw r2,#257
 2588 003a 9A40     	 lsls r2,r2,r3
 2589 003c 7B68     	 ldr r3,[r7,#4]
 2590 003e C3F89023 	 str r2,[r3,#912]
 2591              	.L128:
 604:../Libraries/XMCLib/src/xmc_dma.c ****   }
 605:../Libraries/XMCLib/src/xmc_dma.c **** 
 606:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQDSTREG = (uint32_t)0x101UL << channel;
 2592              	 .loc 2 606 0
 2593 0042 FB78     	 ldrb r3,[r7,#3]
 2594 0044 40F20112 	 movw r2,#257
 2595 0048 9A40     	 lsls r2,r2,r3
 2596 004a 7B68     	 ldr r3,[r7,#4]
 2597 004c C3F87023 	 str r2,[r3,#880]
 607:../Libraries/XMCLib/src/xmc_dma.c **** }
 2598              	 .loc 2 607 0
 2599 0050 0C37     	 adds r7,r7,#12
 2600              	.LCFI178:
 2601              	 .cfi_def_cfa_offset 4
 2602 0052 BD46     	 mov sp,r7
 2603              	.LCFI179:
 2604              	 .cfi_def_cfa_register 13
 2605              	 
 2606 0054 5DF8047B 	 ldr r7,[sp],#4
 2607              	.LCFI180:
 2608              	 .cfi_restore 7
 2609              	 .cfi_def_cfa_offset 0
 2610 0058 7047     	 bx lr
 2611              	 .cfi_endproc
 2612              	.LFE209:
 2614 005a 00BF     	 .section .text.XMC_DMA_CH_EnableSourceAddressReload,"ax",%progbits
 2615              	 .align 2
 2616              	 .global XMC_DMA_CH_EnableSourceAddressReload
 2617              	 .thumb
 2618              	 .thumb_func
 2620              	XMC_DMA_CH_EnableSourceAddressReload:
 2621              	.LFB210:
 608:../Libraries/XMCLib/src/xmc_dma.c **** 
 609:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source address reload */
 610:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 611:../Libraries/XMCLib/src/xmc_dma.c **** {
 2622              	 .loc 2 611 0
 2623              	 .cfi_startproc
 2624              	 
 2625              	 
 2626              	 
 2627 0000 80B4     	 push {r7}
 2628              	.LCFI181:
 2629              	 .cfi_def_cfa_offset 4
 2630              	 .cfi_offset 7,-4
 2631 0002 83B0     	 sub sp,sp,#12
 2632              	.LCFI182:
 2633              	 .cfi_def_cfa_offset 16
 2634 0004 00AF     	 add r7,sp,#0
 2635              	.LCFI183:
 2636              	 .cfi_def_cfa_register 7
 2637 0006 7860     	 str r0,[r7,#4]
 2638 0008 0B46     	 mov r3,r1
 2639 000a FB70     	 strb r3,[r7,#3]
 612:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2640              	 .loc 2 612 0
 2641 000c FB78     	 ldrb r3,[r7,#3]
 2642 000e FA78     	 ldrb r2,[r7,#3]
 2643 0010 7968     	 ldr r1,[r7,#4]
 2644 0012 5820     	 movs r0,#88
 2645 0014 00FB02F2 	 mul r2,r0,r2
 2646 0018 0A44     	 add r2,r2,r1
 2647 001a 4032     	 adds r2,r2,#64
 2648 001c 1268     	 ldr r2,[r2]
 2649 001e 42F08042 	 orr r2,r2,#1073741824
 2650 0022 7968     	 ldr r1,[r7,#4]
 2651 0024 5820     	 movs r0,#88
 2652 0026 00FB03F3 	 mul r3,r0,r3
 2653 002a 0B44     	 add r3,r3,r1
 2654 002c 4033     	 adds r3,r3,#64
 2655 002e 1A60     	 str r2,[r3]
 613:../Libraries/XMCLib/src/xmc_dma.c **** }
 2656              	 .loc 2 613 0
 2657 0030 0C37     	 adds r7,r7,#12
 2658              	.LCFI184:
 2659              	 .cfi_def_cfa_offset 4
 2660 0032 BD46     	 mov sp,r7
 2661              	.LCFI185:
 2662              	 .cfi_def_cfa_register 13
 2663              	 
 2664 0034 5DF8047B 	 ldr r7,[sp],#4
 2665              	.LCFI186:
 2666              	 .cfi_restore 7
 2667              	 .cfi_def_cfa_offset 0
 2668 0038 7047     	 bx lr
 2669              	 .cfi_endproc
 2670              	.LFE210:
 2672 003a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceAddressReload,"ax",%progbits
 2673              	 .align 2
 2674              	 .global XMC_DMA_CH_DisableSourceAddressReload
 2675              	 .thumb
 2676              	 .thumb_func
 2678              	XMC_DMA_CH_DisableSourceAddressReload:
 2679              	.LFB211:
 614:../Libraries/XMCLib/src/xmc_dma.c **** 
 615:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source address reload */
 616:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 617:../Libraries/XMCLib/src/xmc_dma.c **** {
 2680              	 .loc 2 617 0
 2681              	 .cfi_startproc
 2682              	 
 2683              	 
 2684              	 
 2685 0000 80B4     	 push {r7}
 2686              	.LCFI187:
 2687              	 .cfi_def_cfa_offset 4
 2688              	 .cfi_offset 7,-4
 2689 0002 83B0     	 sub sp,sp,#12
 2690              	.LCFI188:
 2691              	 .cfi_def_cfa_offset 16
 2692 0004 00AF     	 add r7,sp,#0
 2693              	.LCFI189:
 2694              	 .cfi_def_cfa_register 7
 2695 0006 7860     	 str r0,[r7,#4]
 2696 0008 0B46     	 mov r3,r1
 2697 000a FB70     	 strb r3,[r7,#3]
 618:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2698              	 .loc 2 618 0
 2699 000c FB78     	 ldrb r3,[r7,#3]
 2700 000e FA78     	 ldrb r2,[r7,#3]
 2701 0010 7968     	 ldr r1,[r7,#4]
 2702 0012 5820     	 movs r0,#88
 2703 0014 00FB02F2 	 mul r2,r0,r2
 2704 0018 0A44     	 add r2,r2,r1
 2705 001a 4032     	 adds r2,r2,#64
 2706 001c 1268     	 ldr r2,[r2]
 2707 001e 22F08042 	 bic r2,r2,#1073741824
 2708 0022 7968     	 ldr r1,[r7,#4]
 2709 0024 5820     	 movs r0,#88
 2710 0026 00FB03F3 	 mul r3,r0,r3
 2711 002a 0B44     	 add r3,r3,r1
 2712 002c 4033     	 adds r3,r3,#64
 2713 002e 1A60     	 str r2,[r3]
 619:../Libraries/XMCLib/src/xmc_dma.c **** }
 2714              	 .loc 2 619 0
 2715 0030 0C37     	 adds r7,r7,#12
 2716              	.LCFI190:
 2717              	 .cfi_def_cfa_offset 4
 2718 0032 BD46     	 mov sp,r7
 2719              	.LCFI191:
 2720              	 .cfi_def_cfa_register 13
 2721              	 
 2722 0034 5DF8047B 	 ldr r7,[sp],#4
 2723              	.LCFI192:
 2724              	 .cfi_restore 7
 2725              	 .cfi_def_cfa_offset 0
 2726 0038 7047     	 bx lr
 2727              	 .cfi_endproc
 2728              	.LFE211:
 2730 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationAddressReload,"ax",%progbits
 2731              	 .align 2
 2732              	 .global XMC_DMA_CH_EnableDestinationAddressReload
 2733              	 .thumb
 2734              	 .thumb_func
 2736              	XMC_DMA_CH_EnableDestinationAddressReload:
 2737              	.LFB212:
 620:../Libraries/XMCLib/src/xmc_dma.c **** 
 621:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination address reload */
 622:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 623:../Libraries/XMCLib/src/xmc_dma.c **** {
 2738              	 .loc 2 623 0
 2739              	 .cfi_startproc
 2740              	 
 2741              	 
 2742              	 
 2743 0000 80B4     	 push {r7}
 2744              	.LCFI193:
 2745              	 .cfi_def_cfa_offset 4
 2746              	 .cfi_offset 7,-4
 2747 0002 83B0     	 sub sp,sp,#12
 2748              	.LCFI194:
 2749              	 .cfi_def_cfa_offset 16
 2750 0004 00AF     	 add r7,sp,#0
 2751              	.LCFI195:
 2752              	 .cfi_def_cfa_register 7
 2753 0006 7860     	 str r0,[r7,#4]
 2754 0008 0B46     	 mov r3,r1
 2755 000a FB70     	 strb r3,[r7,#3]
 624:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2756              	 .loc 2 624 0
 2757 000c FB78     	 ldrb r3,[r7,#3]
 2758 000e FA78     	 ldrb r2,[r7,#3]
 2759 0010 7968     	 ldr r1,[r7,#4]
 2760 0012 5820     	 movs r0,#88
 2761 0014 00FB02F2 	 mul r2,r0,r2
 2762 0018 0A44     	 add r2,r2,r1
 2763 001a 4032     	 adds r2,r2,#64
 2764 001c 1268     	 ldr r2,[r2]
 2765 001e 42F00042 	 orr r2,r2,#-2147483648
 2766 0022 7968     	 ldr r1,[r7,#4]
 2767 0024 5820     	 movs r0,#88
 2768 0026 00FB03F3 	 mul r3,r0,r3
 2769 002a 0B44     	 add r3,r3,r1
 2770 002c 4033     	 adds r3,r3,#64
 2771 002e 1A60     	 str r2,[r3]
 625:../Libraries/XMCLib/src/xmc_dma.c **** }
 2772              	 .loc 2 625 0
 2773 0030 0C37     	 adds r7,r7,#12
 2774              	.LCFI196:
 2775              	 .cfi_def_cfa_offset 4
 2776 0032 BD46     	 mov sp,r7
 2777              	.LCFI197:
 2778              	 .cfi_def_cfa_register 13
 2779              	 
 2780 0034 5DF8047B 	 ldr r7,[sp],#4
 2781              	.LCFI198:
 2782              	 .cfi_restore 7
 2783              	 .cfi_def_cfa_offset 0
 2784 0038 7047     	 bx lr
 2785              	 .cfi_endproc
 2786              	.LFE212:
 2788 003a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationAddressReload,"ax",%progbits
 2789              	 .align 2
 2790              	 .global XMC_DMA_CH_DisableDestinationAddressReload
 2791              	 .thumb
 2792              	 .thumb_func
 2794              	XMC_DMA_CH_DisableDestinationAddressReload:
 2795              	.LFB213:
 626:../Libraries/XMCLib/src/xmc_dma.c **** 
 627:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination address reload */
 628:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 629:../Libraries/XMCLib/src/xmc_dma.c **** {
 2796              	 .loc 2 629 0
 2797              	 .cfi_startproc
 2798              	 
 2799              	 
 2800              	 
 2801 0000 80B4     	 push {r7}
 2802              	.LCFI199:
 2803              	 .cfi_def_cfa_offset 4
 2804              	 .cfi_offset 7,-4
 2805 0002 83B0     	 sub sp,sp,#12
 2806              	.LCFI200:
 2807              	 .cfi_def_cfa_offset 16
 2808 0004 00AF     	 add r7,sp,#0
 2809              	.LCFI201:
 2810              	 .cfi_def_cfa_register 7
 2811 0006 7860     	 str r0,[r7,#4]
 2812 0008 0B46     	 mov r3,r1
 2813 000a FB70     	 strb r3,[r7,#3]
 630:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2814              	 .loc 2 630 0
 2815 000c FB78     	 ldrb r3,[r7,#3]
 2816 000e FA78     	 ldrb r2,[r7,#3]
 2817 0010 7968     	 ldr r1,[r7,#4]
 2818 0012 5820     	 movs r0,#88
 2819 0014 00FB02F2 	 mul r2,r0,r2
 2820 0018 0A44     	 add r2,r2,r1
 2821 001a 4032     	 adds r2,r2,#64
 2822 001c 1268     	 ldr r2,[r2]
 2823 001e 22F00042 	 bic r2,r2,#-2147483648
 2824 0022 7968     	 ldr r1,[r7,#4]
 2825 0024 5820     	 movs r0,#88
 2826 0026 00FB03F3 	 mul r3,r0,r3
 2827 002a 0B44     	 add r3,r3,r1
 2828 002c 4033     	 adds r3,r3,#64
 2829 002e 1A60     	 str r2,[r3]
 631:../Libraries/XMCLib/src/xmc_dma.c **** }
 2830              	 .loc 2 631 0
 2831 0030 0C37     	 adds r7,r7,#12
 2832              	.LCFI202:
 2833              	 .cfi_def_cfa_offset 4
 2834 0032 BD46     	 mov sp,r7
 2835              	.LCFI203:
 2836              	 .cfi_def_cfa_register 13
 2837              	 
 2838 0034 5DF8047B 	 ldr r7,[sp],#4
 2839              	.LCFI204:
 2840              	 .cfi_restore 7
 2841              	 .cfi_def_cfa_offset 0
 2842 0038 7047     	 bx lr
 2843              	 .cfi_endproc
 2844              	.LFE213:
 2846 003a 00BF     	 .section .text.XMC_DMA_CH_RequestLastMultiblockTransfer,"ax",%progbits
 2847              	 .align 2
 2848              	 .global XMC_DMA_CH_RequestLastMultiblockTransfer
 2849              	 .thumb
 2850              	 .thumb_func
 2852              	XMC_DMA_CH_RequestLastMultiblockTransfer:
 2853              	.LFB214:
 632:../Libraries/XMCLib/src/xmc_dma.c **** 
 633:../Libraries/XMCLib/src/xmc_dma.c **** /* Request last multi-block transfer */
 634:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
 635:../Libraries/XMCLib/src/xmc_dma.c **** {
 2854              	 .loc 2 635 0
 2855              	 .cfi_startproc
 2856              	 
 2857              	 
 2858              	 
 2859 0000 80B4     	 push {r7}
 2860              	.LCFI205:
 2861              	 .cfi_def_cfa_offset 4
 2862              	 .cfi_offset 7,-4
 2863 0002 83B0     	 sub sp,sp,#12
 2864              	.LCFI206:
 2865              	 .cfi_def_cfa_offset 16
 2866 0004 00AF     	 add r7,sp,#0
 2867              	.LCFI207:
 2868              	 .cfi_def_cfa_register 7
 2869 0006 7860     	 str r0,[r7,#4]
 2870 0008 0B46     	 mov r3,r1
 2871 000a FB70     	 strb r3,[r7,#3]
 636:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Ms
 2872              	 .loc 2 636 0
 2873 000c FB78     	 ldrb r3,[r7,#3]
 2874 000e FA78     	 ldrb r2,[r7,#3]
 2875 0010 7968     	 ldr r1,[r7,#4]
 2876 0012 5820     	 movs r0,#88
 2877 0014 00FB02F2 	 mul r2,r0,r2
 2878 0018 0A44     	 add r2,r2,r1
 2879 001a 4032     	 adds r2,r2,#64
 2880 001c 1268     	 ldr r2,[r2]
 2881 001e 22F04042 	 bic r2,r2,#-1073741824
 2882 0022 7968     	 ldr r1,[r7,#4]
 2883 0024 5820     	 movs r0,#88
 2884 0026 00FB03F3 	 mul r3,r0,r3
 2885 002a 0B44     	 add r3,r3,r1
 2886 002c 4033     	 adds r3,r3,#64
 2887 002e 1A60     	 str r2,[r3]
 637:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Ms
 2888              	 .loc 2 637 0
 2889 0030 FB78     	 ldrb r3,[r7,#3]
 2890 0032 FA78     	 ldrb r2,[r7,#3]
 2891 0034 7968     	 ldr r1,[r7,#4]
 2892 0036 5820     	 movs r0,#88
 2893 0038 00FB02F2 	 mul r2,r0,r2
 2894 003c 0A44     	 add r2,r2,r1
 2895 003e 1832     	 adds r2,r2,#24
 2896 0040 1268     	 ldr r2,[r2]
 2897 0042 22F0C052 	 bic r2,r2,#402653184
 2898 0046 7968     	 ldr r1,[r7,#4]
 2899 0048 5820     	 movs r0,#88
 2900 004a 00FB03F3 	 mul r3,r0,r3
 2901 004e 0B44     	 add r3,r3,r1
 2902 0050 1833     	 adds r3,r3,#24
 2903 0052 1A60     	 str r2,[r3]
 638:../Libraries/XMCLib/src/xmc_dma.c **** }
 2904              	 .loc 2 638 0
 2905 0054 0C37     	 adds r7,r7,#12
 2906              	.LCFI208:
 2907              	 .cfi_def_cfa_offset 4
 2908 0056 BD46     	 mov sp,r7
 2909              	.LCFI209:
 2910              	 .cfi_def_cfa_register 13
 2911              	 
 2912 0058 5DF8047B 	 ldr r7,[sp],#4
 2913              	.LCFI210:
 2914              	 .cfi_restore 7
 2915              	 .cfi_def_cfa_offset 0
 2916 005c 7047     	 bx lr
 2917              	 .cfi_endproc
 2918              	.LFE214:
 2920 005e 00BF     	 .section .text.XMC_DMA_CH_SetEventHandler,"ax",%progbits
 2921              	 .align 2
 2922              	 .global XMC_DMA_CH_SetEventHandler
 2923              	 .thumb
 2924              	 .thumb_func
 2926              	XMC_DMA_CH_SetEventHandler:
 2927              	.LFB215:
 639:../Libraries/XMCLib/src/xmc_dma.c **** 
 640:../Libraries/XMCLib/src/xmc_dma.c **** /* Set event handler */
 641:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDL
 642:../Libraries/XMCLib/src/xmc_dma.c **** {
 2928              	 .loc 2 642 0
 2929              	 .cfi_startproc
 2930              	 
 2931              	 
 2932              	 
 2933 0000 80B4     	 push {r7}
 2934              	.LCFI211:
 2935              	 .cfi_def_cfa_offset 4
 2936              	 .cfi_offset 7,-4
 2937 0002 85B0     	 sub sp,sp,#20
 2938              	.LCFI212:
 2939              	 .cfi_def_cfa_offset 24
 2940 0004 00AF     	 add r7,sp,#0
 2941              	.LCFI213:
 2942              	 .cfi_def_cfa_register 7
 2943 0006 F860     	 str r0,[r7,#12]
 2944 0008 0B46     	 mov r3,r1
 2945 000a 7A60     	 str r2,[r7,#4]
 2946 000c FB72     	 strb r3,[r7,#11]
 643:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 644:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 2947              	 .loc 2 644 0
 2948 000e FB68     	 ldr r3,[r7,#12]
 2949 0010 094A     	 ldr r2,.L137
 2950 0012 9342     	 cmp r3,r2
 2951 0014 05D1     	 bne .L135
 645:../Libraries/XMCLib/src/xmc_dma.c ****   {
 646:../Libraries/XMCLib/src/xmc_dma.c **** #else
 647:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 648:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 649:../Libraries/XMCLib/src/xmc_dma.c ****     dma0_event_handlers[channel] = event_handler;
 2952              	 .loc 2 649 0
 2953 0016 FB7A     	 ldrb r3,[r7,#11]
 2954 0018 0849     	 ldr r1,.L137+4
 2955 001a 7A68     	 ldr r2,[r7,#4]
 2956 001c 41F82320 	 str r2,[r1,r3,lsl#2]
 2957 0020 04E0     	 b .L134
 2958              	.L135:
 650:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 651:../Libraries/XMCLib/src/xmc_dma.c ****   }
 652:../Libraries/XMCLib/src/xmc_dma.c ****   else
 653:../Libraries/XMCLib/src/xmc_dma.c ****   {
 654:../Libraries/XMCLib/src/xmc_dma.c ****     dma1_event_handlers[channel] = event_handler;
 2959              	 .loc 2 654 0
 2960 0022 FB7A     	 ldrb r3,[r7,#11]
 2961 0024 0649     	 ldr r1,.L137+8
 2962 0026 7A68     	 ldr r2,[r7,#4]
 2963 0028 41F82320 	 str r2,[r1,r3,lsl#2]
 2964              	.L134:
 655:../Libraries/XMCLib/src/xmc_dma.c ****   }
 656:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 657:../Libraries/XMCLib/src/xmc_dma.c **** }
 2965              	 .loc 2 657 0
 2966 002c 1437     	 adds r7,r7,#20
 2967              	.LCFI214:
 2968              	 .cfi_def_cfa_offset 4
 2969 002e BD46     	 mov sp,r7
 2970              	.LCFI215:
 2971              	 .cfi_def_cfa_register 13
 2972              	 
 2973 0030 5DF8047B 	 ldr r7,[sp],#4
 2974              	.LCFI216:
 2975              	 .cfi_restore 7
 2976              	 .cfi_def_cfa_offset 0
 2977 0034 7047     	 bx lr
 2978              	.L138:
 2979 0036 00BF     	 .align 2
 2980              	.L137:
 2981 0038 00400150 	 .word 1342259200
 2982 003c 00000000 	 .word dma0_event_handlers
 2983 0040 00000000 	 .word dma1_event_handlers
 2984              	 .cfi_endproc
 2985              	.LFE215:
 2987              	 .section .text.XMC_DMA_CH_ClearSourcePeripheralRequest,"ax",%progbits
 2988              	 .align 2
 2989              	 .global XMC_DMA_CH_ClearSourcePeripheralRequest
 2990              	 .thumb
 2991              	 .thumb_func
 2993              	XMC_DMA_CH_ClearSourcePeripheralRequest:
 2994              	.LFB216:
 658:../Libraries/XMCLib/src/xmc_dma.c **** 
 659:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 660:../Libraries/XMCLib/src/xmc_dma.c **** {
 2995              	 .loc 2 660 0
 2996              	 .cfi_startproc
 2997              	 
 2998              	 
 2999 0000 80B5     	 push {r7,lr}
 3000              	.LCFI217:
 3001              	 .cfi_def_cfa_offset 8
 3002              	 .cfi_offset 7,-8
 3003              	 .cfi_offset 14,-4
 3004 0002 84B0     	 sub sp,sp,#16
 3005              	.LCFI218:
 3006              	 .cfi_def_cfa_offset 24
 3007 0004 00AF     	 add r7,sp,#0
 3008              	.LCFI219:
 3009              	 .cfi_def_cfa_register 7
 3010 0006 7860     	 str r0,[r7,#4]
 3011 0008 0B46     	 mov r3,r1
 3012 000a FB70     	 strb r3,[r7,#3]
 661:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 662:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 3013              	 .loc 2 662 0
 3014 000c FB78     	 ldrb r3,[r7,#3]
 3015 000e 7A68     	 ldr r2,[r7,#4]
 3016 0010 5821     	 movs r1,#88
 3017 0012 01FB03F3 	 mul r3,r1,r3
 3018 0016 1344     	 add r3,r3,r2
 3019 0018 4033     	 adds r3,r3,#64
 3020 001a 5B68     	 ldr r3,[r3,#4]
 3021 001c 03F4F063 	 and r3,r3,#1920
 3022 0020 DB09     	 lsrs r3,r3,#7
 3023 0022 FB60     	 str r3,[r7,#12]
 663:../Libraries/XMCLib/src/xmc_dma.c **** 
 664:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 3024              	 .loc 2 664 0
 3025 0024 FB68     	 ldr r3,[r7,#12]
 3026 0026 DBB2     	 uxtb r3,r3
 3027 0028 7868     	 ldr r0,[r7,#4]
 3028 002a 1946     	 mov r1,r3
 3029 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 665:../Libraries/XMCLib/src/xmc_dma.c **** }
 3030              	 .loc 2 665 0
 3031 0030 1037     	 adds r7,r7,#16
 3032              	.LCFI220:
 3033              	 .cfi_def_cfa_offset 8
 3034 0032 BD46     	 mov sp,r7
 3035              	.LCFI221:
 3036              	 .cfi_def_cfa_register 13
 3037              	 
 3038 0034 80BD     	 pop {r7,pc}
 3039              	 .cfi_endproc
 3040              	.LFE216:
 3042 0036 00BF     	 .section .text.XMC_DMA_CH_ClearDestinationPeripheralRequest,"ax",%progbits
 3043              	 .align 2
 3044              	 .global XMC_DMA_CH_ClearDestinationPeripheralRequest
 3045              	 .thumb
 3046              	 .thumb_func
 3048              	XMC_DMA_CH_ClearDestinationPeripheralRequest:
 3049              	.LFB217:
 666:../Libraries/XMCLib/src/xmc_dma.c **** 
 667:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 668:../Libraries/XMCLib/src/xmc_dma.c **** {
 3050              	 .loc 2 668 0
 3051              	 .cfi_startproc
 3052              	 
 3053              	 
 3054 0000 80B5     	 push {r7,lr}
 3055              	.LCFI222:
 3056              	 .cfi_def_cfa_offset 8
 3057              	 .cfi_offset 7,-8
 3058              	 .cfi_offset 14,-4
 3059 0002 84B0     	 sub sp,sp,#16
 3060              	.LCFI223:
 3061              	 .cfi_def_cfa_offset 24
 3062 0004 00AF     	 add r7,sp,#0
 3063              	.LCFI224:
 3064              	 .cfi_def_cfa_register 7
 3065 0006 7860     	 str r0,[r7,#4]
 3066 0008 0B46     	 mov r3,r1
 3067 000a FB70     	 strb r3,[r7,#3]
 669:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 670:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 3068              	 .loc 2 670 0
 3069 000c FB78     	 ldrb r3,[r7,#3]
 3070 000e 7A68     	 ldr r2,[r7,#4]
 3071 0010 5821     	 movs r1,#88
 3072 0012 01FB03F3 	 mul r3,r1,r3
 3073 0016 1344     	 add r3,r3,r2
 3074 0018 4033     	 adds r3,r3,#64
 3075 001a 5B68     	 ldr r3,[r3,#4]
 3076 001c 03F4F043 	 and r3,r3,#30720
 3077 0020 DB0A     	 lsrs r3,r3,#11
 3078 0022 FB60     	 str r3,[r7,#12]
 671:../Libraries/XMCLib/src/xmc_dma.c **** 
 672:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 3079              	 .loc 2 672 0
 3080 0024 FB68     	 ldr r3,[r7,#12]
 3081 0026 DBB2     	 uxtb r3,r3
 3082 0028 7868     	 ldr r0,[r7,#4]
 3083 002a 1946     	 mov r1,r3
 3084 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 673:../Libraries/XMCLib/src/xmc_dma.c **** }
 3085              	 .loc 2 673 0
 3086 0030 1037     	 adds r7,r7,#16
 3087              	.LCFI225:
 3088              	 .cfi_def_cfa_offset 8
 3089 0032 BD46     	 mov sp,r7
 3090              	.LCFI226:
 3091              	 .cfi_def_cfa_register 13
 3092              	 
 3093 0034 80BD     	 pop {r7,pc}
 3094              	 .cfi_endproc
 3095              	.LFE217:
 3097 0036 00BF     	 .section .text.XMC_DMA_IRQHandler,"ax",%progbits
 3098              	 .align 2
 3099              	 .global XMC_DMA_IRQHandler
 3100              	 .thumb
 3101              	 .thumb_func
 3103              	XMC_DMA_IRQHandler:
 3104              	.LFB218:
 674:../Libraries/XMCLib/src/xmc_dma.c **** 
 675:../Libraries/XMCLib/src/xmc_dma.c **** /* Default DMA IRQ handler */
 676:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
 677:../Libraries/XMCLib/src/xmc_dma.c **** {
 3105              	 .loc 2 677 0
 3106              	 .cfi_startproc
 3107              	 
 3108              	 
 3109 0000 80B5     	 push {r7,lr}
 3110              	.LCFI227:
 3111              	 .cfi_def_cfa_offset 8
 3112              	 .cfi_offset 7,-8
 3113              	 .cfi_offset 14,-4
 3114 0002 88B0     	 sub sp,sp,#32
 3115              	.LCFI228:
 3116              	 .cfi_def_cfa_offset 40
 3117 0004 00AF     	 add r7,sp,#0
 3118              	.LCFI229:
 3119              	 .cfi_def_cfa_register 7
 3120 0006 7860     	 str r0,[r7,#4]
 678:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event;
 679:../Libraries/XMCLib/src/xmc_dma.c ****   int32_t channel;
 680:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t mask;
 681:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
 682:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t event_handler;
 683:../Libraries/XMCLib/src/xmc_dma.c **** 
 684:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 685:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 3121              	 .loc 2 685 0
 3122 0008 7B68     	 ldr r3,[r7,#4]
 3123 000a 824A     	 ldr r2,.L174
 3124 000c 9342     	 cmp r3,r2
 3125 000e 02D1     	 bne .L142
 686:../Libraries/XMCLib/src/xmc_dma.c ****   {
 687:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 688:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma0_event_handlers;
 3126              	 .loc 2 688 0
 3127 0010 814B     	 ldr r3,.L174+4
 3128 0012 BB61     	 str r3,[r7,#24]
 3129 0014 01E0     	 b .L143
 3130              	.L142:
 689:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 690:../Libraries/XMCLib/src/xmc_dma.c ****   }
 691:../Libraries/XMCLib/src/xmc_dma.c ****   else
 692:../Libraries/XMCLib/src/xmc_dma.c ****   {
 693:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma1_event_handlers;
 3131              	 .loc 2 693 0
 3132 0016 814B     	 ldr r3,.L174+8
 3133 0018 BB61     	 str r3,[r7,#24]
 3134              	.L143:
 694:../Libraries/XMCLib/src/xmc_dma.c ****   }
 695:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 696:../Libraries/XMCLib/src/xmc_dma.c **** 
 697:../Libraries/XMCLib/src/xmc_dma.c ****   event = XMC_DMA_GetEventStatus(dma);
 3135              	 .loc 2 697 0
 3136 001a 7868     	 ldr r0,[r7,#4]
 3137 001c FFF7FEFF 	 bl XMC_DMA_GetEventStatus
 3138 0020 7861     	 str r0,[r7,#20]
 698:../Libraries/XMCLib/src/xmc_dma.c ****   channel = 0;
 3139              	 .loc 2 698 0
 3140 0022 0023     	 movs r3,#0
 3141 0024 FB61     	 str r3,[r7,#28]
 699:../Libraries/XMCLib/src/xmc_dma.c **** 
 700:../Libraries/XMCLib/src/xmc_dma.c ****   if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 3142              	 .loc 2 700 0
 3143 0026 7B69     	 ldr r3,[r7,#20]
 3144 0028 03F01003 	 and r3,r3,#16
 3145 002c 002B     	 cmp r3,#0
 3146 002e 2BD0     	 beq .L144
 701:../Libraries/XMCLib/src/xmc_dma.c ****   {
 702:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsErrorStatus(dma);
 3147              	 .loc 2 702 0
 3148 0030 7868     	 ldr r0,[r7,#4]
 3149 0032 FFF7FEFF 	 bl XMC_DMA_GetChannelsErrorStatus
 3150 0036 7861     	 str r0,[r7,#20]
 703:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3151              	 .loc 2 703 0
 3152 0038 21E0     	 b .L145
 3153              	.L149:
 704:../Libraries/XMCLib/src/xmc_dma.c ****     {
 705:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3154              	 .loc 2 705 0
 3155 003a 0122     	 movs r2,#1
 3156 003c FB69     	 ldr r3,[r7,#28]
 3157 003e 02FA03F3 	 lsl r3,r2,r3
 3158 0042 3B61     	 str r3,[r7,#16]
 706:../Libraries/XMCLib/src/xmc_dma.c ****       if ((event & mask) != 0)
 3159              	 .loc 2 706 0
 3160 0044 7A69     	 ldr r2,[r7,#20]
 3161 0046 3B69     	 ldr r3,[r7,#16]
 3162 0048 1340     	 ands r3,r3,r2
 3163 004a 002B     	 cmp r3,#0
 3164 004c 14D0     	 beq .L146
 707:../Libraries/XMCLib/src/xmc_dma.c ****       {
 708:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 3165              	 .loc 2 708 0
 3166 004e FB69     	 ldr r3,[r7,#28]
 3167 0050 DBB2     	 uxtb r3,r3
 3168 0052 7868     	 ldr r0,[r7,#4]
 3169 0054 1946     	 mov r1,r3
 3170 0056 1022     	 movs r2,#16
 3171 0058 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 709:../Libraries/XMCLib/src/xmc_dma.c **** 
 710:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 711:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3172              	 .loc 2 711 0
 3173 005c FB69     	 ldr r3,[r7,#28]
 3174 005e 9B00     	 lsls r3,r3,#2
 3175 0060 BA69     	 ldr r2,[r7,#24]
 3176 0062 1344     	 add r3,r3,r2
 3177 0064 1B68     	 ldr r3,[r3]
 3178 0066 FB60     	 str r3,[r7,#12]
 712:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3179              	 .loc 2 712 0
 3180 0068 FB68     	 ldr r3,[r7,#12]
 3181 006a 002B     	 cmp r3,#0
 3182 006c 03D0     	 beq .L147
 713:../Libraries/XMCLib/src/xmc_dma.c ****         {
 714:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_ERROR);
 3183              	 .loc 2 714 0
 3184 006e FB68     	 ldr r3,[r7,#12]
 3185 0070 1020     	 movs r0,#16
 3186 0072 9847     	 blx r3
 715:../Libraries/XMCLib/src/xmc_dma.c ****         }
 716:../Libraries/XMCLib/src/xmc_dma.c **** 
 717:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3187              	 .loc 2 717 0
 3188 0074 07E0     	 b .L148
 3189              	.L147:
 3190 0076 06E0     	 b .L148
 3191              	.L146:
 718:../Libraries/XMCLib/src/xmc_dma.c ****       }
 719:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3192              	 .loc 2 719 0
 3193 0078 FB69     	 ldr r3,[r7,#28]
 3194 007a 0133     	 adds r3,r3,#1
 3195 007c FB61     	 str r3,[r7,#28]
 3196              	.L145:
 703:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3197              	 .loc 2 703 0
 3198 007e 7B69     	 ldr r3,[r7,#20]
 3199 0080 002B     	 cmp r3,#0
 3200 0082 DAD1     	 bne .L149
 3201 0084 C3E0     	 b .L141
 3202              	.L148:
 3203 0086 C2E0     	 b .L141
 3204              	.L144:
 720:../Libraries/XMCLib/src/xmc_dma.c ****     }
 721:../Libraries/XMCLib/src/xmc_dma.c ****   }
 722:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 3205              	 .loc 2 722 0
 3206 0088 7B69     	 ldr r3,[r7,#20]
 3207 008a 03F00103 	 and r3,r3,#1
 3208 008e 002B     	 cmp r3,#0
 3209 0090 2BD0     	 beq .L151
 723:../Libraries/XMCLib/src/xmc_dma.c ****   {
 724:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 3210              	 .loc 2 724 0
 3211 0092 7868     	 ldr r0,[r7,#4]
 3212 0094 FFF7FEFF 	 bl XMC_DMA_GetChannelsTransferCompleteStatus
 3213 0098 7861     	 str r0,[r7,#20]
 725:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3214              	 .loc 2 725 0
 3215 009a 21E0     	 b .L152
 3216              	.L156:
 726:../Libraries/XMCLib/src/xmc_dma.c ****     {
 727:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3217              	 .loc 2 727 0
 3218 009c 0122     	 movs r2,#1
 3219 009e FB69     	 ldr r3,[r7,#28]
 3220 00a0 02FA03F3 	 lsl r3,r2,r3
 3221 00a4 3B61     	 str r3,[r7,#16]
 728:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3222              	 .loc 2 728 0
 3223 00a6 7A69     	 ldr r2,[r7,#20]
 3224 00a8 3B69     	 ldr r3,[r7,#16]
 3225 00aa 1340     	 ands r3,r3,r2
 3226 00ac 002B     	 cmp r3,#0
 3227 00ae 14D0     	 beq .L153
 729:../Libraries/XMCLib/src/xmc_dma.c ****       {
 730:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TR
 3228              	 .loc 2 730 0
 3229 00b0 FB69     	 ldr r3,[r7,#28]
 3230 00b2 DBB2     	 uxtb r3,r3
 3231 00b4 7868     	 ldr r0,[r7,#4]
 3232 00b6 1946     	 mov r1,r3
 3233 00b8 0F22     	 movs r2,#15
 3234 00ba FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 731:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 732:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
 733:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));
 734:../Libraries/XMCLib/src/xmc_dma.c **** 
 735:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 736:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3235              	 .loc 2 736 0
 3236 00be FB69     	 ldr r3,[r7,#28]
 3237 00c0 9B00     	 lsls r3,r3,#2
 3238 00c2 BA69     	 ldr r2,[r7,#24]
 3239 00c4 1344     	 add r3,r3,r2
 3240 00c6 1B68     	 ldr r3,[r3]
 3241 00c8 FB60     	 str r3,[r7,#12]
 737:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3242              	 .loc 2 737 0
 3243 00ca FB68     	 ldr r3,[r7,#12]
 3244 00cc 002B     	 cmp r3,#0
 3245 00ce 03D0     	 beq .L154
 738:../Libraries/XMCLib/src/xmc_dma.c ****         {
 739:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 3246              	 .loc 2 739 0
 3247 00d0 FB68     	 ldr r3,[r7,#12]
 3248 00d2 0120     	 movs r0,#1
 3249 00d4 9847     	 blx r3
 740:../Libraries/XMCLib/src/xmc_dma.c ****         }
 741:../Libraries/XMCLib/src/xmc_dma.c **** 
 742:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3250              	 .loc 2 742 0
 3251 00d6 07E0     	 b .L155
 3252              	.L154:
 3253 00d8 06E0     	 b .L155
 3254              	.L153:
 743:../Libraries/XMCLib/src/xmc_dma.c ****       }
 744:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3255              	 .loc 2 744 0
 3256 00da FB69     	 ldr r3,[r7,#28]
 3257 00dc 0133     	 adds r3,r3,#1
 3258 00de FB61     	 str r3,[r7,#28]
 3259              	.L152:
 725:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3260              	 .loc 2 725 0
 3261 00e0 7B69     	 ldr r3,[r7,#20]
 3262 00e2 002B     	 cmp r3,#0
 3263 00e4 DAD1     	 bne .L156
 3264 00e6 92E0     	 b .L141
 3265              	.L155:
 3266 00e8 91E0     	 b .L141
 3267              	.L151:
 745:../Libraries/XMCLib/src/xmc_dma.c ****     }
 746:../Libraries/XMCLib/src/xmc_dma.c ****   }
 747:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 3268              	 .loc 2 747 0
 3269 00ea 7B69     	 ldr r3,[r7,#20]
 3270 00ec 03F00203 	 and r3,r3,#2
 3271 00f0 002B     	 cmp r3,#0
 3272 00f2 2BD0     	 beq .L157
 748:../Libraries/XMCLib/src/xmc_dma.c ****   {
 749:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 3273              	 .loc 2 749 0
 3274 00f4 7868     	 ldr r0,[r7,#4]
 3275 00f6 FFF7FEFF 	 bl XMC_DMA_GetChannelsBlockCompleteStatus
 3276 00fa 7861     	 str r0,[r7,#20]
 750:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3277              	 .loc 2 750 0
 3278 00fc 21E0     	 b .L158
 3279              	.L162:
 751:../Libraries/XMCLib/src/xmc_dma.c ****     {
 752:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3280              	 .loc 2 752 0
 3281 00fe 0122     	 movs r2,#1
 3282 0100 FB69     	 ldr r3,[r7,#28]
 3283 0102 02FA03F3 	 lsl r3,r2,r3
 3284 0106 3B61     	 str r3,[r7,#16]
 753:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3285              	 .loc 2 753 0
 3286 0108 7A69     	 ldr r2,[r7,#20]
 3287 010a 3B69     	 ldr r3,[r7,#16]
 3288 010c 1340     	 ands r3,r3,r2
 3289 010e 002B     	 cmp r3,#0
 3290 0110 14D0     	 beq .L159
 754:../Libraries/XMCLib/src/xmc_dma.c ****       {
 755:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BL
 3291              	 .loc 2 755 0
 3292 0112 FB69     	 ldr r3,[r7,#28]
 3293 0114 DBB2     	 uxtb r3,r3
 3294 0116 7868     	 ldr r0,[r7,#4]
 3295 0118 1946     	 mov r1,r3
 3296 011a 0E22     	 movs r2,#14
 3297 011c FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 756:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
 757:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));
 758:../Libraries/XMCLib/src/xmc_dma.c **** 
 759:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 760:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3298              	 .loc 2 760 0
 3299 0120 FB69     	 ldr r3,[r7,#28]
 3300 0122 9B00     	 lsls r3,r3,#2
 3301 0124 BA69     	 ldr r2,[r7,#24]
 3302 0126 1344     	 add r3,r3,r2
 3303 0128 1B68     	 ldr r3,[r3]
 3304 012a FB60     	 str r3,[r7,#12]
 761:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3305              	 .loc 2 761 0
 3306 012c FB68     	 ldr r3,[r7,#12]
 3307 012e 002B     	 cmp r3,#0
 3308 0130 03D0     	 beq .L160
 762:../Libraries/XMCLib/src/xmc_dma.c ****         {
 763:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 3309              	 .loc 2 763 0
 3310 0132 FB68     	 ldr r3,[r7,#12]
 3311 0134 0220     	 movs r0,#2
 3312 0136 9847     	 blx r3
 764:../Libraries/XMCLib/src/xmc_dma.c ****         }
 765:../Libraries/XMCLib/src/xmc_dma.c **** 
 766:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3313              	 .loc 2 766 0
 3314 0138 07E0     	 b .L161
 3315              	.L160:
 3316 013a 06E0     	 b .L161
 3317              	.L159:
 767:../Libraries/XMCLib/src/xmc_dma.c ****       }
 768:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3318              	 .loc 2 768 0
 3319 013c FB69     	 ldr r3,[r7,#28]
 3320 013e 0133     	 adds r3,r3,#1
 3321 0140 FB61     	 str r3,[r7,#28]
 3322              	.L158:
 750:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3323              	 .loc 2 750 0
 3324 0142 7B69     	 ldr r3,[r7,#20]
 3325 0144 002B     	 cmp r3,#0
 3326 0146 DAD1     	 bne .L162
 3327 0148 61E0     	 b .L141
 3328              	.L161:
 3329 014a 60E0     	 b .L141
 3330              	.L157:
 769:../Libraries/XMCLib/src/xmc_dma.c ****     }
 770:../Libraries/XMCLib/src/xmc_dma.c ****   }
 771:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3331              	 .loc 2 771 0
 3332 014c 7B69     	 ldr r3,[r7,#20]
 3333 014e 03F00403 	 and r3,r3,#4
 3334 0152 002B     	 cmp r3,#0
 3335 0154 2BD0     	 beq .L163
 772:../Libraries/XMCLib/src/xmc_dma.c ****   {
 773:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 3336              	 .loc 2 773 0
 3337 0156 7868     	 ldr r0,[r7,#4]
 3338 0158 FFF7FEFF 	 bl XMC_DMA_GetChannelsSourceTransactionCompleteStatus
 3339 015c 7861     	 str r0,[r7,#20]
 774:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3340              	 .loc 2 774 0
 3341 015e 21E0     	 b .L164
 3342              	.L168:
 775:../Libraries/XMCLib/src/xmc_dma.c ****     {
 776:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3343              	 .loc 2 776 0
 3344 0160 0122     	 movs r2,#1
 3345 0162 FB69     	 ldr r3,[r7,#28]
 3346 0164 02FA03F3 	 lsl r3,r2,r3
 3347 0168 3B61     	 str r3,[r7,#16]
 777:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3348              	 .loc 2 777 0
 3349 016a 7A69     	 ldr r2,[r7,#20]
 3350 016c 3B69     	 ldr r3,[r7,#16]
 3351 016e 1340     	 ands r3,r3,r2
 3352 0170 002B     	 cmp r3,#0
 3353 0172 14D0     	 beq .L165
 778:../Libraries/XMCLib/src/xmc_dma.c ****       {
 779:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 3354              	 .loc 2 779 0
 3355 0174 FB69     	 ldr r3,[r7,#28]
 3356 0176 DBB2     	 uxtb r3,r3
 3357 0178 7868     	 ldr r0,[r7,#4]
 3358 017a 1946     	 mov r1,r3
 3359 017c 0422     	 movs r2,#4
 3360 017e FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 780:../Libraries/XMCLib/src/xmc_dma.c **** 
 781:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 782:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3361              	 .loc 2 782 0
 3362 0182 FB69     	 ldr r3,[r7,#28]
 3363 0184 9B00     	 lsls r3,r3,#2
 3364 0186 BA69     	 ldr r2,[r7,#24]
 3365 0188 1344     	 add r3,r3,r2
 3366 018a 1B68     	 ldr r3,[r3]
 3367 018c FB60     	 str r3,[r7,#12]
 783:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3368              	 .loc 2 783 0
 3369 018e FB68     	 ldr r3,[r7,#12]
 3370 0190 002B     	 cmp r3,#0
 3371 0192 03D0     	 beq .L166
 784:../Libraries/XMCLib/src/xmc_dma.c ****         {
 785:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 3372              	 .loc 2 785 0
 3373 0194 FB68     	 ldr r3,[r7,#12]
 3374 0196 0420     	 movs r0,#4
 3375 0198 9847     	 blx r3
 786:../Libraries/XMCLib/src/xmc_dma.c ****         }
 787:../Libraries/XMCLib/src/xmc_dma.c **** 
 788:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3376              	 .loc 2 788 0
 3377 019a 07E0     	 b .L167
 3378              	.L166:
 3379 019c 06E0     	 b .L167
 3380              	.L165:
 789:../Libraries/XMCLib/src/xmc_dma.c ****       }
 790:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3381              	 .loc 2 790 0
 3382 019e FB69     	 ldr r3,[r7,#28]
 3383 01a0 0133     	 adds r3,r3,#1
 3384 01a2 FB61     	 str r3,[r7,#28]
 3385              	.L164:
 774:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3386              	 .loc 2 774 0
 3387 01a4 7B69     	 ldr r3,[r7,#20]
 3388 01a6 002B     	 cmp r3,#0
 3389 01a8 DAD1     	 bne .L168
 3390 01aa 30E0     	 b .L141
 3391              	.L167:
 3392 01ac 2FE0     	 b .L141
 3393              	.L163:
 791:../Libraries/XMCLib/src/xmc_dma.c ****     }
 792:../Libraries/XMCLib/src/xmc_dma.c ****   }
 793:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3394              	 .loc 2 793 0
 3395 01ae 7B69     	 ldr r3,[r7,#20]
 3396 01b0 03F00803 	 and r3,r3,#8
 3397 01b4 002B     	 cmp r3,#0
 3398 01b6 2AD0     	 beq .L141
 794:../Libraries/XMCLib/src/xmc_dma.c ****   {
 795:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 3399              	 .loc 2 795 0
 3400 01b8 7868     	 ldr r0,[r7,#4]
 3401 01ba FFF7FEFF 	 bl XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
 3402 01be 7861     	 str r0,[r7,#20]
 796:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3403              	 .loc 2 796 0
 3404 01c0 21E0     	 b .L169
 3405              	.L173:
 797:../Libraries/XMCLib/src/xmc_dma.c ****     {
 798:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3406              	 .loc 2 798 0
 3407 01c2 0122     	 movs r2,#1
 3408 01c4 FB69     	 ldr r3,[r7,#28]
 3409 01c6 02FA03F3 	 lsl r3,r2,r3
 3410 01ca 3B61     	 str r3,[r7,#16]
 799:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3411              	 .loc 2 799 0
 3412 01cc 7A69     	 ldr r2,[r7,#20]
 3413 01ce 3B69     	 ldr r3,[r7,#16]
 3414 01d0 1340     	 ands r3,r3,r2
 3415 01d2 002B     	 cmp r3,#0
 3416 01d4 14D0     	 beq .L170
 800:../Libraries/XMCLib/src/xmc_dma.c ****       {
 801:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 3417              	 .loc 2 801 0
 3418 01d6 FB69     	 ldr r3,[r7,#28]
 3419 01d8 DBB2     	 uxtb r3,r3
 3420 01da 7868     	 ldr r0,[r7,#4]
 3421 01dc 1946     	 mov r1,r3
 3422 01de 0822     	 movs r2,#8
 3423 01e0 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 802:../Libraries/XMCLib/src/xmc_dma.c **** 
 803:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 804:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3424              	 .loc 2 804 0
 3425 01e4 FB69     	 ldr r3,[r7,#28]
 3426 01e6 9B00     	 lsls r3,r3,#2
 3427 01e8 BA69     	 ldr r2,[r7,#24]
 3428 01ea 1344     	 add r3,r3,r2
 3429 01ec 1B68     	 ldr r3,[r3]
 3430 01ee FB60     	 str r3,[r7,#12]
 805:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3431              	 .loc 2 805 0
 3432 01f0 FB68     	 ldr r3,[r7,#12]
 3433 01f2 002B     	 cmp r3,#0
 3434 01f4 03D0     	 beq .L171
 806:../Libraries/XMCLib/src/xmc_dma.c ****         {
 807:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 3435              	 .loc 2 807 0
 3436 01f6 FB68     	 ldr r3,[r7,#12]
 3437 01f8 0820     	 movs r0,#8
 3438 01fa 9847     	 blx r3
 808:../Libraries/XMCLib/src/xmc_dma.c ****         }
 809:../Libraries/XMCLib/src/xmc_dma.c **** 
 810:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3439              	 .loc 2 810 0
 3440 01fc 07E0     	 b .L172
 3441              	.L171:
 3442 01fe 06E0     	 b .L172
 3443              	.L170:
 811:../Libraries/XMCLib/src/xmc_dma.c ****       }
 812:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3444              	 .loc 2 812 0
 3445 0200 FB69     	 ldr r3,[r7,#28]
 3446 0202 0133     	 adds r3,r3,#1
 3447 0204 FB61     	 str r3,[r7,#28]
 3448              	.L169:
 796:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3449              	 .loc 2 796 0
 3450 0206 7B69     	 ldr r3,[r7,#20]
 3451 0208 002B     	 cmp r3,#0
 3452 020a DAD1     	 bne .L173
 3453 020c FFE7     	 b .L141
 3454              	.L172:
 3455              	.L141:
 813:../Libraries/XMCLib/src/xmc_dma.c ****     }
 814:../Libraries/XMCLib/src/xmc_dma.c ****   }
 815:../Libraries/XMCLib/src/xmc_dma.c ****   else
 816:../Libraries/XMCLib/src/xmc_dma.c ****   {
 817:../Libraries/XMCLib/src/xmc_dma.c ****     /* no active interrupt was found? */
 818:../Libraries/XMCLib/src/xmc_dma.c ****   }
 819:../Libraries/XMCLib/src/xmc_dma.c **** 
 820:../Libraries/XMCLib/src/xmc_dma.c **** }
 3456              	 .loc 2 820 0
 3457 020e 2037     	 adds r7,r7,#32
 3458              	.LCFI230:
 3459              	 .cfi_def_cfa_offset 8
 3460 0210 BD46     	 mov sp,r7
 3461              	.LCFI231:
 3462              	 .cfi_def_cfa_register 13
 3463              	 
 3464 0212 80BD     	 pop {r7,pc}
 3465              	.L175:
 3466              	 .align 2
 3467              	.L174:
 3468 0214 00400150 	 .word 1342259200
 3469 0218 00000000 	 .word dma0_event_handlers
 3470 021c 00000000 	 .word dma1_event_handlers
 3471              	 .cfi_endproc
 3472              	.LFE218:
 3474              	 .text
 3475              	.Letext0:
 3476              	 .file 3 "c:\\program files\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3477              	 .file 4 "c:\\program files\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3478              	 .file 5 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 3479              	 .file 6 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/XMCLib/inc/xmc4_scu.h"
 3480              	 .file 7 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/CMSIS/Include/cmsis_gcc.h"
 3481              	 .file 8 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/CMSIS/Include/core_cm4.h"
 3482              	 .file 9 "C:/Repos/tributech-oem-module-iot-kit-examples/IoT-KIT-Infineon-XMC47_RELAX_5V_AD_V1/XMC4700_USB_to_UART/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dma.c
    {standard input}:20     .text.XMC_DMA_GetEventStatus:00000000 $t
    {standard input}:24     .text.XMC_DMA_GetEventStatus:00000000 XMC_DMA_GetEventStatus
    {standard input}:64     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 $t
    {standard input}:68     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 XMC_DMA_GetChannelsTransferCompleteStatus
    {standard input}:107    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 $t
    {standard input}:111    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 XMC_DMA_GetChannelsBlockCompleteStatus
    {standard input}:150    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 $t
    {standard input}:154    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsSourceTransactionCompleteStatus
    {standard input}:193    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 $t
    {standard input}:197    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
    {standard input}:236    .text.XMC_DMA_GetChannelsErrorStatus:00000000 $t
    {standard input}:240    .text.XMC_DMA_GetChannelsErrorStatus:00000000 XMC_DMA_GetChannelsErrorStatus
    {standard input}:279    .bss.dma0_event_handlers:00000000 $d
    {standard input}:282    .bss.dma0_event_handlers:00000000 dma0_event_handlers
    {standard input}:285    .bss.dma1_event_handlers:00000000 $d
    {standard input}:288    .bss.dma1_event_handlers:00000000 dma1_event_handlers
    {standard input}:291    .text.XMC_DMA_Init:00000000 $t
    {standard input}:296    .text.XMC_DMA_Init:00000000 XMC_DMA_Init
    {standard input}:336    .text.XMC_DMA_Enable:00000000 XMC_DMA_Enable
    {standard input}:331    .text.XMC_DMA_Enable:00000000 $t
    {standard input}:390    .text.XMC_DMA_Enable:00000038 $d
    {standard input}:397    .text.XMC_DMA_Disable:00000000 $t
    {standard input}:402    .text.XMC_DMA_Disable:00000000 XMC_DMA_Disable
    {standard input}:456    .text.XMC_DMA_Disable:00000038 $d
    {standard input}:463    .text.XMC_DMA_IsEnabled:00000000 $t
    {standard input}:468    .text.XMC_DMA_IsEnabled:00000000 XMC_DMA_IsEnabled
    {standard input}:613    .text.XMC_DMA_IsEnabled:000000d8 $d
    {standard input}:620    .text.XMC_DMA_EnableRequestLine:00000000 $t
    {standard input}:625    .text.XMC_DMA_EnableRequestLine:00000000 XMC_DMA_EnableRequestLine
    {standard input}:728    .text.XMC_DMA_EnableRequestLine:00000090 $d
    {standard input}:734    .text.XMC_DMA_DisableRequestLine:00000000 $t
    {standard input}:739    .text.XMC_DMA_DisableRequestLine:00000000 XMC_DMA_DisableRequestLine
    {standard input}:803    .text.XMC_DMA_DisableRequestLine:0000004c $d
    {standard input}:809    .text.XMC_DMA_ClearRequestLine:00000000 $t
    {standard input}:814    .text.XMC_DMA_ClearRequestLine:00000000 XMC_DMA_ClearRequestLine
    {standard input}:896    .text.XMC_DMA_ClearRequestLine:00000070 $d
    {standard input}:902    .text.XMC_DMA_GetOverrunStatus:00000000 $t
    {standard input}:907    .text.XMC_DMA_GetOverrunStatus:00000000 XMC_DMA_GetOverrunStatus
    {standard input}:977    .text.XMC_DMA_GetOverrunStatus:00000058 $d
    {standard input}:983    .text.XMC_DMA_ClearOverrunStatus:00000000 $t
    {standard input}:988    .text.XMC_DMA_ClearOverrunStatus:00000000 XMC_DMA_ClearOverrunStatus
    {standard input}:1044   .text.XMC_DMA_ClearOverrunStatus:0000003c $d
    {standard input}:1050   .text.XMC_DMA_CH_Disable:00000000 $t
    {standard input}:1055   .text.XMC_DMA_CH_Disable:00000000 XMC_DMA_CH_Disable
    {standard input}:1109   .text.XMC_DMA_CH_IsEnabled:00000000 $t
    {standard input}:1114   .text.XMC_DMA_CH_IsEnabled:00000000 XMC_DMA_CH_IsEnabled
    {standard input}:1163   .text.XMC_DMA_CH_Init:00000000 $t
    {standard input}:1168   .text.XMC_DMA_CH_Init:00000000 XMC_DMA_CH_Init
    {standard input}:2042   .text.XMC_DMA_CH_ClearEventStatus:00000000 XMC_DMA_CH_ClearEventStatus
    {standard input}:1484   .text.XMC_DMA_CH_Init:00000250 $d
    {standard input}:1493   .text.XMC_DMA_CH_Init:00000274 $t
    {standard input}:1627   .text.XMC_DMA_CH_Init:0000037c $d
    {standard input}:1630   .text.XMC_DMA_CH_Init:00000380 $t
    {standard input}:1716   .text.XMC_DMA_CH_Suspend:00000000 $t
    {standard input}:1721   .text.XMC_DMA_CH_Suspend:00000000 XMC_DMA_CH_Suspend
    {standard input}:1774   .text.XMC_DMA_CH_Resume:00000000 $t
    {standard input}:1779   .text.XMC_DMA_CH_Resume:00000000 XMC_DMA_CH_Resume
    {standard input}:1832   .text.XMC_DMA_CH_IsSuspended:00000000 $t
    {standard input}:1837   .text.XMC_DMA_CH_IsSuspended:00000000 XMC_DMA_CH_IsSuspended
    {standard input}:1889   .text.XMC_DMA_CH_EnableEvent:00000000 $t
    {standard input}:1894   .text.XMC_DMA_CH_EnableEvent:00000000 XMC_DMA_CH_EnableEvent
    {standard input}:1963   .text.XMC_DMA_CH_DisableEvent:00000000 $t
    {standard input}:1968   .text.XMC_DMA_CH_DisableEvent:00000000 XMC_DMA_CH_DisableEvent
    {standard input}:2037   .text.XMC_DMA_CH_ClearEventStatus:00000000 $t
    {standard input}:2111   .text.XMC_DMA_CH_GetEventStatus:00000000 $t
    {standard input}:2116   .text.XMC_DMA_CH_GetEventStatus:00000000 XMC_DMA_CH_GetEventStatus
    {standard input}:2197   .text.XMC_DMA_CH_EnableSourceGather:00000000 $t
    {standard input}:2202   .text.XMC_DMA_CH_EnableSourceGather:00000000 XMC_DMA_CH_EnableSourceGather
    {standard input}:2271   .text.XMC_DMA_CH_DisableSourceGather:00000000 $t
    {standard input}:2276   .text.XMC_DMA_CH_DisableSourceGather:00000000 XMC_DMA_CH_DisableSourceGather
    {standard input}:2329   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 $t
    {standard input}:2334   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 XMC_DMA_CH_EnableDestinationScatter
    {standard input}:2403   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 $t
    {standard input}:2408   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 XMC_DMA_CH_DisableDestinationScatter
    {standard input}:2461   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 $t
    {standard input}:2466   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 XMC_DMA_CH_TriggerSourceRequest
    {standard input}:2538   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 $t
    {standard input}:2543   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 XMC_DMA_CH_TriggerDestinationRequest
    {standard input}:2615   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 $t
    {standard input}:2620   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 XMC_DMA_CH_EnableSourceAddressReload
    {standard input}:2673   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 $t
    {standard input}:2678   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 XMC_DMA_CH_DisableSourceAddressReload
    {standard input}:2731   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 $t
    {standard input}:2736   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 XMC_DMA_CH_EnableDestinationAddressReload
    {standard input}:2789   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 $t
    {standard input}:2794   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 XMC_DMA_CH_DisableDestinationAddressReload
    {standard input}:2847   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 $t
    {standard input}:2852   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 XMC_DMA_CH_RequestLastMultiblockTransfer
    {standard input}:2921   .text.XMC_DMA_CH_SetEventHandler:00000000 $t
    {standard input}:2926   .text.XMC_DMA_CH_SetEventHandler:00000000 XMC_DMA_CH_SetEventHandler
    {standard input}:2981   .text.XMC_DMA_CH_SetEventHandler:00000038 $d
    {standard input}:2988   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 $t
    {standard input}:2993   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 XMC_DMA_CH_ClearSourcePeripheralRequest
    {standard input}:3043   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 $t
    {standard input}:3048   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 XMC_DMA_CH_ClearDestinationPeripheralRequest
    {standard input}:3098   .text.XMC_DMA_IRQHandler:00000000 $t
    {standard input}:3103   .text.XMC_DMA_IRQHandler:00000000 XMC_DMA_IRQHandler
    {standard input}:3468   .text.XMC_DMA_IRQHandler:00000214 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_RESET_IsPeripheralResetAsserted
XMC_SCU_CLOCK_IsPeripheralClockGated
